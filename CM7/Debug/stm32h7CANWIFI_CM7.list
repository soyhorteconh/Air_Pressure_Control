
stm32h7CANWIFI_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc60  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800bf00  0800bf00  0001bf00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c454  0800c454  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c454  0800c454  0001c454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c45c  0800c45c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c45c  0800c45c  0001c45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c460  0800c460  0001c460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800c464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  240001e0  0800c644  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240004b4  0800c644  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e7c4  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e0c  00000000  00000000  0003e9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  000417e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a0  00000000  00000000  00043098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003dfb5  00000000  00000000  00044838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c729  00000000  00000000  000827ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a44b2  00000000  00000000  0009ef16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002433c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b58  00000000  00000000  00243418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bee8 	.word	0x0800bee8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800bee8 	.word	0x0800bee8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <_write>:
static void MX_TIM2_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void PID_Initialize(void);
double PID_Discrete( double yM );
int _write( int file, char *ptr, int len ){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++){
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	e00b      	b.n	80007ea <_write+0x2a>
		HAL_UART_Transmit(&huart2, ( uint8_t *)ptr++, 1, HAL_UART_TIMEOUT_VALUE);
 80007d2:	68b9      	ldr	r1, [r7, #8]
 80007d4:	1c4b      	adds	r3, r1, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80007dc:	2201      	movs	r2, #1
 80007de:	4807      	ldr	r0, [pc, #28]	; (80007fc <_write+0x3c>)
 80007e0:	f007 fda0 	bl	8008324 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++){
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	3301      	adds	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	dbef      	blt.n	80007d2 <_write+0x12>
	}
	return len;
 80007f2:	687b      	ldr	r3, [r7, #4]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2400034c 	.word	0x2400034c

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800080c:	bf00      	nop
 800080e:	4b8c      	ldr	r3, [pc, #560]	; (8000a40 <main+0x240>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000816:	2b00      	cmp	r3, #0
 8000818:	d004      	beq.n	8000824 <main+0x24>
 800081a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000820:	2b00      	cmp	r3, #0
 8000822:	dcf4      	bgt.n	800080e <main+0xe>
  if ( timeout < 0 )
 8000824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000826:	2b00      	cmp	r3, #0
 8000828:	da01      	bge.n	800082e <main+0x2e>
  {
  Error_Handler();
 800082a:	f000 fccb 	bl	80011c4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082e:	f000 ff4f 	bl	80016d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f927 	bl	8000a84 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000836:	4b82      	ldr	r3, [pc, #520]	; (8000a40 <main+0x240>)
 8000838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083c:	4a80      	ldr	r2, [pc, #512]	; (8000a40 <main+0x240>)
 800083e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000842:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000846:	4b7e      	ldr	r3, [pc, #504]	; (8000a40 <main+0x240>)
 8000848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000854:	2000      	movs	r0, #0
 8000856:	f003 fca9 	bl	80041ac <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800085a:	2100      	movs	r1, #0
 800085c:	2000      	movs	r0, #0
 800085e:	f003 fcbf 	bl	80041e0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000868:	bf00      	nop
 800086a:	4b75      	ldr	r3, [pc, #468]	; (8000a40 <main+0x240>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000872:	2b00      	cmp	r3, #0
 8000874:	d104      	bne.n	8000880 <main+0x80>
 8000876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000878:	1e5a      	subs	r2, r3, #1
 800087a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800087c:	2b00      	cmp	r3, #0
 800087e:	dcf4      	bgt.n	800086a <main+0x6a>
if ( timeout < 0 )
 8000880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000882:	2b00      	cmp	r3, #0
 8000884:	da01      	bge.n	800088a <main+0x8a>
{
Error_Handler();
 8000886:	f000 fc9d 	bl	80011c4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088a:	f000 fb3b 	bl	8000f04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800088e:	f000 faed 	bl	8000e6c <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000892:	f000 f9eb 	bl	8000c6c <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000896:	f000 fa8f 	bl	8000db8 <MX_TIM2_Init>
  MX_ADC1_Init();
 800089a:	f000 f96d 	bl	8000b78 <MX_ADC1_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800089e:	2100      	movs	r1, #0
 80008a0:	4868      	ldr	r0, [pc, #416]	; (8000a44 <main+0x244>)
 80008a2:	f006 fea9 	bl	80075f8 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN 2 */
  PID_Initialize();
 80008a6:	f000 fbab 	bl	8001000 <PID_Initialize>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //TIM2->CCR1 = 65535;
  printf("Hello STM32H7 CAN World!\r\n");
 80008aa:	4867      	ldr	r0, [pc, #412]	; (8000a48 <main+0x248>)
 80008ac:	f009 faf8 	bl	8009ea0 <puts>
  int PID_Value;
  int PID_Final;
  int PresionInt;
    while(1){
    	//Receive Data
    	if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 80008b0:	4b66      	ldr	r3, [pc, #408]	; (8000a4c <main+0x24c>)
 80008b2:	4a67      	ldr	r2, [pc, #412]	; (8000a50 <main+0x250>)
 80008b4:	2140      	movs	r1, #64	; 0x40
 80008b6:	4867      	ldr	r0, [pc, #412]	; (8000a54 <main+0x254>)
 80008b8:	f002 fec2 	bl	8003640 <HAL_FDCAN_GetRxMessage>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f6      	bne.n	80008b0 <main+0xb0>
    		//printf("Ya pase\r\n");
    setPoint = RxData[7];
 80008c2:	4b62      	ldr	r3, [pc, #392]	; (8000a4c <main+0x24c>)
 80008c4:	79db      	ldrb	r3, [r3, #7]
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b63      	ldr	r3, [pc, #396]	; (8000a58 <main+0x258>)
 80008ca:	601a      	str	r2, [r3, #0]
    //printf( "%d", RxData[7]);
   // printf(" PSI");
    printf("\r\n SetPoint = %d PSI", setPoint);
 80008cc:	4b62      	ldr	r3, [pc, #392]	; (8000a58 <main+0x258>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	4862      	ldr	r0, [pc, #392]	; (8000a5c <main+0x25c>)
 80008d4:	f009 fa5e 	bl	8009d94 <iprintf>
    printf("\r\n Mensaje recibido correctamente\r\n");
 80008d8:	4861      	ldr	r0, [pc, #388]	; (8000a60 <main+0x260>)
 80008da:	f009 fae1 	bl	8009ea0 <puts>

    //Sensor
    HAL_ADC_Start(&hadc1);
 80008de:	4861      	ldr	r0, [pc, #388]	; (8000a64 <main+0x264>)
 80008e0:	f001 fb3c 	bl	8001f5c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80008e4:	f04f 31ff 	mov.w	r1, #4294967295
 80008e8:	485e      	ldr	r0, [pc, #376]	; (8000a64 <main+0x264>)
 80008ea:	f001 fc01 	bl	80020f0 <HAL_ADC_PollForConversion>
    presionSensorRaw = HAL_ADC_GetValue(&hadc1);
 80008ee:	485d      	ldr	r0, [pc, #372]	; (8000a64 <main+0x264>)
 80008f0:	f001 fcf2 	bl	80022d8 <HAL_ADC_GetValue>
 80008f4:	4603      	mov	r3, r0
 80008f6:	857b      	strh	r3, [r7, #42]	; 0x2a
    Vin = 3.3 * (presionSensorRaw/65535.0);
 80008f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008fa:	ee07 3a90 	vmov	s15, r3
 80008fe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000902:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8000a18 <main+0x218>
 8000906:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800090a:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8000a20 <main+0x220>
 800090e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000912:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000916:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    presionSensorFinal = ((Vin-0.538) * 35);
 800091a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800091e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000922:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8000a28 <main+0x228>
 8000926:	ee37 7b46 	vsub.f64	d7, d7, d6
 800092a:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8000a30 <main+0x230>
 800092e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000932:	ed87 7b06 	vstr	d7, [r7, #24]
    //printf("%d, ", timesamp);
    //printf(" Pressure Sensor Value: %f PSI\r\n", presionSensorFinal);
    //printf("%f V\r\n", Vin);
    PresionInt = presionSensorFinal;
 8000936:	ed97 7b06 	vldr	d7, [r7, #24]
 800093a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800093e:	ee17 3a90 	vmov	r3, s15
 8000942:	617b      	str	r3, [r7, #20]

    if(PresionInt < setPoint-1){
 8000944:	4b44      	ldr	r3, [pc, #272]	; (8000a58 <main+0x258>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	3b01      	subs	r3, #1
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	429a      	cmp	r2, r3
 800094e:	da20      	bge.n	8000992 <main+0x192>
    	PID_Value = PID_Discrete(presionSensorFinal);
 8000950:	ed97 0b06 	vldr	d0, [r7, #24]
 8000954:	f000 fbb0 	bl	80010b8 <PID_Discrete>
 8000958:	eeb0 7b40 	vmov.f64	d7, d0
 800095c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000960:	ee17 3a90 	vmov	r3, s15
 8000964:	613b      	str	r3, [r7, #16]
    	PID_Final = PID_Value * 5461.25;
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000970:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8000a38 <main+0x238>
 8000974:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000978:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800097c:	ee17 3a90 	vmov	r3, s15
 8000980:	60fb      	str	r3, [r7, #12]
    	//PID_Final = (PID_Value*4.5)/100;
    	printf(" Valor PWM: %d\r\n", PID_Final);
 8000982:	68f9      	ldr	r1, [r7, #12]
 8000984:	4838      	ldr	r0, [pc, #224]	; (8000a68 <main+0x268>)
 8000986:	f009 fa05 	bl	8009d94 <iprintf>
    	TIM2->CCR1 = PID_Final;//(PID_Final*65535)/3.3;
 800098a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6353      	str	r3, [r2, #52]	; 0x34
    }
    if(PresionInt>=(setPoint)){
 8000992:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <main+0x258>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	429a      	cmp	r2, r3
 800099a:	db16      	blt.n	80009ca <main+0x1ca>
    	TIM2->CCR1 = 0;
 800099c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009a0:	2200      	movs	r2, #0
 80009a2:	635a      	str	r2, [r3, #52]	; 0x34
    	if(PresionInt > setPoint){
 80009a4:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <main+0x258>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	dd12      	ble.n	80009d4 <main+0x1d4>
    		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);// Abre valvula en NO
 80009ae:	2200      	movs	r2, #0
 80009b0:	2101      	movs	r1, #1
 80009b2:	482e      	ldr	r0, [pc, #184]	; (8000a6c <main+0x26c>)
 80009b4:	f003 fbe0 	bl	8004178 <HAL_GPIO_WritePin>
    		HAL_Delay(100);
 80009b8:	2064      	movs	r0, #100	; 0x64
 80009ba:	f000 ff1b 	bl	80017f4 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); //Cierra valvula en NO
 80009be:	2201      	movs	r2, #1
 80009c0:	2101      	movs	r1, #1
 80009c2:	482a      	ldr	r0, [pc, #168]	; (8000a6c <main+0x26c>)
 80009c4:	f003 fbd8 	bl	8004178 <HAL_GPIO_WritePin>
 80009c8:	e004      	b.n	80009d4 <main+0x1d4>
    	}
    }else{
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); //Cierra valvula en NO
 80009ca:	2201      	movs	r2, #1
 80009cc:	2101      	movs	r1, #1
 80009ce:	4827      	ldr	r0, [pc, #156]	; (8000a6c <main+0x26c>)
 80009d0:	f003 fbd2 	bl	8004178 <HAL_GPIO_WritePin>
    }

    //Send Data
    TxData[7] = presionSensorFinal; //Dato que se transmite
 80009d4:	ed97 7b06 	vldr	d7, [r7, #24]
 80009d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80009e0:	793b      	ldrb	r3, [r7, #4]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <main+0x270>)
 80009e6:	71da      	strb	r2, [r3, #7]
    printf(" Pressure Sensor Value: %d \r\n", TxData[7]);
 80009e8:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <main+0x270>)
 80009ea:	79db      	ldrb	r3, [r3, #7]
 80009ec:	4619      	mov	r1, r3
 80009ee:	4821      	ldr	r0, [pc, #132]	; (8000a74 <main+0x274>)
 80009f0:	f009 f9d0 	bl	8009d94 <iprintf>
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 80009f4:	4a1e      	ldr	r2, [pc, #120]	; (8000a70 <main+0x270>)
 80009f6:	4920      	ldr	r1, [pc, #128]	; (8000a78 <main+0x278>)
 80009f8:	4816      	ldr	r0, [pc, #88]	; (8000a54 <main+0x254>)
 80009fa:	f002 fdc6 	bl	800358a <HAL_FDCAN_AddMessageToTxFifoQ>
    printf(" Mensaje enviado correctamente\r\n");
 80009fe:	481f      	ldr	r0, [pc, #124]	; (8000a7c <main+0x27c>)
 8000a00:	f009 fa4e 	bl	8009ea0 <puts>
    printf("---------------------");
 8000a04:	481e      	ldr	r0, [pc, #120]	; (8000a80 <main+0x280>)
 8000a06:	f009 f9c5 	bl	8009d94 <iprintf>


    HAL_Delay(10);
 8000a0a:	200a      	movs	r0, #10
 8000a0c:	f000 fef2 	bl	80017f4 <HAL_Delay>
    	if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8000a10:	e74e      	b.n	80008b0 <main+0xb0>
 8000a12:	bf00      	nop
 8000a14:	f3af 8000 	nop.w
 8000a18:	00000000 	.word	0x00000000
 8000a1c:	40efffe0 	.word	0x40efffe0
 8000a20:	66666666 	.word	0x66666666
 8000a24:	400a6666 	.word	0x400a6666
 8000a28:	c6a7ef9e 	.word	0xc6a7ef9e
 8000a2c:	3fe1374b 	.word	0x3fe1374b
 8000a30:	00000000 	.word	0x00000000
 8000a34:	40418000 	.word	0x40418000
 8000a38:	00000000 	.word	0x00000000
 8000a3c:	40b55540 	.word	0x40b55540
 8000a40:	58024400 	.word	0x58024400
 8000a44:	24000300 	.word	0x24000300
 8000a48:	0800bf00 	.word	0x0800bf00
 8000a4c:	24000450 	.word	0x24000450
 8000a50:	24000420 	.word	0x24000420
 8000a54:	24000260 	.word	0x24000260
 8000a58:	24000498 	.word	0x24000498
 8000a5c:	0800bf1c 	.word	0x0800bf1c
 8000a60:	0800bf34 	.word	0x0800bf34
 8000a64:	240001fc 	.word	0x240001fc
 8000a68:	0800bf58 	.word	0x0800bf58
 8000a6c:	58020800 	.word	0x58020800
 8000a70:	24000448 	.word	0x24000448
 8000a74:	0800bf6c 	.word	0x0800bf6c
 8000a78:	240003fc 	.word	0x240003fc
 8000a7c:	0800bf8c 	.word	0x0800bf8c
 8000a80:	0800bfac 	.word	0x0800bfac

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09c      	sub	sp, #112	; 0x70
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	224c      	movs	r2, #76	; 0x4c
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f008 fd34 	bl	8009500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f008 fd2e 	bl	8009500 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000aa4:	2004      	movs	r0, #4
 8000aa6:	f003 fbaf 	bl	8004208 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <SystemClock_Config+0xec>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <SystemClock_Config+0xec>)
 8000ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ab8:	6193      	str	r3, [r2, #24]
 8000aba:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <SystemClock_Config+0xec>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <SystemClock_Config+0xf0>)
 8000ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac8:	4a2a      	ldr	r2, [pc, #168]	; (8000b74 <SystemClock_Config+0xf0>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ad0:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <SystemClock_Config+0xf0>)
 8000ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000adc:	bf00      	nop
 8000ade:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <SystemClock_Config+0xec>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aea:	d1f8      	bne.n	8000ade <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aec:	2301      	movs	r3, #1
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000af0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af6:	2302      	movs	r3, #2
 8000af8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afa:	2302      	movs	r3, #2
 8000afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000b02:	23f0      	movs	r3, #240	; 0xf0
 8000b04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 8000b0a:	2318      	movs	r3, #24
 8000b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b12:	2308      	movs	r3, #8
 8000b14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 fbca 	bl	80042bc <HAL_RCC_OscConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b2e:	f000 fb49 	bl	80011c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b32:	233f      	movs	r3, #63	; 0x3f
 8000b34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b36:	2303      	movs	r3, #3
 8000b38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b3e:	2308      	movs	r3, #8
 8000b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b42:	2340      	movs	r3, #64	; 0x40
 8000b44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b46:	2340      	movs	r3, #64	; 0x40
 8000b48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b50:	2340      	movs	r3, #64	; 0x40
 8000b52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2104      	movs	r1, #4
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 ffdd 	bl	8004b18 <HAL_RCC_ClockConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000b64:	f000 fb2e 	bl	80011c4 <Error_Handler>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3770      	adds	r7, #112	; 0x70
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	58024800 	.word	0x58024800
 8000b74:	58000400 	.word	0x58000400

08000b78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
 8000b98:	615a      	str	r2, [r3, #20]
 8000b9a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b9c:	4b30      	ldr	r3, [pc, #192]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000b9e:	4a31      	ldr	r2, [pc, #196]	; (8000c64 <MX_ADC1_Init+0xec>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ba2:	4b2f      	ldr	r3, [pc, #188]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000ba4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ba8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000baa:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bb0:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bb6:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000bb8:	2204      	movs	r2, #4
 8000bba:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bbc:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bc2:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000bc8:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bce:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bda:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000be0:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000be6:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bec:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bf2:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bfa:	4819      	ldr	r0, [pc, #100]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000bfc:	f001 f80c 	bl	8001c18 <HAL_ADC_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c06:	f000 fadd 	bl	80011c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4812      	ldr	r0, [pc, #72]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000c16:	f002 f877 	bl	8002d08 <HAL_ADCEx_MultiModeConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c20:	f000 fad0 	bl	80011c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_ADC1_Init+0xf0>)
 8000c26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c28:	2306      	movs	r3, #6
 8000c2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c30:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c34:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c36:	2304      	movs	r3, #4
 8000c38:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c42:	463b      	mov	r3, r7
 8000c44:	4619      	mov	r1, r3
 8000c46:	4806      	ldr	r0, [pc, #24]	; (8000c60 <MX_ADC1_Init+0xe8>)
 8000c48:	f001 fb54 	bl	80022f4 <HAL_ADC_ConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c52:	f000 fab7 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	; 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	240001fc 	.word	0x240001fc
 8000c64:	40022000 	.word	0x40022000
 8000c68:	14f00020 	.word	0x14f00020

08000c6c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c70:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000c72:	4a4d      	ldr	r2, [pc, #308]	; (8000da8 <MX_FDCAN1_Init+0x13c>)
 8000c74:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c76:	4b4b      	ldr	r3, [pc, #300]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c7c:	4b49      	ldr	r3, [pc, #292]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c82:	4b48      	ldr	r3, [pc, #288]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c88:	4b46      	ldr	r3, [pc, #280]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000c8e:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000c94:	4b43      	ldr	r3, [pc, #268]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000c96:	2202      	movs	r2, #2
 8000c98:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000c9a:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x3F;
 8000ca0:	4b40      	ldr	r3, [pc, #256]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000ca2:	223f      	movs	r2, #63	; 0x3f
 8000ca4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8000ca6:	4b3f      	ldr	r3, [pc, #252]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000ca8:	2210      	movs	r2, #16
 8000caa:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000cac:	4b3d      	ldr	r3, [pc, #244]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000cb2:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000cb8:	4b3a      	ldr	r3, [pc, #232]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000cbe:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000cc4:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000cca:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000cd0:	4b34      	ldr	r3, [pc, #208]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000cd6:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000cdc:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000cde:	2204      	movs	r2, #4
 8000ce0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ce8:	4b2e      	ldr	r3, [pc, #184]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000cea:	2204      	movs	r2, #4
 8000cec:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000cf4:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000d00:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000d06:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d0c:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d12:	4b24      	ldr	r3, [pc, #144]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000d14:	2204      	movs	r2, #4
 8000d16:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d18:	4822      	ldr	r0, [pc, #136]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000d1a:	f002 f9b7 	bl	800308c <HAL_FDCAN_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000d24:	f000 fa4e 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  /* Configure Rx filter */
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000d28:	4b20      	ldr	r3, [pc, #128]	; (8000dac <MX_FDCAN1_Init+0x140>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <MX_FDCAN1_Init+0x140>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000d34:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <MX_FDCAN1_Init+0x140>)
 8000d36:	2202      	movs	r2, #2
 8000d38:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <MX_FDCAN1_Init+0x140>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	60da      	str	r2, [r3, #12]


     /* Configure global filter to reject all non-matching frames */
     //HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000d40:	491a      	ldr	r1, [pc, #104]	; (8000dac <MX_FDCAN1_Init+0x140>)
 8000d42:	4818      	ldr	r0, [pc, #96]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000d44:	f002 fb80 	bl	8003448 <HAL_FDCAN_ConfigFilter>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_FDCAN1_Init+0xe6>
    {
  	  /* Filter configuration Error */
        Error_Handler();
 8000d4e:	f000 fa39 	bl	80011c4 <Error_Handler>
    }
    /* Start the FDCAN module */
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000d54:	f002 fbee 	bl	8003534 <HAL_FDCAN_Start>
    {
  	  /* Start Error */
    }


    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4811      	ldr	r0, [pc, #68]	; (8000da4 <MX_FDCAN1_Init+0x138>)
 8000d5e:	f002 fddd 	bl	800391c <HAL_FDCAN_ActivateNotification>
    {
  	  /* Notification Error */
    }

    /* Configure Tx buffer message */
    TxHeader.Identifier = 0x18F00422;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_FDCAN1_Init+0x144>)
 8000d64:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <MX_FDCAN1_Init+0x148>)
 8000d66:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_FDCAN1_Init+0x144>)
 8000d6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d6e:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_FDCAN1_Init+0x144>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_FDCAN1_Init+0x144>)
 8000d78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d7c:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_FDCAN1_Init+0x144>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <MX_FDCAN1_Init+0x144>)
 8000d86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d8a:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_FDCAN1_Init+0x144>)
 8000d8e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d92:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_FDCAN1_Init+0x144>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0x00;
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <MX_FDCAN1_Init+0x144>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	24000260 	.word	0x24000260
 8000da8:	4000a000 	.word	0x4000a000
 8000dac:	240003dc 	.word	0x240003dc
 8000db0:	240003fc 	.word	0x240003fc
 8000db4:	18f00422 	.word	0x18f00422

08000db8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
 8000dd8:	615a      	str	r2, [r3, #20]
 8000dda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <MX_TIM2_Init+0xb0>)
 8000dde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000de4:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <MX_TIM2_Init+0xb0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_TIM2_Init+0xb0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_TIM2_Init+0xb0>)
 8000df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000df6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_TIM2_Init+0xb0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_TIM2_Init+0xb0>)
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e04:	4818      	ldr	r0, [pc, #96]	; (8000e68 <MX_TIM2_Init+0xb0>)
 8000e06:	f006 fb9f 	bl	8007548 <HAL_TIM_PWM_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e10:	f000 f9d8 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_TIM2_Init+0xb0>)
 8000e24:	f007 f9a0 	bl	8008168 <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e2e:	f000 f9c9 	bl	80011c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e32:	2360      	movs	r3, #96	; 0x60
 8000e34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e42:	463b      	mov	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	4619      	mov	r1, r3
 8000e48:	4807      	ldr	r0, [pc, #28]	; (8000e68 <MX_TIM2_Init+0xb0>)
 8000e4a:	f006 fce3 	bl	8007814 <HAL_TIM_PWM_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e54:	f000 f9b6 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e58:	4803      	ldr	r0, [pc, #12]	; (8000e68 <MX_TIM2_Init+0xb0>)
 8000e5a:	f000 fa9f 	bl	800139c <HAL_TIM_MspPostInit>

}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	; 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	24000300 	.word	0x24000300

08000e6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000e72:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <MX_USART2_UART_Init+0x94>)
 8000e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb4:	4811      	ldr	r0, [pc, #68]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000eb6:	f007 f9e5 	bl	8008284 <HAL_UART_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ec0:	f000 f980 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	480d      	ldr	r0, [pc, #52]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000ec8:	f008 fa18 	bl	80092fc <HAL_UARTEx_SetTxFifoThreshold>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ed2:	f000 f977 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4808      	ldr	r0, [pc, #32]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000eda:	f008 fa4d 	bl	8009378 <HAL_UARTEx_SetRxFifoThreshold>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ee4:	f000 f96e 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000eea:	f008 f9ce 	bl	800928a <HAL_UARTEx_DisableFifoMode>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ef4:	f000 f966 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2400034c 	.word	0x2400034c
 8000f00:	40004400 	.word	0x40004400

08000f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f20:	4a35      	ldr	r2, [pc, #212]	; (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f2a:	4b33      	ldr	r3, [pc, #204]	; (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f38:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3e:	4a2e      	ldr	r2, [pc, #184]	; (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f48:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5c:	4a26      	ldr	r2, [pc, #152]	; (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f66:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	4a1f      	ldr	r2, [pc, #124]	; (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f84:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <MX_GPIO_Init+0xf4>)
 8000f9a:	f043 0308 	orr.w	r3, r3, #8
 8000f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <MX_GPIO_Init+0xf4>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa8:	f003 0308 	and.w	r3, r3, #8
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	4811      	ldr	r0, [pc, #68]	; (8000ffc <MX_GPIO_Init+0xf8>)
 8000fb6:	f003 f8df 	bl	8004178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000fba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480b      	ldr	r0, [pc, #44]	; (8000ffc <MX_GPIO_Init+0xf8>)
 8000fd0:	f002 ff22 	bl	8003e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4804      	ldr	r0, [pc, #16]	; (8000ffc <MX_GPIO_Init+0xf8>)
 8000fec:	f002 ff14 	bl	8003e18 <HAL_GPIO_Init>

}
 8000ff0:	bf00      	nop
 8000ff2:	3728      	adds	r7, #40	; 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	58020800 	.word	0x58020800

08001000 <PID_Initialize>:

/* USER CODE BEGIN 4 */
void PID_Initialize( void ){
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
    double T = 0.1;//			sample rate
 8001006:	a32a      	add	r3, pc, #168	; (adr r3, 80010b0 <PID_Initialize+0xb0>)
 8001008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100c:	e9c7 2300 	strd	r2, r3, [r7]
    //double k = __;
    //double tao = __;
    //double theta = __;

    //Calculate the coefficients for the discrete PID controller
    kp = 15.212;//6.212; //(0.9 * tao) / (k * theta)
 8001010:	4923      	ldr	r1, [pc, #140]	; (80010a0 <PID_Initialize+0xa0>)
 8001012:	a31f      	add	r3, pc, #124	; (adr r3, 8001090 <PID_Initialize+0x90>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	e9c1 2300 	strd	r2, r3, [r1]
    ti = 1.502; //3.33 * theta, 3.702
 800101c:	4921      	ldr	r1, [pc, #132]	; (80010a4 <PID_Initialize+0xa4>)
 800101e:	a31e      	add	r3, pc, #120	; (adr r3, 8001098 <PID_Initialize+0x98>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	e9c1 2300 	strd	r2, r3, [r1]
    q0 = kp + ((kp * T)/(2.0 * ti));
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <PID_Initialize+0xa0>)
 800102a:	ed93 6b00 	vldr	d6, [r3]
 800102e:	ed97 7b00 	vldr	d7, [r7]
 8001032:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <PID_Initialize+0xa4>)
 8001038:	ed93 7b00 	vldr	d7, [r3]
 800103c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001040:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <PID_Initialize+0xa0>)
 8001046:	ed93 7b00 	vldr	d7, [r3]
 800104a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <PID_Initialize+0xa8>)
 8001050:	ed83 7b00 	vstr	d7, [r3]
    q1 = ((kp * T)/(2.0 * ti)) - kp;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <PID_Initialize+0xa0>)
 8001056:	ed93 6b00 	vldr	d6, [r3]
 800105a:	ed97 7b00 	vldr	d7, [r7]
 800105e:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <PID_Initialize+0xa4>)
 8001064:	ed93 7b00 	vldr	d7, [r3]
 8001068:	ee37 7b07 	vadd.f64	d7, d7, d7
 800106c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <PID_Initialize+0xa0>)
 8001072:	ed93 7b00 	vldr	d7, [r3]
 8001076:	ee36 7b47 	vsub.f64	d7, d6, d7
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <PID_Initialize+0xac>)
 800107c:	ed83 7b00 	vstr	d7, [r3]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	f3af 8000 	nop.w
 8001090:	43958106 	.word	0x43958106
 8001094:	402e6c8b 	.word	0x402e6c8b
 8001098:	26e978d5 	.word	0x26e978d5
 800109c:	3ff80831 	.word	0x3ff80831
 80010a0:	24000478 	.word	0x24000478
 80010a4:	24000480 	.word	0x24000480
 80010a8:	24000488 	.word	0x24000488
 80010ac:	24000490 	.word	0x24000490
 80010b0:	9999999a 	.word	0x9999999a
 80010b4:	3fb99999 	.word	0x3fb99999

080010b8 <PID_Discrete>:

double PID_Discrete( double yM  ){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	ed87 0b00 	vstr	d0, [r7]
    double R = setPoint;//			set-point
 80010c2:	4b36      	ldr	r3, [pc, #216]	; (800119c <PID_Discrete+0xe4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010ce:	ed87 7b02 	vstr	d7, [r7, #8]

    e = R - yM;//				calculate the error
 80010d2:	ed97 6b02 	vldr	d6, [r7, #8]
 80010d6:	ed97 7b00 	vldr	d7, [r7]
 80010da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80010de:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <PID_Discrete+0xe8>)
 80010e0:	ed83 7b00 	vstr	d7, [r3]
    u = u_1 + q0*e + q1*e_1;//	discrete PID controller
 80010e4:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <PID_Discrete+0xec>)
 80010e6:	ed93 6b00 	vldr	d6, [r3]
 80010ea:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <PID_Discrete+0xe8>)
 80010ec:	ed93 7b00 	vldr	d7, [r3]
 80010f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80010f4:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <PID_Discrete+0xf0>)
 80010f6:	ed93 7b00 	vldr	d7, [r3]
 80010fa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <PID_Discrete+0xf4>)
 8001100:	ed93 5b00 	vldr	d5, [r3]
 8001104:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <PID_Discrete+0xf8>)
 8001106:	ed93 7b00 	vldr	d7, [r3]
 800110a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800110e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001112:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <PID_Discrete+0xfc>)
 8001114:	ed83 7b00 	vstr	d7, [r3]
    //u = kp*e;
    printf(" Error: %f\r\n", e);
 8001118:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <PID_Discrete+0xe8>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	4826      	ldr	r0, [pc, #152]	; (80011b8 <PID_Discrete+0x100>)
 8001120:	f008 fe38 	bl	8009d94 <iprintf>
    printf(" Salida PID %f\r\n", u);
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <PID_Discrete+0xfc>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	4824      	ldr	r0, [pc, #144]	; (80011bc <PID_Discrete+0x104>)
 800112c:	f008 fe32 	bl	8009d94 <iprintf>
    //Saturate the controller with upper and lower limits
    if(u >= 12)// 			maximum pressure value
 8001130:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <PID_Discrete+0xfc>)
 8001132:	ed93 7b00 	vldr	d7, [r3]
 8001136:	eeb2 6b08 	vmov.f64	d6, #40	; 0x41400000  12.0
 800113a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	db05      	blt.n	8001150 <PID_Discrete+0x98>
        u = 12;
 8001144:	491b      	ldr	r1, [pc, #108]	; (80011b4 <PID_Discrete+0xfc>)
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <PID_Discrete+0x108>)
 800114c:	e9c1 2300 	strd	r2, r3, [r1]
    if(u <= 0)//			minimum pressure value
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <PID_Discrete+0xfc>)
 8001152:	ed93 7b00 	vldr	d7, [r3]
 8001156:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115e:	d806      	bhi.n	800116e <PID_Discrete+0xb6>
        u = 0;
 8001160:	4914      	ldr	r1, [pc, #80]	; (80011b4 <PID_Discrete+0xfc>)
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	e9c1 2300 	strd	r2, r3, [r1]
    //Update the values for the next iteration
    e_1 = e;
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <PID_Discrete+0xe8>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	490e      	ldr	r1, [pc, #56]	; (80011b0 <PID_Discrete+0xf8>)
 8001176:	e9c1 2300 	strd	r2, r3, [r1]
    u_1 = u;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <PID_Discrete+0xfc>)
 800117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001180:	4909      	ldr	r1, [pc, #36]	; (80011a8 <PID_Discrete+0xf0>)
 8001182:	e9c1 2300 	strd	r2, r3, [r1]

    return u;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <PID_Discrete+0xfc>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001190:	eeb0 0b47 	vmov.f64	d0, d7
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	24000498 	.word	0x24000498
 80011a0:	24000458 	.word	0x24000458
 80011a4:	24000488 	.word	0x24000488
 80011a8:	24000470 	.word	0x24000470
 80011ac:	24000490 	.word	0x24000490
 80011b0:	24000460 	.word	0x24000460
 80011b4:	24000468 	.word	0x24000468
 80011b8:	0800bfc4 	.word	0x0800bfc4
 80011bc:	0800bfd4 	.word	0x0800bfd4
 80011c0:	40280000 	.word	0x40280000

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
}
 80011ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011cc:	e7fe      	b.n	80011cc <Error_Handler+0x8>
	...

080011d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_MspInit+0x30>)
 80011d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011dc:	4a08      	ldr	r2, [pc, #32]	; (8001200 <HAL_MspInit+0x30>)
 80011de:	f043 0302 	orr.w	r3, r3, #2
 80011e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_MspInit+0x30>)
 80011e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	58024400 	.word	0x58024400

08001204 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a18      	ldr	r2, [pc, #96]	; (8001284 <HAL_ADC_MspInit+0x80>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d129      	bne.n	800127a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <HAL_ADC_MspInit+0x84>)
 8001228:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800122c:	4a16      	ldr	r2, [pc, #88]	; (8001288 <HAL_ADC_MspInit+0x84>)
 800122e:	f043 0320 	orr.w	r3, r3, #32
 8001232:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HAL_ADC_MspInit+0x84>)
 8001238:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800123c:	f003 0320 	and.w	r3, r3, #32
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_ADC_MspInit+0x84>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124a:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <HAL_ADC_MspInit+0x84>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <HAL_ADC_MspInit+0x84>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001262:	2302      	movs	r3, #2
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001266:	2303      	movs	r3, #3
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <HAL_ADC_MspInit+0x88>)
 8001276:	f002 fdcf 	bl	8003e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	; 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40022000 	.word	0x40022000
 8001288:	58024400 	.word	0x58024400
 800128c:	58020400 	.word	0x58020400

08001290 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b0b8      	sub	sp, #224	; 0xe0
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	22bc      	movs	r2, #188	; 0xbc
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f008 f925 	bl	8009500 <memset>
  if(hfdcan->Instance==FDCAN1)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a25      	ldr	r2, [pc, #148]	; (8001350 <HAL_FDCAN_MspInit+0xc0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d142      	bne.n	8001346 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80012c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80012c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80012ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 ffad 	bl	8005230 <HAL_RCCEx_PeriphCLKConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80012dc:	f7ff ff72 	bl	80011c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <HAL_FDCAN_MspInit+0xc4>)
 80012e2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80012e6:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <HAL_FDCAN_MspInit+0xc4>)
 80012e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ec:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_FDCAN_MspInit+0xc4>)
 80012f2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80012f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_FDCAN_MspInit+0xc4>)
 8001300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001304:	4a13      	ldr	r2, [pc, #76]	; (8001354 <HAL_FDCAN_MspInit+0xc4>)
 8001306:	f043 0308 	orr.w	r3, r3, #8
 800130a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_FDCAN_MspInit+0xc4>)
 8001310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800131c:	2303      	movs	r3, #3
 800131e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001334:	2309      	movs	r3, #9
 8001336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800133e:	4619      	mov	r1, r3
 8001340:	4805      	ldr	r0, [pc, #20]	; (8001358 <HAL_FDCAN_MspInit+0xc8>)
 8001342:	f002 fd69 	bl	8003e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001346:	bf00      	nop
 8001348:	37e0      	adds	r7, #224	; 0xe0
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	4000a000 	.word	0x4000a000
 8001354:	58024400 	.word	0x58024400
 8001358:	58020c00 	.word	0x58020c00

0800135c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800136c:	d10e      	bne.n	800138c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_TIM_PWM_MspInit+0x3c>)
 8001370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001374:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_TIM_PWM_MspInit+0x3c>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_TIM_PWM_MspInit+0x3c>)
 8001380:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	58024400 	.word	0x58024400

0800139c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013bc:	d11e      	bne.n	80013fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_TIM_MspPostInit+0x68>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c4:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <HAL_TIM_MspPostInit+0x68>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_TIM_MspPostInit+0x68>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013dc:	2301      	movs	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013ec:	2301      	movs	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	4619      	mov	r1, r3
 80013f6:	4804      	ldr	r0, [pc, #16]	; (8001408 <HAL_TIM_MspPostInit+0x6c>)
 80013f8:	f002 fd0e 	bl	8003e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	58024400 	.word	0x58024400
 8001408:	58020000 	.word	0x58020000

0800140c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b0b8      	sub	sp, #224	; 0xe0
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	22bc      	movs	r2, #188	; 0xbc
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f008 f867 	bl	8009500 <memset>
  if(huart->Instance==USART2)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a24      	ldr	r2, [pc, #144]	; (80014c8 <HAL_UART_MspInit+0xbc>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d141      	bne.n	80014c0 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800143c:	2302      	movs	r3, #2
 800143e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	4618      	mov	r0, r3
 800144c:	f003 fef0 	bl	8005230 <HAL_RCCEx_PeriphCLKConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001456:	f7ff feb5 	bl	80011c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <HAL_UART_MspInit+0xc0>)
 800145c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001460:	4a1a      	ldr	r2, [pc, #104]	; (80014cc <HAL_UART_MspInit+0xc0>)
 8001462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001466:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_UART_MspInit+0xc0>)
 800146c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <HAL_UART_MspInit+0xc0>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147e:	4a13      	ldr	r2, [pc, #76]	; (80014cc <HAL_UART_MspInit+0xc0>)
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_UART_MspInit+0xc0>)
 800148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001496:	2360      	movs	r3, #96	; 0x60
 8001498:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ae:	2307      	movs	r3, #7
 80014b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014b8:	4619      	mov	r1, r3
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <HAL_UART_MspInit+0xc4>)
 80014bc:	f002 fcac 	bl	8003e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014c0:	bf00      	nop
 80014c2:	37e0      	adds	r7, #224	; 0xe0
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40004400 	.word	0x40004400
 80014cc:	58024400 	.word	0x58024400
 80014d0:	58020c00 	.word	0x58020c00

080014d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <NMI_Handler+0x4>

080014da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <MemManage_Handler+0x4>

080014e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001520:	f000 f948 	bl	80017b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	return 1;
 800152c:	2301      	movs	r3, #1
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_kill>:

int _kill(int pid, int sig)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001542:	f007 ffa5 	bl	8009490 <__errno>
 8001546:	4603      	mov	r3, r0
 8001548:	2216      	movs	r2, #22
 800154a:	601a      	str	r2, [r3, #0]
	return -1;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <_exit>:

void _exit (int status)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ffe7 	bl	8001538 <_kill>
	while (1) {}		/* Make sure we hang here */
 800156a:	e7fe      	b.n	800156a <_exit+0x12>

0800156c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e00a      	b.n	8001594 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800157e:	f3af 8000 	nop.w
 8001582:	4601      	mov	r1, r0
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	60ba      	str	r2, [r7, #8]
 800158a:	b2ca      	uxtb	r2, r1
 800158c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	dbf0      	blt.n	800157e <_read+0x12>
	}

return len;
 800159c:	687b      	ldr	r3, [r7, #4]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
	return -1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ce:	605a      	str	r2, [r3, #4]
	return 0;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <_isatty>:

int _isatty(int file)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
	return 1;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001618:	4a14      	ldr	r2, [pc, #80]	; (800166c <_sbrk+0x5c>)
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <_sbrk+0x60>)
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <_sbrk+0x64>)
 800162e:	4a12      	ldr	r2, [pc, #72]	; (8001678 <_sbrk+0x68>)
 8001630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	429a      	cmp	r2, r3
 800163e:	d207      	bcs.n	8001650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001640:	f007 ff26 	bl	8009490 <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	220c      	movs	r2, #12
 8001648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	e009      	b.n	8001664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <_sbrk+0x64>)
 8001660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	24080000 	.word	0x24080000
 8001670:	00000400 	.word	0x00000400
 8001674:	2400049c 	.word	0x2400049c
 8001678:	240004b8 	.word	0x240004b8

0800167c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800167c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001680:	f7ff f808 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001684:	480c      	ldr	r0, [pc, #48]	; (80016b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001686:	490d      	ldr	r1, [pc, #52]	; (80016bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001688:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800168c:	e002      	b.n	8001694 <LoopCopyDataInit>

0800168e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001692:	3304      	adds	r3, #4

08001694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001698:	d3f9      	bcc.n	800168e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800169c:	4c0a      	ldr	r4, [pc, #40]	; (80016c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a0:	e001      	b.n	80016a6 <LoopFillZerobss>

080016a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a4:	3204      	adds	r2, #4

080016a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a8:	d3fb      	bcc.n	80016a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016aa:	f007 fef7 	bl	800949c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ae:	f7ff f8a7 	bl	8000800 <main>
  bx  lr
 80016b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016bc:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80016c0:	0800c464 	.word	0x0800c464
  ldr r2, =_sbss
 80016c4:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80016c8:	240004b4 	.word	0x240004b4

080016cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016cc:	e7fe      	b.n	80016cc <ADC3_IRQHandler>
	...

080016d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d6:	2003      	movs	r0, #3
 80016d8:	f001 fca6 	bl	8003028 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016dc:	f003 fbd2 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 80016e0:	4602      	mov	r2, r0
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_Init+0x68>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	4913      	ldr	r1, [pc, #76]	; (800173c <HAL_Init+0x6c>)
 80016ee:	5ccb      	ldrb	r3, [r1, r3]
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
 80016f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_Init+0x68>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	4a0e      	ldr	r2, [pc, #56]	; (800173c <HAL_Init+0x6c>)
 8001704:	5cd3      	ldrb	r3, [r2, r3]
 8001706:	f003 031f 	and.w	r3, r3, #31
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	fa22 f303 	lsr.w	r3, r2, r3
 8001710:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <HAL_Init+0x70>)
 8001712:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <HAL_Init+0x74>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171a:	200f      	movs	r0, #15
 800171c:	f000 f814 	bl	8001748 <HAL_InitTick>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e002      	b.n	8001730 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800172a:	f7ff fd51 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	58024400 	.word	0x58024400
 800173c:	0800c034 	.word	0x0800c034
 8001740:	24000004 	.word	0x24000004
 8001744:	24000000 	.word	0x24000000

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_InitTick+0x60>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e021      	b.n	80017a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_InitTick+0x64>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_InitTick+0x60>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176a:	fbb3 f3f1 	udiv	r3, r3, r1
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f001 fc7d 	bl	8003072 <HAL_SYSTICK_Config>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e00e      	b.n	80017a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b0f      	cmp	r3, #15
 8001786:	d80a      	bhi.n	800179e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001788:	2200      	movs	r2, #0
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f001 fc55 	bl	800303e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001794:	4a06      	ldr	r2, [pc, #24]	; (80017b0 <HAL_InitTick+0x68>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	e000      	b.n	80017a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	2400000c 	.word	0x2400000c
 80017ac:	24000000 	.word	0x24000000
 80017b0:	24000008 	.word	0x24000008

080017b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x20>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_IncTick+0x24>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <HAL_IncTick+0x24>)
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	2400000c 	.word	0x2400000c
 80017d8:	240004a0 	.word	0x240004a0

080017dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return uwTick;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <HAL_GetTick+0x14>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	240004a0 	.word	0x240004a0

080017f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff ffee 	bl	80017dc <HAL_GetTick>
 8001800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180c:	d005      	beq.n	800181a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_Delay+0x44>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800181a:	bf00      	nop
 800181c:	f7ff ffde 	bl	80017dc <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	429a      	cmp	r2, r3
 800182a:	d8f7      	bhi.n	800181c <HAL_Delay+0x28>
  {
  }
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2400000c 	.word	0x2400000c

0800183c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <HAL_GetREVID+0x14>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	0c1b      	lsrs	r3, r3, #16
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	5c001000 	.word	0x5c001000

08001854 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	609a      	str	r2, [r3, #8]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	609a      	str	r2, [r3, #8]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3360      	adds	r3, #96	; 0x60
 80018ce:	461a      	mov	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	431a      	orrs	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80018f0:	bf00      	nop
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	431a      	orrs	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	611a      	str	r2, [r3, #16]
}
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800192e:	b480      	push	{r7}
 8001930:	b087      	sub	sp, #28
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3360      	adds	r3, #96	; 0x60
 800193e:	461a      	mov	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	431a      	orrs	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	601a      	str	r2, [r3, #0]
  }
}
 8001958:	bf00      	nop
 800195a:	371c      	adds	r7, #28
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800198a:	b480      	push	{r7}
 800198c:	b087      	sub	sp, #28
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3330      	adds	r3, #48	; 0x30
 800199a:	461a      	mov	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	4413      	add	r3, r2
 80019a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	211f      	movs	r1, #31
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	401a      	ands	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	0e9b      	lsrs	r3, r3, #26
 80019c2:	f003 011f 	and.w	r1, r3, #31
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	431a      	orrs	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019d6:	bf00      	nop
 80019d8:	371c      	adds	r7, #28
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b087      	sub	sp, #28
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3314      	adds	r3, #20
 80019f2:	461a      	mov	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	0e5b      	lsrs	r3, r3, #25
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	4413      	add	r3, r2
 8001a00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	0d1b      	lsrs	r3, r3, #20
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	2107      	movs	r1, #7
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	401a      	ands	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	0d1b      	lsrs	r3, r3, #20
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	431a      	orrs	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a2c:	bf00      	nop
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a50:	43db      	mvns	r3, r3
 8001a52:	401a      	ands	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0318 	and.w	r3, r3, #24
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a5c:	40d9      	lsrs	r1, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	400b      	ands	r3, r1
 8001a62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a66:	431a      	orrs	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	000fffff 	.word	0x000fffff

08001a80 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 031f 	and.w	r3, r3, #31
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6093      	str	r3, [r2, #8]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	5fffffc0 	.word	0x5fffffc0

08001adc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001af0:	d101      	bne.n	8001af6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	6fffffc0 	.word	0x6fffffc0

08001b2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b40:	d101      	bne.n	8001b46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <LL_ADC_Enable+0x24>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	f043 0201 	orr.w	r2, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	7fffffc0 	.word	0x7fffffc0

08001b7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <LL_ADC_IsEnabled+0x18>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <LL_ADC_IsEnabled+0x1a>
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <LL_ADC_REG_StartConversion+0x24>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	f043 0204 	orr.w	r2, r3, #4
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	7fffffc0 	.word	0x7fffffc0

08001bcc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d101      	bne.n	8001be4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d101      	bne.n	8001c0a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e18f      	b.n	8001f52 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d109      	bne.n	8001c54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff fadf 	bl	8001204 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff3f 	bl	8001adc <LL_ADC_IsDeepPowerDownEnabled>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d004      	beq.n	8001c6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff25 	bl	8001ab8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff5a 	bl	8001b2c <LL_ADC_IsInternalRegulatorEnabled>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d114      	bne.n	8001ca8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff3e 	bl	8001b04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c88:	4b87      	ldr	r3, [pc, #540]	; (8001ea8 <HAL_ADC_Init+0x290>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	4a87      	ldr	r2, [pc, #540]	; (8001eac <HAL_ADC_Init+0x294>)
 8001c90:	fba2 2303 	umull	r2, r3, r2, r3
 8001c94:	099b      	lsrs	r3, r3, #6
 8001c96:	3301      	adds	r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c9a:	e002      	b.n	8001ca2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f9      	bne.n	8001c9c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff3d 	bl	8001b2c <LL_ADC_IsInternalRegulatorEnabled>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10d      	bne.n	8001cd4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbc:	f043 0210 	orr.w	r2, r3, #16
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	f043 0201 	orr.w	r2, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff77 	bl	8001bcc <LL_ADC_REG_IsConversionOngoing>
 8001cde:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f040 8129 	bne.w	8001f40 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f040 8125 	bne.w	8001f40 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cfe:	f043 0202 	orr.w	r2, r3, #2
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff36 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d136      	bne.n	8001d84 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a65      	ldr	r2, [pc, #404]	; (8001eb0 <HAL_ADC_Init+0x298>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d004      	beq.n	8001d2a <HAL_ADC_Init+0x112>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a63      	ldr	r2, [pc, #396]	; (8001eb4 <HAL_ADC_Init+0x29c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d10e      	bne.n	8001d48 <HAL_ADC_Init+0x130>
 8001d2a:	4861      	ldr	r0, [pc, #388]	; (8001eb0 <HAL_ADC_Init+0x298>)
 8001d2c:	f7ff ff26 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d30:	4604      	mov	r4, r0
 8001d32:	4860      	ldr	r0, [pc, #384]	; (8001eb4 <HAL_ADC_Init+0x29c>)
 8001d34:	f7ff ff22 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	e008      	b.n	8001d5a <HAL_ADC_Init+0x142>
 8001d48:	485b      	ldr	r0, [pc, #364]	; (8001eb8 <HAL_ADC_Init+0x2a0>)
 8001d4a:	f7ff ff17 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf0c      	ite	eq
 8001d54:	2301      	moveq	r3, #1
 8001d56:	2300      	movne	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d012      	beq.n	8001d84 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a53      	ldr	r2, [pc, #332]	; (8001eb0 <HAL_ADC_Init+0x298>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d004      	beq.n	8001d72 <HAL_ADC_Init+0x15a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a51      	ldr	r2, [pc, #324]	; (8001eb4 <HAL_ADC_Init+0x29c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_Init+0x15e>
 8001d72:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <HAL_ADC_Init+0x2a4>)
 8001d74:	e000      	b.n	8001d78 <HAL_ADC_Init+0x160>
 8001d76:	4a52      	ldr	r2, [pc, #328]	; (8001ec0 <HAL_ADC_Init+0x2a8>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4610      	mov	r0, r2
 8001d80:	f7ff fd68 	bl	8001854 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001d84:	f7ff fd5a 	bl	800183c <HAL_GetREVID>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d914      	bls.n	8001dbc <HAL_ADC_Init+0x1a4>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b10      	cmp	r3, #16
 8001d98:	d110      	bne.n	8001dbc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7d5b      	ldrb	r3, [r3, #21]
 8001d9e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001da4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001daa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	7f1b      	ldrb	r3, [r3, #28]
 8001db0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001db2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001db4:	f043 030c 	orr.w	r3, r3, #12
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	e00d      	b.n	8001dd8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7d5b      	ldrb	r3, [r3, #21]
 8001dc0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dc6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001dcc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7f1b      	ldrb	r3, [r3, #28]
 8001dd2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7f1b      	ldrb	r3, [r3, #28]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d106      	bne.n	8001dee <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	045b      	lsls	r3, r3, #17
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d009      	beq.n	8001e0a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_ADC_Init+0x2ac>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	69b9      	ldr	r1, [r7, #24]
 8001e1a:	430b      	orrs	r3, r1
 8001e1c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fed2 	bl	8001bcc <LL_ADC_REG_IsConversionOngoing>
 8001e28:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fedf 	bl	8001bf2 <LL_ADC_INJ_IsConversionOngoing>
 8001e34:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d15f      	bne.n	8001efc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d15c      	bne.n	8001efc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7d1b      	ldrb	r3, [r3, #20]
 8001e46:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <HAL_ADC_Init+0x2b0>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	69b9      	ldr	r1, [r7, #24]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d130      	bne.n	8001ed0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_ADC_Init+0x2b4>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e82:	3a01      	subs	r2, #1
 8001e84:	0411      	lsls	r1, r2, #16
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e8a:	4311      	orrs	r1, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e90:	4311      	orrs	r1, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e96:	430a      	orrs	r2, r1
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	611a      	str	r2, [r3, #16]
 8001ea4:	e01c      	b.n	8001ee0 <HAL_ADC_Init+0x2c8>
 8001ea6:	bf00      	nop
 8001ea8:	24000000 	.word	0x24000000
 8001eac:	053e2d63 	.word	0x053e2d63
 8001eb0:	40022000 	.word	0x40022000
 8001eb4:	40022100 	.word	0x40022100
 8001eb8:	58026000 	.word	0x58026000
 8001ebc:	40022300 	.word	0x40022300
 8001ec0:	58026300 	.word	0x58026300
 8001ec4:	fff0c003 	.word	0xfff0c003
 8001ec8:	ffffbffc 	.word	0xffffbffc
 8001ecc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fdd6 	bl	8002aa8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d10c      	bne.n	8001f1e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f023 010f 	bic.w	r1, r3, #15
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	1e5a      	subs	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f1c:	e007      	b.n	8001f2e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 020f 	bic.w	r2, r2, #15
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	f023 0303 	bic.w	r3, r3, #3
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	655a      	str	r2, [r3, #84]	; 0x54
 8001f3e:	e007      	b.n	8001f50 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f44:	f043 0210 	orr.w	r2, r3, #16
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f50:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd90      	pop	{r4, r7, pc}
 8001f5a:	bf00      	nop

08001f5c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a5c      	ldr	r2, [pc, #368]	; (80020dc <HAL_ADC_Start+0x180>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d004      	beq.n	8001f78 <HAL_ADC_Start+0x1c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a5b      	ldr	r2, [pc, #364]	; (80020e0 <HAL_ADC_Start+0x184>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_ADC_Start+0x20>
 8001f78:	4b5a      	ldr	r3, [pc, #360]	; (80020e4 <HAL_ADC_Start+0x188>)
 8001f7a:	e000      	b.n	8001f7e <HAL_ADC_Start+0x22>
 8001f7c:	4b5a      	ldr	r3, [pc, #360]	; (80020e8 <HAL_ADC_Start+0x18c>)
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fd7e 	bl	8001a80 <LL_ADC_GetMultimode>
 8001f84:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fe1e 	bl	8001bcc <LL_ADC_REG_IsConversionOngoing>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 809a 	bne.w	80020cc <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_Start+0x4a>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e095      	b.n	80020d2 <HAL_ADC_Start+0x176>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fcf0 	bl	8002994 <ADC_Enable>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f040 8081 	bne.w	80020c2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fc4:	4b49      	ldr	r3, [pc, #292]	; (80020ec <HAL_ADC_Start+0x190>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a42      	ldr	r2, [pc, #264]	; (80020e0 <HAL_ADC_Start+0x184>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d002      	beq.n	8001fe0 <HAL_ADC_Start+0x84>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	e000      	b.n	8001fe2 <HAL_ADC_Start+0x86>
 8001fe0:	4b3e      	ldr	r3, [pc, #248]	; (80020dc <HAL_ADC_Start+0x180>)
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d002      	beq.n	8001ff0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d105      	bne.n	8001ffc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002008:	d106      	bne.n	8002018 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	f023 0206 	bic.w	r2, r3, #6
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	659a      	str	r2, [r3, #88]	; 0x58
 8002016:	e002      	b.n	800201e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	221c      	movs	r2, #28
 8002024:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a2b      	ldr	r2, [pc, #172]	; (80020e0 <HAL_ADC_Start+0x184>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d002      	beq.n	800203e <HAL_ADC_Start+0xe2>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	e000      	b.n	8002040 <HAL_ADC_Start+0xe4>
 800203e:	4b27      	ldr	r3, [pc, #156]	; (80020dc <HAL_ADC_Start+0x180>)
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	4293      	cmp	r3, r2
 8002046:	d008      	beq.n	800205a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d002      	beq.n	800205a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	2b09      	cmp	r3, #9
 8002058:	d114      	bne.n	8002084 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d007      	beq.n	8002078 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002070:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fd91 	bl	8001ba4 <LL_ADC_REG_StartConversion>
 8002082:	e025      	b.n	80020d0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002088:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <HAL_ADC_Start+0x184>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d002      	beq.n	80020a0 <HAL_ADC_Start+0x144>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	e000      	b.n	80020a2 <HAL_ADC_Start+0x146>
 80020a0:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_ADC_Start+0x180>)
 80020a2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00f      	beq.n	80020d0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	655a      	str	r2, [r3, #84]	; 0x54
 80020c0:	e006      	b.n	80020d0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80020ca:	e001      	b.n	80020d0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020cc:	2302      	movs	r3, #2
 80020ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40022000 	.word	0x40022000
 80020e0:	40022100 	.word	0x40022100
 80020e4:	40022300 	.word	0x40022300
 80020e8:	58026300 	.word	0x58026300
 80020ec:	fffff0fe 	.word	0xfffff0fe

080020f0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a72      	ldr	r2, [pc, #456]	; (80022c8 <HAL_ADC_PollForConversion+0x1d8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d004      	beq.n	800210e <HAL_ADC_PollForConversion+0x1e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a70      	ldr	r2, [pc, #448]	; (80022cc <HAL_ADC_PollForConversion+0x1dc>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d101      	bne.n	8002112 <HAL_ADC_PollForConversion+0x22>
 800210e:	4b70      	ldr	r3, [pc, #448]	; (80022d0 <HAL_ADC_PollForConversion+0x1e0>)
 8002110:	e000      	b.n	8002114 <HAL_ADC_PollForConversion+0x24>
 8002112:	4b70      	ldr	r3, [pc, #448]	; (80022d4 <HAL_ADC_PollForConversion+0x1e4>)
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fcb3 	bl	8001a80 <LL_ADC_GetMultimode>
 800211a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b08      	cmp	r3, #8
 8002122:	d102      	bne.n	800212a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002124:	2308      	movs	r3, #8
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	e037      	b.n	800219a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2b05      	cmp	r3, #5
 8002134:	d002      	beq.n	800213c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2b09      	cmp	r3, #9
 800213a:	d111      	bne.n	8002160 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d007      	beq.n	800215a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	f043 0220 	orr.w	r2, r3, #32
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e0b1      	b.n	80022be <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800215a:	2304      	movs	r3, #4
 800215c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800215e:	e01c      	b.n	800219a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a58      	ldr	r2, [pc, #352]	; (80022c8 <HAL_ADC_PollForConversion+0x1d8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d004      	beq.n	8002174 <HAL_ADC_PollForConversion+0x84>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a57      	ldr	r2, [pc, #348]	; (80022cc <HAL_ADC_PollForConversion+0x1dc>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d101      	bne.n	8002178 <HAL_ADC_PollForConversion+0x88>
 8002174:	4b56      	ldr	r3, [pc, #344]	; (80022d0 <HAL_ADC_PollForConversion+0x1e0>)
 8002176:	e000      	b.n	800217a <HAL_ADC_PollForConversion+0x8a>
 8002178:	4b56      	ldr	r3, [pc, #344]	; (80022d4 <HAL_ADC_PollForConversion+0x1e4>)
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fc8e 	bl	8001a9c <LL_ADC_GetMultiDMATransfer>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218a:	f043 0220 	orr.w	r2, r3, #32
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e093      	b.n	80022be <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002196:	2304      	movs	r3, #4
 8002198:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800219a:	f7ff fb1f 	bl	80017dc <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021a0:	e021      	b.n	80021e6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d01d      	beq.n	80021e6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80021aa:	f7ff fb17 	bl	80017dc <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d302      	bcc.n	80021c0 <HAL_ADC_PollForConversion+0xd0>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d112      	bne.n	80021e6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10b      	bne.n	80021e6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d2:	f043 0204 	orr.w	r2, r3, #4
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e06b      	b.n	80022be <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0d6      	beq.n	80021a2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fbad 	bl	8001964 <LL_ADC_REG_IsTriggerSourceSWStart>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d01c      	beq.n	800224a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7d5b      	ldrb	r3, [r3, #21]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d118      	bne.n	800224a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b08      	cmp	r3, #8
 8002224:	d111      	bne.n	800224a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d105      	bne.n	800224a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	f043 0201 	orr.w	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1f      	ldr	r2, [pc, #124]	; (80022cc <HAL_ADC_PollForConversion+0x1dc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d002      	beq.n	800225a <HAL_ADC_PollForConversion+0x16a>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	e000      	b.n	800225c <HAL_ADC_PollForConversion+0x16c>
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_ADC_PollForConversion+0x1d8>)
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	4293      	cmp	r3, r2
 8002262:	d008      	beq.n	8002276 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b05      	cmp	r3, #5
 800226e:	d002      	beq.n	8002276 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b09      	cmp	r3, #9
 8002274:	d104      	bne.n	8002280 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	e00c      	b.n	800229a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a11      	ldr	r2, [pc, #68]	; (80022cc <HAL_ADC_PollForConversion+0x1dc>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d002      	beq.n	8002290 <HAL_ADC_PollForConversion+0x1a0>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	e000      	b.n	8002292 <HAL_ADC_PollForConversion+0x1a2>
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_ADC_PollForConversion+0x1d8>)
 8002292:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	2b08      	cmp	r3, #8
 800229e:	d104      	bne.n	80022aa <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2208      	movs	r2, #8
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	e008      	b.n	80022bc <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d103      	bne.n	80022bc <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	220c      	movs	r2, #12
 80022ba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40022000 	.word	0x40022000
 80022cc:	40022100 	.word	0x40022100
 80022d0:	40022300 	.word	0x40022300
 80022d4:	58026300 	.word	0x58026300

080022d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b0a1      	sub	sp, #132	; 0x84
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a9d      	ldr	r2, [pc, #628]	; (8002584 <HAL_ADC_ConfigChannel+0x290>)
 800230e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_ADC_ConfigChannel+0x2a>
 800231a:	2302      	movs	r3, #2
 800231c:	e321      	b.n	8002962 <HAL_ADC_ConfigChannel+0x66e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fc4e 	bl	8001bcc <LL_ADC_REG_IsConversionOngoing>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	f040 8306 	bne.w	8002944 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002340:	2b00      	cmp	r3, #0
 8002342:	d108      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x62>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	0e9b      	lsrs	r3, r3, #26
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2201      	movs	r2, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	e016      	b.n	8002384 <HAL_ADC_ConfigChannel+0x90>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002366:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002368:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800236e:	2320      	movs	r3, #32
 8002370:	e003      	b.n	800237a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002372:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002374:	fab3 f383 	clz	r3, r3
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	2201      	movs	r2, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	69d1      	ldr	r1, [r2, #28]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	430b      	orrs	r3, r1
 8002390:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	f7ff faf3 	bl	800198a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fc0f 	bl	8001bcc <LL_ADC_REG_IsConversionOngoing>
 80023ae:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fc1c 	bl	8001bf2 <LL_ADC_INJ_IsConversionOngoing>
 80023ba:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 80b3 	bne.w	800252a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f040 80af 	bne.w	800252a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6819      	ldr	r1, [r3, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	461a      	mov	r2, r3
 80023da:	f7ff fb02 	bl	80019e2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023de:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <HAL_ADC_ConfigChannel+0x294>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80023e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ea:	d10b      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x110>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	089b      	lsrs	r3, r3, #2
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	e01d      	b.n	8002440 <HAL_ADC_ConfigChannel+0x14c>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10b      	bne.n	800242a <HAL_ADC_ConfigChannel+0x136>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	e00a      	b.n	8002440 <HAL_ADC_ConfigChannel+0x14c>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b04      	cmp	r3, #4
 8002448:	d027      	beq.n	800249a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6919      	ldr	r1, [r3, #16]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002458:	f7ff fa30 	bl	80018bc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	6919      	ldr	r1, [r3, #16]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	7e5b      	ldrb	r3, [r3, #25]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d102      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x17e>
 800246c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002470:	e000      	b.n	8002474 <HAL_ADC_ConfigChannel+0x180>
 8002472:	2300      	movs	r3, #0
 8002474:	461a      	mov	r2, r3
 8002476:	f7ff fa5a 	bl	800192e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6919      	ldr	r1, [r3, #16]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	7e1b      	ldrb	r3, [r3, #24]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d102      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x19c>
 800248a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800248e:	e000      	b.n	8002492 <HAL_ADC_ConfigChannel+0x19e>
 8002490:	2300      	movs	r3, #0
 8002492:	461a      	mov	r2, r3
 8002494:	f7ff fa32 	bl	80018fc <LL_ADC_SetDataRightShift>
 8002498:	e047      	b.n	800252a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	069b      	lsls	r3, r3, #26
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d107      	bne.n	80024be <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024bc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	069b      	lsls	r3, r3, #26
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d107      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024e0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	069b      	lsls	r3, r3, #26
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d107      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002504:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800250c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	069b      	lsls	r3, r3, #26
 8002516:	429a      	cmp	r2, r3
 8002518:	d107      	bne.n	800252a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002528:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fb24 	bl	8001b7c <LL_ADC_IsEnabled>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	f040 820d 	bne.w	8002956 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	461a      	mov	r2, r3
 800254a:	f7ff fa75 	bl	8001a38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	4a0c      	ldr	r2, [pc, #48]	; (8002584 <HAL_ADC_ConfigChannel+0x290>)
 8002554:	4293      	cmp	r3, r2
 8002556:	f040 8133 	bne.w	80027c0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002566:	2b00      	cmp	r3, #0
 8002568:	d110      	bne.n	800258c <HAL_ADC_ConfigChannel+0x298>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	0e9b      	lsrs	r3, r3, #26
 8002570:	3301      	adds	r3, #1
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	2b09      	cmp	r3, #9
 8002578:	bf94      	ite	ls
 800257a:	2301      	movls	r3, #1
 800257c:	2300      	movhi	r3, #0
 800257e:	b2db      	uxtb	r3, r3
 8002580:	e01e      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x2cc>
 8002582:	bf00      	nop
 8002584:	47ff0000 	.word	0x47ff0000
 8002588:	5c001000 	.word	0x5c001000
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800259a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800259e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80025a4:	2320      	movs	r3, #32
 80025a6:	e003      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80025a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	3301      	adds	r3, #1
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	2b09      	cmp	r3, #9
 80025b8:	bf94      	ite	ls
 80025ba:	2301      	movls	r3, #1
 80025bc:	2300      	movhi	r3, #0
 80025be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d079      	beq.n	80026b8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d107      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x2ec>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	3301      	adds	r3, #1
 80025d8:	069b      	lsls	r3, r3, #26
 80025da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025de:	e015      	b.n	800260c <HAL_ADC_ConfigChannel+0x318>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80025ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80025f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80025f8:	2320      	movs	r3, #32
 80025fa:	e003      	b.n	8002604 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80025fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	3301      	adds	r3, #1
 8002606:	069b      	lsls	r3, r3, #26
 8002608:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_ADC_ConfigChannel+0x338>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	3301      	adds	r3, #1
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	2101      	movs	r1, #1
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	e017      	b.n	800265c <HAL_ADC_ConfigChannel+0x368>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800263a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800263e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002644:	2320      	movs	r3, #32
 8002646:	e003      	b.n	8002650 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	ea42 0103 	orr.w	r1, r2, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x38e>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	3301      	adds	r3, #1
 8002674:	f003 021f 	and.w	r2, r3, #31
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	051b      	lsls	r3, r3, #20
 8002680:	e018      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x3c0>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002692:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800269a:	2320      	movs	r3, #32
 800269c:	e003      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	3301      	adds	r3, #1
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b4:	430b      	orrs	r3, r1
 80026b6:	e07e      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d107      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x3e0>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	3301      	adds	r3, #1
 80026cc:	069b      	lsls	r3, r3, #26
 80026ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026d2:	e015      	b.n	8002700 <HAL_ADC_ConfigChannel+0x40c>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80026ec:	2320      	movs	r3, #32
 80026ee:	e003      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80026f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	069b      	lsls	r3, r3, #26
 80026fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002708:	2b00      	cmp	r3, #0
 800270a:	d109      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x42c>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0e9b      	lsrs	r3, r3, #26
 8002712:	3301      	adds	r3, #1
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	2101      	movs	r1, #1
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	e017      	b.n	8002750 <HAL_ADC_ConfigChannel+0x45c>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	61bb      	str	r3, [r7, #24]
  return result;
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002738:	2320      	movs	r3, #32
 800273a:	e003      	b.n	8002744 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	3301      	adds	r3, #1
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2101      	movs	r1, #1
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	ea42 0103 	orr.w	r1, r2, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10d      	bne.n	800277c <HAL_ADC_ConfigChannel+0x488>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	0e9b      	lsrs	r3, r3, #26
 8002766:	3301      	adds	r3, #1
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	3b1e      	subs	r3, #30
 8002774:	051b      	lsls	r3, r3, #20
 8002776:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800277a:	e01b      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x4c0>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	60fb      	str	r3, [r7, #12]
  return result;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002794:	2320      	movs	r3, #32
 8002796:	e003      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	f003 021f 	and.w	r2, r3, #31
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	3b1e      	subs	r3, #30
 80027ae:	051b      	lsls	r3, r3, #20
 80027b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b4:	430b      	orrs	r3, r1
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	6892      	ldr	r2, [r2, #8]
 80027ba:	4619      	mov	r1, r3
 80027bc:	f7ff f911 	bl	80019e2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f280 80c6 	bge.w	8002956 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a67      	ldr	r2, [pc, #412]	; (800296c <HAL_ADC_ConfigChannel+0x678>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d004      	beq.n	80027de <HAL_ADC_ConfigChannel+0x4ea>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a65      	ldr	r2, [pc, #404]	; (8002970 <HAL_ADC_ConfigChannel+0x67c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d101      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x4ee>
 80027de:	4b65      	ldr	r3, [pc, #404]	; (8002974 <HAL_ADC_ConfigChannel+0x680>)
 80027e0:	e000      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x4f0>
 80027e2:	4b65      	ldr	r3, [pc, #404]	; (8002978 <HAL_ADC_ConfigChannel+0x684>)
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff f85b 	bl	80018a0 <LL_ADC_GetCommonPathInternalCh>
 80027ea:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a5e      	ldr	r2, [pc, #376]	; (800296c <HAL_ADC_ConfigChannel+0x678>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d004      	beq.n	8002800 <HAL_ADC_ConfigChannel+0x50c>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a5d      	ldr	r2, [pc, #372]	; (8002970 <HAL_ADC_ConfigChannel+0x67c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d10e      	bne.n	800281e <HAL_ADC_ConfigChannel+0x52a>
 8002800:	485a      	ldr	r0, [pc, #360]	; (800296c <HAL_ADC_ConfigChannel+0x678>)
 8002802:	f7ff f9bb 	bl	8001b7c <LL_ADC_IsEnabled>
 8002806:	4604      	mov	r4, r0
 8002808:	4859      	ldr	r0, [pc, #356]	; (8002970 <HAL_ADC_ConfigChannel+0x67c>)
 800280a:	f7ff f9b7 	bl	8001b7c <LL_ADC_IsEnabled>
 800280e:	4603      	mov	r3, r0
 8002810:	4323      	orrs	r3, r4
 8002812:	2b00      	cmp	r3, #0
 8002814:	bf0c      	ite	eq
 8002816:	2301      	moveq	r3, #1
 8002818:	2300      	movne	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	e008      	b.n	8002830 <HAL_ADC_ConfigChannel+0x53c>
 800281e:	4857      	ldr	r0, [pc, #348]	; (800297c <HAL_ADC_ConfigChannel+0x688>)
 8002820:	f7ff f9ac 	bl	8001b7c <LL_ADC_IsEnabled>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	bf0c      	ite	eq
 800282a:	2301      	moveq	r3, #1
 800282c:	2300      	movne	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d07d      	beq.n	8002930 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a51      	ldr	r2, [pc, #324]	; (8002980 <HAL_ADC_ConfigChannel+0x68c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d130      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x5ac>
 800283e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002840:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d12b      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a4b      	ldr	r2, [pc, #300]	; (800297c <HAL_ADC_ConfigChannel+0x688>)
 800284e:	4293      	cmp	r3, r2
 8002850:	f040 8081 	bne.w	8002956 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a44      	ldr	r2, [pc, #272]	; (800296c <HAL_ADC_ConfigChannel+0x678>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d004      	beq.n	8002868 <HAL_ADC_ConfigChannel+0x574>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a43      	ldr	r2, [pc, #268]	; (8002970 <HAL_ADC_ConfigChannel+0x67c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d101      	bne.n	800286c <HAL_ADC_ConfigChannel+0x578>
 8002868:	4a42      	ldr	r2, [pc, #264]	; (8002974 <HAL_ADC_ConfigChannel+0x680>)
 800286a:	e000      	b.n	800286e <HAL_ADC_ConfigChannel+0x57a>
 800286c:	4a42      	ldr	r2, [pc, #264]	; (8002978 <HAL_ADC_ConfigChannel+0x684>)
 800286e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002870:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002874:	4619      	mov	r1, r3
 8002876:	4610      	mov	r0, r2
 8002878:	f7fe ffff 	bl	800187a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800287c:	4b41      	ldr	r3, [pc, #260]	; (8002984 <HAL_ADC_ConfigChannel+0x690>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	4a41      	ldr	r2, [pc, #260]	; (8002988 <HAL_ADC_ConfigChannel+0x694>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	099b      	lsrs	r3, r3, #6
 800288a:	3301      	adds	r3, #1
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002890:	e002      	b.n	8002898 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	3b01      	subs	r3, #1
 8002896:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f9      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800289e:	e05a      	b.n	8002956 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a39      	ldr	r2, [pc, #228]	; (800298c <HAL_ADC_ConfigChannel+0x698>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d11e      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x5f4>
 80028aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d119      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a30      	ldr	r2, [pc, #192]	; (800297c <HAL_ADC_ConfigChannel+0x688>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d14b      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2a      	ldr	r2, [pc, #168]	; (800296c <HAL_ADC_ConfigChannel+0x678>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d004      	beq.n	80028d2 <HAL_ADC_ConfigChannel+0x5de>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a28      	ldr	r2, [pc, #160]	; (8002970 <HAL_ADC_ConfigChannel+0x67c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x5e2>
 80028d2:	4a28      	ldr	r2, [pc, #160]	; (8002974 <HAL_ADC_ConfigChannel+0x680>)
 80028d4:	e000      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x5e4>
 80028d6:	4a28      	ldr	r2, [pc, #160]	; (8002978 <HAL_ADC_ConfigChannel+0x684>)
 80028d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028de:	4619      	mov	r1, r3
 80028e0:	4610      	mov	r0, r2
 80028e2:	f7fe ffca 	bl	800187a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028e6:	e036      	b.n	8002956 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a28      	ldr	r2, [pc, #160]	; (8002990 <HAL_ADC_ConfigChannel+0x69c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d131      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x662>
 80028f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d12c      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1e      	ldr	r2, [pc, #120]	; (800297c <HAL_ADC_ConfigChannel+0x688>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d127      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a18      	ldr	r2, [pc, #96]	; (800296c <HAL_ADC_ConfigChannel+0x678>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d004      	beq.n	800291a <HAL_ADC_ConfigChannel+0x626>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a16      	ldr	r2, [pc, #88]	; (8002970 <HAL_ADC_ConfigChannel+0x67c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d101      	bne.n	800291e <HAL_ADC_ConfigChannel+0x62a>
 800291a:	4a16      	ldr	r2, [pc, #88]	; (8002974 <HAL_ADC_ConfigChannel+0x680>)
 800291c:	e000      	b.n	8002920 <HAL_ADC_ConfigChannel+0x62c>
 800291e:	4a16      	ldr	r2, [pc, #88]	; (8002978 <HAL_ADC_ConfigChannel+0x684>)
 8002920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002922:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002926:	4619      	mov	r1, r3
 8002928:	4610      	mov	r0, r2
 800292a:	f7fe ffa6 	bl	800187a <LL_ADC_SetCommonPathInternalCh>
 800292e:	e012      	b.n	8002956 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002942:	e008      	b.n	8002956 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002948:	f043 0220 	orr.w	r2, r3, #32
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800295e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002962:	4618      	mov	r0, r3
 8002964:	3784      	adds	r7, #132	; 0x84
 8002966:	46bd      	mov	sp, r7
 8002968:	bd90      	pop	{r4, r7, pc}
 800296a:	bf00      	nop
 800296c:	40022000 	.word	0x40022000
 8002970:	40022100 	.word	0x40022100
 8002974:	40022300 	.word	0x40022300
 8002978:	58026300 	.word	0x58026300
 800297c:	58026000 	.word	0x58026000
 8002980:	cb840000 	.word	0xcb840000
 8002984:	24000000 	.word	0x24000000
 8002988:	053e2d63 	.word	0x053e2d63
 800298c:	c7520000 	.word	0xc7520000
 8002990:	cfb80000 	.word	0xcfb80000

08002994 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff f8eb 	bl	8001b7c <LL_ADC_IsEnabled>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d16e      	bne.n	8002a8a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	4b38      	ldr	r3, [pc, #224]	; (8002a94 <ADC_Enable+0x100>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00d      	beq.n	80029d6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029be:	f043 0210 	orr.w	r2, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ca:	f043 0201 	orr.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e05a      	b.n	8002a8c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff f8ba 	bl	8001b54 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029e0:	f7fe fefc 	bl	80017dc <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a2b      	ldr	r2, [pc, #172]	; (8002a98 <ADC_Enable+0x104>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d004      	beq.n	80029fa <ADC_Enable+0x66>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a29      	ldr	r2, [pc, #164]	; (8002a9c <ADC_Enable+0x108>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <ADC_Enable+0x6a>
 80029fa:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <ADC_Enable+0x10c>)
 80029fc:	e000      	b.n	8002a00 <ADC_Enable+0x6c>
 80029fe:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <ADC_Enable+0x110>)
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff f83d 	bl	8001a80 <LL_ADC_GetMultimode>
 8002a06:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <ADC_Enable+0x108>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d002      	beq.n	8002a18 <ADC_Enable+0x84>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	e000      	b.n	8002a1a <ADC_Enable+0x86>
 8002a18:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <ADC_Enable+0x104>)
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d02c      	beq.n	8002a7c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d130      	bne.n	8002a8a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a28:	e028      	b.n	8002a7c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff f8a4 	bl	8001b7c <LL_ADC_IsEnabled>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d104      	bne.n	8002a44 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f888 	bl	8001b54 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a44:	f7fe feca 	bl	80017dc <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d914      	bls.n	8002a7c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d00d      	beq.n	8002a7c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	f043 0210 	orr.w	r2, r3, #16
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	f043 0201 	orr.w	r2, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e007      	b.n	8002a8c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d1cf      	bne.n	8002a2a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	8000003f 	.word	0x8000003f
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	40022100 	.word	0x40022100
 8002aa0:	40022300 	.word	0x40022300
 8002aa4:	58026300 	.word	0x58026300

08002aa8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a79      	ldr	r2, [pc, #484]	; (8002c9c <ADC_ConfigureBoostMode+0x1f4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d004      	beq.n	8002ac4 <ADC_ConfigureBoostMode+0x1c>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a78      	ldr	r2, [pc, #480]	; (8002ca0 <ADC_ConfigureBoostMode+0x1f8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d109      	bne.n	8002ad8 <ADC_ConfigureBoostMode+0x30>
 8002ac4:	4b77      	ldr	r3, [pc, #476]	; (8002ca4 <ADC_ConfigureBoostMode+0x1fc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf14      	ite	ne
 8002ad0:	2301      	movne	r3, #1
 8002ad2:	2300      	moveq	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	e008      	b.n	8002aea <ADC_ConfigureBoostMode+0x42>
 8002ad8:	4b73      	ldr	r3, [pc, #460]	; (8002ca8 <ADC_ConfigureBoostMode+0x200>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf14      	ite	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	2300      	moveq	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d01c      	beq.n	8002b28 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002aee:	f002 fb43 	bl	8005178 <HAL_RCC_GetHCLKFreq>
 8002af2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002afc:	d010      	beq.n	8002b20 <ADC_ConfigureBoostMode+0x78>
 8002afe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b02:	d871      	bhi.n	8002be8 <ADC_ConfigureBoostMode+0x140>
 8002b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b08:	d002      	beq.n	8002b10 <ADC_ConfigureBoostMode+0x68>
 8002b0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b0e:	d16b      	bne.n	8002be8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	0c1b      	lsrs	r3, r3, #16
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	60fb      	str	r3, [r7, #12]
        break;
 8002b1e:	e066      	b.n	8002bee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	089b      	lsrs	r3, r3, #2
 8002b24:	60fb      	str	r3, [r7, #12]
        break;
 8002b26:	e062      	b.n	8002bee <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b2c:	f003 fac6 	bl	80060bc <HAL_RCCEx_GetPeriphCLKFreq>
 8002b30:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b3a:	d051      	beq.n	8002be0 <ADC_ConfigureBoostMode+0x138>
 8002b3c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b40:	d854      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x144>
 8002b42:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b46:	d047      	beq.n	8002bd8 <ADC_ConfigureBoostMode+0x130>
 8002b48:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b4c:	d84e      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x144>
 8002b4e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b52:	d03d      	beq.n	8002bd0 <ADC_ConfigureBoostMode+0x128>
 8002b54:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b58:	d848      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x144>
 8002b5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b5e:	d033      	beq.n	8002bc8 <ADC_ConfigureBoostMode+0x120>
 8002b60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b64:	d842      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x144>
 8002b66:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b6a:	d029      	beq.n	8002bc0 <ADC_ConfigureBoostMode+0x118>
 8002b6c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b70:	d83c      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x144>
 8002b72:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b76:	d01a      	beq.n	8002bae <ADC_ConfigureBoostMode+0x106>
 8002b78:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b7c:	d836      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x144>
 8002b7e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b82:	d014      	beq.n	8002bae <ADC_ConfigureBoostMode+0x106>
 8002b84:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b88:	d830      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x144>
 8002b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b8e:	d00e      	beq.n	8002bae <ADC_ConfigureBoostMode+0x106>
 8002b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b94:	d82a      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x144>
 8002b96:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b9a:	d008      	beq.n	8002bae <ADC_ConfigureBoostMode+0x106>
 8002b9c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ba0:	d824      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x144>
 8002ba2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ba6:	d002      	beq.n	8002bae <ADC_ConfigureBoostMode+0x106>
 8002ba8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bac:	d11e      	bne.n	8002bec <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	0c9b      	lsrs	r3, r3, #18
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	60fb      	str	r3, [r7, #12]
        break;
 8002bbe:	e016      	b.n	8002bee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	60fb      	str	r3, [r7, #12]
        break;
 8002bc6:	e012      	b.n	8002bee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	60fb      	str	r3, [r7, #12]
        break;
 8002bce:	e00e      	b.n	8002bee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	099b      	lsrs	r3, r3, #6
 8002bd4:	60fb      	str	r3, [r7, #12]
        break;
 8002bd6:	e00a      	b.n	8002bee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	09db      	lsrs	r3, r3, #7
 8002bdc:	60fb      	str	r3, [r7, #12]
        break;
 8002bde:	e006      	b.n	8002bee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	60fb      	str	r3, [r7, #12]
        break;
 8002be6:	e002      	b.n	8002bee <ADC_ConfigureBoostMode+0x146>
        break;
 8002be8:	bf00      	nop
 8002bea:	e000      	b.n	8002bee <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002bec:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002bee:	f7fe fe25 	bl	800183c <HAL_GetREVID>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d815      	bhi.n	8002c28 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a2b      	ldr	r2, [pc, #172]	; (8002cac <ADC_ConfigureBoostMode+0x204>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d908      	bls.n	8002c16 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c12:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c14:	e03e      	b.n	8002c94 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c24:	609a      	str	r2, [r3, #8]
}
 8002c26:	e035      	b.n	8002c94 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	085b      	lsrs	r3, r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4a1f      	ldr	r2, [pc, #124]	; (8002cb0 <ADC_ConfigureBoostMode+0x208>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d808      	bhi.n	8002c48 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c44:	609a      	str	r2, [r3, #8]
}
 8002c46:	e025      	b.n	8002c94 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4a1a      	ldr	r2, [pc, #104]	; (8002cb4 <ADC_ConfigureBoostMode+0x20c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d80a      	bhi.n	8002c66 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c62:	609a      	str	r2, [r3, #8]
}
 8002c64:	e016      	b.n	8002c94 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <ADC_ConfigureBoostMode+0x210>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d80a      	bhi.n	8002c84 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c80:	609a      	str	r2, [r3, #8]
}
 8002c82:	e007      	b.n	8002c94 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002c92:	609a      	str	r2, [r3, #8]
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40022000 	.word	0x40022000
 8002ca0:	40022100 	.word	0x40022100
 8002ca4:	40022300 	.word	0x40022300
 8002ca8:	58026300 	.word	0x58026300
 8002cac:	01312d00 	.word	0x01312d00
 8002cb0:	005f5e10 	.word	0x005f5e10
 8002cb4:	00bebc20 	.word	0x00bebc20
 8002cb8:	017d7840 	.word	0x017d7840

08002cbc <LL_ADC_IsEnabled>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <LL_ADC_IsEnabled+0x18>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <LL_ADC_IsEnabled+0x1a>
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d101      	bne.n	8002cfa <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b09f      	sub	sp, #124	; 0x7c
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e0be      	b.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a5c      	ldr	r2, [pc, #368]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d102      	bne.n	8002d46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d40:	4b5b      	ldr	r3, [pc, #364]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	e001      	b.n	8002d4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d46:	2300      	movs	r3, #0
 8002d48:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10b      	bne.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d54:	f043 0220 	orr.w	r2, r3, #32
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e09d      	b.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff ffb9 	bl	8002ce2 <LL_ADC_REG_IsConversionOngoing>
 8002d70:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ffb3 	bl	8002ce2 <LL_ADC_REG_IsConversionOngoing>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d17f      	bne.n	8002e82 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d17c      	bne.n	8002e82 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a47      	ldr	r2, [pc, #284]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d004      	beq.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a46      	ldr	r2, [pc, #280]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002d9c:	4b45      	ldr	r3, [pc, #276]	; (8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002d9e:	e000      	b.n	8002da2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002da0:	4b45      	ldr	r3, [pc, #276]	; (8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002da2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d039      	beq.n	8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	431a      	orrs	r2, r3
 8002dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a3a      	ldr	r2, [pc, #232]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d004      	beq.n	8002dd2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a38      	ldr	r2, [pc, #224]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d10e      	bne.n	8002df0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002dd2:	4836      	ldr	r0, [pc, #216]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002dd4:	f7ff ff72 	bl	8002cbc <LL_ADC_IsEnabled>
 8002dd8:	4604      	mov	r4, r0
 8002dda:	4835      	ldr	r0, [pc, #212]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ddc:	f7ff ff6e 	bl	8002cbc <LL_ADC_IsEnabled>
 8002de0:	4603      	mov	r3, r0
 8002de2:	4323      	orrs	r3, r4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	e008      	b.n	8002e02 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002df0:	4832      	ldr	r0, [pc, #200]	; (8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002df2:	f7ff ff63 	bl	8002cbc <LL_ADC_IsEnabled>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d047      	beq.n	8002e96 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	6811      	ldr	r1, [r2, #0]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	6892      	ldr	r2, [r2, #8]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e1e:	e03a      	b.n	8002e96 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d004      	beq.n	8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d10e      	bne.n	8002e5e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002e40:	481a      	ldr	r0, [pc, #104]	; (8002eac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e42:	f7ff ff3b 	bl	8002cbc <LL_ADC_IsEnabled>
 8002e46:	4604      	mov	r4, r0
 8002e48:	4819      	ldr	r0, [pc, #100]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e4a:	f7ff ff37 	bl	8002cbc <LL_ADC_IsEnabled>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4323      	orrs	r3, r4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	bf0c      	ite	eq
 8002e56:	2301      	moveq	r3, #1
 8002e58:	2300      	movne	r3, #0
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	e008      	b.n	8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002e5e:	4817      	ldr	r0, [pc, #92]	; (8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002e60:	f7ff ff2c 	bl	8002cbc <LL_ADC_IsEnabled>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bf0c      	ite	eq
 8002e6a:	2301      	moveq	r3, #1
 8002e6c:	2300      	movne	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d010      	beq.n	8002e96 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e7e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e80:	e009      	b.n	8002e96 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	f043 0220 	orr.w	r2, r3, #32
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002e94:	e000      	b.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e96:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ea0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	377c      	adds	r7, #124	; 0x7c
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd90      	pop	{r4, r7, pc}
 8002eac:	40022000 	.word	0x40022000
 8002eb0:	40022100 	.word	0x40022100
 8002eb4:	40022300 	.word	0x40022300
 8002eb8:	58026300 	.word	0x58026300
 8002ebc:	58026000 	.word	0x58026000
 8002ec0:	fffff0e0 	.word	0xfffff0e0

08002ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <__NVIC_SetPriorityGrouping+0x40>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef2:	4a04      	ldr	r2, [pc, #16]	; (8002f04 <__NVIC_SetPriorityGrouping+0x40>)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	60d3      	str	r3, [r2, #12]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00
 8002f08:	05fa0000 	.word	0x05fa0000

08002f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <__NVIC_GetPriorityGrouping+0x18>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	f003 0307 	and.w	r3, r3, #7
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	db0a      	blt.n	8002f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	490c      	ldr	r1, [pc, #48]	; (8002f74 <__NVIC_SetPriority+0x4c>)
 8002f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f50:	e00a      	b.n	8002f68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	4908      	ldr	r1, [pc, #32]	; (8002f78 <__NVIC_SetPriority+0x50>)
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	3b04      	subs	r3, #4
 8002f60:	0112      	lsls	r2, r2, #4
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	440b      	add	r3, r1
 8002f66:	761a      	strb	r2, [r3, #24]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000e100 	.word	0xe000e100
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f1c3 0307 	rsb	r3, r3, #7
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	bf28      	it	cs
 8002f9a:	2304      	movcs	r3, #4
 8002f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	2b06      	cmp	r3, #6
 8002fa4:	d902      	bls.n	8002fac <NVIC_EncodePriority+0x30>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3b03      	subs	r3, #3
 8002faa:	e000      	b.n	8002fae <NVIC_EncodePriority+0x32>
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	43d9      	mvns	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	4313      	orrs	r3, r2
         );
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3724      	adds	r7, #36	; 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff4:	d301      	bcc.n	8002ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e00f      	b.n	800301a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <SysTick_Config+0x40>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003002:	210f      	movs	r1, #15
 8003004:	f04f 30ff 	mov.w	r0, #4294967295
 8003008:	f7ff ff8e 	bl	8002f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <SysTick_Config+0x40>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003012:	4b04      	ldr	r3, [pc, #16]	; (8003024 <SysTick_Config+0x40>)
 8003014:	2207      	movs	r2, #7
 8003016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	e000e010 	.word	0xe000e010

08003028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff47 	bl	8002ec4 <__NVIC_SetPriorityGrouping>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b086      	sub	sp, #24
 8003042:	af00      	add	r7, sp, #0
 8003044:	4603      	mov	r3, r0
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800304c:	f7ff ff5e 	bl	8002f0c <__NVIC_GetPriorityGrouping>
 8003050:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	6978      	ldr	r0, [r7, #20]
 8003058:	f7ff ff90 	bl	8002f7c <NVIC_EncodePriority>
 800305c:	4602      	mov	r2, r0
 800305e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff5f 	bl	8002f28 <__NVIC_SetPriority>
}
 800306a:	bf00      	nop
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ffb2 	bl	8002fe4 <SysTick_Config>
 8003080:	4603      	mov	r3, r0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b098      	sub	sp, #96	; 0x60
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003094:	4a84      	ldr	r2, [pc, #528]	; (80032a8 <HAL_FDCAN_Init+0x21c>)
 8003096:	f107 030c 	add.w	r3, r7, #12
 800309a:	4611      	mov	r1, r2
 800309c:	224c      	movs	r2, #76	; 0x4c
 800309e:	4618      	mov	r0, r3
 80030a0:	f006 fa20 	bl	80094e4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e1c6      	b.n	800343c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a7e      	ldr	r2, [pc, #504]	; (80032ac <HAL_FDCAN_Init+0x220>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d106      	bne.n	80030c6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80030c0:	461a      	mov	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fe f8d8 	bl	8001290 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0210 	bic.w	r2, r2, #16
 80030ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030f0:	f7fe fb74 	bl	80017dc <HAL_GetTick>
 80030f4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80030f6:	e014      	b.n	8003122 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80030f8:	f7fe fb70 	bl	80017dc <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b0a      	cmp	r3, #10
 8003104:	d90d      	bls.n	8003122 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800310c:	f043 0201 	orr.w	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2203      	movs	r2, #3
 800311a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e18c      	b.n	800343c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b08      	cmp	r3, #8
 800312e:	d0e3      	beq.n	80030f8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003140:	f7fe fb4c 	bl	80017dc <HAL_GetTick>
 8003144:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003146:	e014      	b.n	8003172 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003148:	f7fe fb48 	bl	80017dc <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b0a      	cmp	r3, #10
 8003154:	d90d      	bls.n	8003172 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800315c:	f043 0201 	orr.w	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2203      	movs	r2, #3
 800316a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e164      	b.n	800343c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0e3      	beq.n	8003148 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0202 	orr.w	r2, r2, #2
 800318e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	7c1b      	ldrb	r3, [r3, #16]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d108      	bne.n	80031aa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031a6:	619a      	str	r2, [r3, #24]
 80031a8:	e007      	b.n	80031ba <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699a      	ldr	r2, [r3, #24]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031b8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	7c5b      	ldrb	r3, [r3, #17]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d108      	bne.n	80031d4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699a      	ldr	r2, [r3, #24]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031d0:	619a      	str	r2, [r3, #24]
 80031d2:	e007      	b.n	80031e4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031e2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	7c9b      	ldrb	r3, [r3, #18]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d108      	bne.n	80031fe <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031fa:	619a      	str	r2, [r3, #24]
 80031fc:	e007      	b.n	800320e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699a      	ldr	r2, [r3, #24]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800320c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003232:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0210 	bic.w	r2, r2, #16
 8003242:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d108      	bne.n	800325e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0204 	orr.w	r2, r2, #4
 800325a:	619a      	str	r2, [r3, #24]
 800325c:	e030      	b.n	80032c0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d02c      	beq.n	80032c0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d020      	beq.n	80032b0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699a      	ldr	r2, [r3, #24]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800327c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0210 	orr.w	r2, r2, #16
 800328c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d114      	bne.n	80032c0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699a      	ldr	r2, [r3, #24]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0220 	orr.w	r2, r2, #32
 80032a4:	619a      	str	r2, [r3, #24]
 80032a6:	e00b      	b.n	80032c0 <HAL_FDCAN_Init+0x234>
 80032a8:	0800bfe8 	.word	0x0800bfe8
 80032ac:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0220 	orr.w	r2, r2, #32
 80032be:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032d0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80032d8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80032e8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032ea:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032f4:	d115      	bne.n	8003322 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	3b01      	subs	r3, #1
 8003302:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003304:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	3b01      	subs	r3, #1
 800330c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800330e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	3b01      	subs	r3, #1
 8003318:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800331e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003320:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003348:	4413      	add	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d011      	beq.n	8003372 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003356:	f023 0107 	bic.w	r1, r3, #7
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	3360      	adds	r3, #96	; 0x60
 8003362:	443b      	add	r3, r7
 8003364:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d011      	beq.n	800339e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003382:	f023 0107 	bic.w	r1, r3, #7
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	3360      	adds	r3, #96	; 0x60
 800338e:	443b      	add	r3, r7
 8003390:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d012      	beq.n	80033cc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80033ae:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	3360      	adds	r3, #96	; 0x60
 80033ba:	443b      	add	r3, r7
 80033bc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80033c0:	011a      	lsls	r2, r3, #4
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d012      	beq.n	80033fa <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80033dc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	3360      	adds	r3, #96	; 0x60
 80033e8:	443b      	add	r3, r7
 80033ea:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80033ee:	021a      	lsls	r2, r3, #8
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a11      	ldr	r2, [pc, #68]	; (8003444 <HAL_FDCAN_Init+0x3b8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d107      	bne.n	8003414 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f022 0203 	bic.w	r2, r2, #3
 8003412:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 faef 	bl	8003a10 <FDCAN_CalcultateRamBlockAddresses>
 8003432:	4603      	mov	r3, r0
 8003434:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003438:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800343c:	4618      	mov	r0, r3
 800343e:	3760      	adds	r7, #96	; 0x60
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	4000a000 	.word	0x4000a000

08003448 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003458:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d002      	beq.n	8003466 <HAL_FDCAN_ConfigFilter+0x1e>
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d157      	bne.n	8003516 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d12b      	bne.n	80034c6 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b07      	cmp	r3, #7
 8003474:	d10d      	bne.n	8003492 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003482:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003488:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800348a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	e00e      	b.n	80034b0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800349e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80034a6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	e025      	b.n	8003512 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	075a      	lsls	r2, r3, #29
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	2b07      	cmp	r3, #7
 80034da:	d103      	bne.n	80034e4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	e006      	b.n	80034f2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	079a      	lsls	r2, r3, #30
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4413      	add	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	3304      	adds	r3, #4
 800350a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	e008      	b.n	8003528 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800351c:	f043 0202 	orr.w	r2, r3, #2
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
  }
}
 8003528:	4618      	mov	r0, r3
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	d111      	bne.n	800356c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	e008      	b.n	800357e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003572:	f043 0204 	orr.w	r2, r3, #4
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
  }
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b086      	sub	sp, #24
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d141      	bne.n	8003626 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80035aa:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035b8:	f043 0220 	orr.w	r2, r3, #32
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e038      	b.n	8003638 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80035ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d009      	beq.n	80035ea <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e026      	b.n	8003638 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80035f2:	0c1b      	lsrs	r3, r3, #16
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fb8b 	bl	8003d1c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2101      	movs	r1, #1
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	fa01 f202 	lsl.w	r2, r1, r2
 8003612:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003616:	2201      	movs	r2, #1
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	409a      	lsls	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	e008      	b.n	8003638 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800362c:	f043 0208 	orr.w	r2, r3, #8
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
  }
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003640:	b480      	push	{r7}
 8003642:	b08b      	sub	sp, #44	; 0x2c
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003658:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800365a:	7efb      	ldrb	r3, [r7, #27]
 800365c:	2b02      	cmp	r3, #2
 800365e:	f040 814b 	bne.w	80038f8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d14d      	bne.n	8003704 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003670:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d109      	bne.n	800368c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800367e:	f043 0220 	orr.w	r2, r3, #32
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e13e      	b.n	800390a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e12c      	b.n	800390a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036b8:	0e1b      	lsrs	r3, r3, #24
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d10b      	bne.n	80036da <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036ca:	0fdb      	lsrs	r3, r3, #31
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036d4:	d101      	bne.n	80036da <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80036d6:	2301      	movs	r3, #1
 80036d8:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036e2:	0a1b      	lsrs	r3, r3, #8
 80036e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	4413      	add	r3, r2
 80036ec:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	69f9      	ldr	r1, [r7, #28]
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
 8003702:	e069      	b.n	80037d8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b41      	cmp	r3, #65	; 0x41
 8003708:	d14d      	bne.n	80037a6 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003712:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003720:	f043 0220 	orr.w	r2, r3, #32
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e0ed      	b.n	800390a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003744:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e0db      	b.n	800390a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800375a:	0e1b      	lsrs	r3, r3, #24
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b01      	cmp	r3, #1
 8003762:	d10b      	bne.n	800377c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800376c:	0fdb      	lsrs	r3, r3, #31
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003776:	d101      	bne.n	800377c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003778:	2301      	movs	r3, #1
 800377a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003784:	0a1b      	lsrs	r3, r3, #8
 8003786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800378a:	69fa      	ldr	r2, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003798:	69f9      	ldr	r1, [r7, #28]
 800379a:	fb01 f303 	mul.w	r3, r1, r3
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
 80037a4:	e018      	b.n	80037d8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d309      	bcc.n	80037c4 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037b6:	f043 0220 	orr.w	r2, r3, #32
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0a2      	b.n	800390a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	fb01 f303 	mul.w	r3, r1, r3
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d107      	bne.n	80037fc <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	0c9b      	lsrs	r3, r3, #18
 80037f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e005      	b.n	8003808 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	3304      	adds	r3, #4
 8003824:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	b29a      	uxth	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	0e1b      	lsrs	r3, r3, #24
 800385a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	0fda      	lsrs	r2, r3, #31
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	3304      	adds	r3, #4
 8003870:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003876:	2300      	movs	r3, #0
 8003878:	623b      	str	r3, [r7, #32]
 800387a:	e00a      	b.n	8003892 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	441a      	add	r2, r3
 8003882:	6839      	ldr	r1, [r7, #0]
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	440b      	add	r3, r1
 8003888:	7812      	ldrb	r2, [r2, #0]
 800388a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	3301      	adds	r3, #1
 8003890:	623b      	str	r3, [r7, #32]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	0c1b      	lsrs	r3, r3, #16
 8003898:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800389a:	5cd3      	ldrb	r3, [r2, r3]
 800389c:	461a      	mov	r2, r3
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d3eb      	bcc.n	800387c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d105      	bne.n	80038b6 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80038b4:	e01e      	b.n	80038f4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b41      	cmp	r3, #65	; 0x41
 80038ba:	d105      	bne.n	80038c8 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80038c6:	e015      	b.n	80038f4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b1f      	cmp	r3, #31
 80038cc:	d808      	bhi.n	80038e0 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2101      	movs	r1, #1
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	fa01 f202 	lsl.w	r2, r1, r2
 80038da:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80038de:	e009      	b.n	80038f4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f003 021f 	and.w	r2, r3, #31
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f202 	lsl.w	r2, r1, r2
 80038f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e008      	b.n	800390a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038fe:	f043 0208 	orr.w	r2, r3, #8
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
  }
}
 800390a:	4618      	mov	r0, r3
 800390c:	372c      	adds	r7, #44	; 0x2c
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	0800c044 	.word	0x0800c044

0800391c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800392e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003930:	7dfb      	ldrb	r3, [r7, #23]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d002      	beq.n	800393c <HAL_FDCAN_ActivateNotification+0x20>
 8003936:	7dfb      	ldrb	r3, [r7, #23]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d155      	bne.n	80039e8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d108      	bne.n	800395c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0201 	orr.w	r2, r2, #1
 8003958:	65da      	str	r2, [r3, #92]	; 0x5c
 800395a:	e014      	b.n	8003986 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	4013      	ands	r3, r2
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	429a      	cmp	r2, r3
 800396a:	d108      	bne.n	800397e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0202 	orr.w	r2, r2, #2
 800397a:	65da      	str	r2, [r3, #92]	; 0x5c
 800397c:	e003      	b.n	8003986 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2203      	movs	r2, #3
 8003984:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800398c:	2b00      	cmp	r3, #0
 800398e:	d009      	beq.n	80039a4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	430a      	orrs	r2, r1
 80039a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	430a      	orrs	r2, r1
 80039be:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <HAL_FDCAN_ActivateNotification+0xec>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	430b      	orrs	r3, r1
 80039d4:	6553      	str	r3, [r2, #84]	; 0x54
 80039d6:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <HAL_FDCAN_ActivateNotification+0xf0>)
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	0f9b      	lsrs	r3, r3, #30
 80039de:	490b      	ldr	r1, [pc, #44]	; (8003a0c <HAL_FDCAN_ActivateNotification+0xf0>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	e008      	b.n	80039fa <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039ee:	f043 0202 	orr.w	r2, r3, #2
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
  }
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	3fcfffff 	.word	0x3fcfffff
 8003a0c:	4000a800 	.word	0x4000a800

08003a10 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003a26:	4ba7      	ldr	r3, [pc, #668]	; (8003cc4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	0091      	lsls	r1, r2, #2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	430b      	orrs	r3, r1
 8003a34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a40:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	041a      	lsls	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a66:	4b97      	ldr	r3, [pc, #604]	; (8003cc4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	0091      	lsls	r1, r2, #2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	430b      	orrs	r3, r1
 8003a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a80:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	041a      	lsls	r2, r3, #16
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003aa8:	4b86      	ldr	r3, [pc, #536]	; (8003cc4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	0091      	lsls	r1, r2, #2
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ac2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	041a      	lsls	r2, r3, #16
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ade:	fb02 f303 	mul.w	r3, r2, r3
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003af0:	4b74      	ldr	r3, [pc, #464]	; (8003cc4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	0091      	lsls	r1, r2, #2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	430b      	orrs	r3, r1
 8003afe:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b0a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b12:	041a      	lsls	r2, r3, #16
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003b38:	4b62      	ldr	r3, [pc, #392]	; (8003cc4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	0091      	lsls	r1, r2, #2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	430b      	orrs	r3, r1
 8003b46:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003b52:	fb02 f303 	mul.w	r3, r2, r3
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	4413      	add	r3, r2
 8003b5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003b64:	4b57      	ldr	r3, [pc, #348]	; (8003cc4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	0091      	lsls	r1, r2, #2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	430b      	orrs	r3, r1
 8003b72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b7e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b86:	041a      	lsls	r2, r3, #16
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003ba6:	4b47      	ldr	r3, [pc, #284]	; (8003cc4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	0091      	lsls	r1, r2, #2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003bc0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	041a      	lsls	r2, r3, #16
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003bdc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be4:	061a      	lsls	r2, r3, #24
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf4:	4b34      	ldr	r3, [pc, #208]	; (8003cc8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009a      	lsls	r2, r3, #2
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	441a      	add	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	441a      	add	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003c2a:	fb01 f303 	mul.w	r3, r1, r3
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	441a      	add	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	441a      	add	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003c5a:	fb01 f303 	mul.w	r3, r1, r3
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	441a      	add	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	441a      	add	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	441a      	add	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003ca6:	fb01 f303 	mul.w	r3, r1, r3
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	441a      	add	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cba:	4a04      	ldr	r2, [pc, #16]	; (8003ccc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d915      	bls.n	8003cec <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003cc0:	e006      	b.n	8003cd0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003cc2:	bf00      	nop
 8003cc4:	ffff0003 	.word	0xffff0003
 8003cc8:	10002b00 	.word	0x10002b00
 8003ccc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cd6:	f043 0220 	orr.w	r2, r3, #32
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e010      	b.n	8003d0e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	e005      	b.n	8003d00 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d3f3      	bcc.n	8003cf4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop

08003d1c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b089      	sub	sp, #36	; 0x24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003d3a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61fb      	str	r3, [r7, #28]
 8003d46:	e00a      	b.n	8003d5e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003d50:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003d56:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003d58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d5c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003d68:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003d6e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003d74:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d88:	6839      	ldr	r1, [r7, #0]
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	3304      	adds	r3, #4
 8003daa:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	e020      	b.n	8003df4 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	3303      	adds	r3, #3
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	4413      	add	r3, r2
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	440b      	add	r3, r1
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003dca:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	440b      	add	r3, r1
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003dd8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	440a      	add	r2, r1
 8003de0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003de2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	3304      	adds	r3, #4
 8003dec:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	3304      	adds	r3, #4
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	0c1b      	lsrs	r3, r3, #16
 8003dfa:	4a06      	ldr	r2, [pc, #24]	; (8003e14 <FDCAN_CopyMessageToRAM+0xf8>)
 8003dfc:	5cd3      	ldrb	r3, [r2, r3]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d3d5      	bcc.n	8003db2 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8003e06:	bf00      	nop
 8003e08:	bf00      	nop
 8003e0a:	3724      	adds	r7, #36	; 0x24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	0800c044 	.word	0x0800c044

08003e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b089      	sub	sp, #36	; 0x24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003e26:	4b89      	ldr	r3, [pc, #548]	; (800404c <HAL_GPIO_Init+0x234>)
 8003e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e2a:	e194      	b.n	8004156 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	2101      	movs	r1, #1
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	fa01 f303 	lsl.w	r3, r1, r3
 8003e38:	4013      	ands	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 8186 	beq.w	8004150 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d005      	beq.n	8003e5c <HAL_GPIO_Init+0x44>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d130      	bne.n	8003ebe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	2203      	movs	r2, #3
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e92:	2201      	movs	r2, #1
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	f003 0201 	and.w	r2, r3, #1
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d017      	beq.n	8003efa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d123      	bne.n	8003f4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	08da      	lsrs	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3208      	adds	r2, #8
 8003f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	220f      	movs	r2, #15
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	43db      	mvns	r3, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4013      	ands	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	08da      	lsrs	r2, r3, #3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3208      	adds	r2, #8
 8003f48:	69b9      	ldr	r1, [r7, #24]
 8003f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	2203      	movs	r2, #3
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f003 0203 	and.w	r2, r3, #3
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 80e0 	beq.w	8004150 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f90:	4b2f      	ldr	r3, [pc, #188]	; (8004050 <HAL_GPIO_Init+0x238>)
 8003f92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f96:	4a2e      	ldr	r2, [pc, #184]	; (8004050 <HAL_GPIO_Init+0x238>)
 8003f98:	f043 0302 	orr.w	r3, r3, #2
 8003f9c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	; (8004050 <HAL_GPIO_Init+0x238>)
 8003fa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fae:	4a29      	ldr	r2, [pc, #164]	; (8004054 <HAL_GPIO_Init+0x23c>)
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	220f      	movs	r2, #15
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a20      	ldr	r2, [pc, #128]	; (8004058 <HAL_GPIO_Init+0x240>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d052      	beq.n	8004080 <HAL_GPIO_Init+0x268>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a1f      	ldr	r2, [pc, #124]	; (800405c <HAL_GPIO_Init+0x244>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d031      	beq.n	8004046 <HAL_GPIO_Init+0x22e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a1e      	ldr	r2, [pc, #120]	; (8004060 <HAL_GPIO_Init+0x248>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d02b      	beq.n	8004042 <HAL_GPIO_Init+0x22a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <HAL_GPIO_Init+0x24c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d025      	beq.n	800403e <HAL_GPIO_Init+0x226>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <HAL_GPIO_Init+0x250>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01f      	beq.n	800403a <HAL_GPIO_Init+0x222>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1b      	ldr	r2, [pc, #108]	; (800406c <HAL_GPIO_Init+0x254>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d019      	beq.n	8004036 <HAL_GPIO_Init+0x21e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a1a      	ldr	r2, [pc, #104]	; (8004070 <HAL_GPIO_Init+0x258>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <HAL_GPIO_Init+0x21a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a19      	ldr	r2, [pc, #100]	; (8004074 <HAL_GPIO_Init+0x25c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00d      	beq.n	800402e <HAL_GPIO_Init+0x216>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a18      	ldr	r2, [pc, #96]	; (8004078 <HAL_GPIO_Init+0x260>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d007      	beq.n	800402a <HAL_GPIO_Init+0x212>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a17      	ldr	r2, [pc, #92]	; (800407c <HAL_GPIO_Init+0x264>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d101      	bne.n	8004026 <HAL_GPIO_Init+0x20e>
 8004022:	2309      	movs	r3, #9
 8004024:	e02d      	b.n	8004082 <HAL_GPIO_Init+0x26a>
 8004026:	230a      	movs	r3, #10
 8004028:	e02b      	b.n	8004082 <HAL_GPIO_Init+0x26a>
 800402a:	2308      	movs	r3, #8
 800402c:	e029      	b.n	8004082 <HAL_GPIO_Init+0x26a>
 800402e:	2307      	movs	r3, #7
 8004030:	e027      	b.n	8004082 <HAL_GPIO_Init+0x26a>
 8004032:	2306      	movs	r3, #6
 8004034:	e025      	b.n	8004082 <HAL_GPIO_Init+0x26a>
 8004036:	2305      	movs	r3, #5
 8004038:	e023      	b.n	8004082 <HAL_GPIO_Init+0x26a>
 800403a:	2304      	movs	r3, #4
 800403c:	e021      	b.n	8004082 <HAL_GPIO_Init+0x26a>
 800403e:	2303      	movs	r3, #3
 8004040:	e01f      	b.n	8004082 <HAL_GPIO_Init+0x26a>
 8004042:	2302      	movs	r3, #2
 8004044:	e01d      	b.n	8004082 <HAL_GPIO_Init+0x26a>
 8004046:	2301      	movs	r3, #1
 8004048:	e01b      	b.n	8004082 <HAL_GPIO_Init+0x26a>
 800404a:	bf00      	nop
 800404c:	58000080 	.word	0x58000080
 8004050:	58024400 	.word	0x58024400
 8004054:	58000400 	.word	0x58000400
 8004058:	58020000 	.word	0x58020000
 800405c:	58020400 	.word	0x58020400
 8004060:	58020800 	.word	0x58020800
 8004064:	58020c00 	.word	0x58020c00
 8004068:	58021000 	.word	0x58021000
 800406c:	58021400 	.word	0x58021400
 8004070:	58021800 	.word	0x58021800
 8004074:	58021c00 	.word	0x58021c00
 8004078:	58022000 	.word	0x58022000
 800407c:	58022400 	.word	0x58022400
 8004080:	2300      	movs	r3, #0
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	f002 0203 	and.w	r2, r2, #3
 8004088:	0092      	lsls	r2, r2, #2
 800408a:	4093      	lsls	r3, r2
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4313      	orrs	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004092:	4938      	ldr	r1, [pc, #224]	; (8004174 <HAL_GPIO_Init+0x35c>)
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	089b      	lsrs	r3, r3, #2
 8004098:	3302      	adds	r3, #2
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	43db      	mvns	r3, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4013      	ands	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80040c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80040ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	43db      	mvns	r3, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4013      	ands	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80040f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	43db      	mvns	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	3301      	adds	r3, #1
 8004154:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	f47f ae63 	bne.w	8003e2c <HAL_GPIO_Init+0x14>
  }
}
 8004166:	bf00      	nop
 8004168:	bf00      	nop
 800416a:	3724      	adds	r7, #36	; 0x24
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	58000400 	.word	0x58000400

08004178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	807b      	strh	r3, [r7, #2]
 8004184:	4613      	mov	r3, r2
 8004186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004188:	787b      	ldrb	r3, [r7, #1]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800418e:	887a      	ldrh	r2, [r7, #2]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004194:	e003      	b.n	800419e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004196:	887b      	ldrh	r3, [r7, #2]
 8004198:	041a      	lsls	r2, r3, #16
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	619a      	str	r2, [r3, #24]
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80041b4:	4a08      	ldr	r2, [pc, #32]	; (80041d8 <HAL_HSEM_FastTake+0x2c>)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3320      	adds	r3, #32
 80041ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041be:	4a07      	ldr	r2, [pc, #28]	; (80041dc <HAL_HSEM_FastTake+0x30>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d101      	bne.n	80041c8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	e000      	b.n	80041ca <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	58026400 	.word	0x58026400
 80041dc:	80000300 	.word	0x80000300

080041e0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80041ea:	4906      	ldr	r1, [pc, #24]	; (8004204 <HAL_HSEM_Release+0x24>)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	58026400 	.word	0x58026400

08004208 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004210:	4b29      	ldr	r3, [pc, #164]	; (80042b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	2b06      	cmp	r3, #6
 800421a:	d00a      	beq.n	8004232 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800421c:	4b26      	ldr	r3, [pc, #152]	; (80042b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	429a      	cmp	r2, r3
 8004228:	d001      	beq.n	800422e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e040      	b.n	80042b0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	e03e      	b.n	80042b0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004232:	4b21      	ldr	r3, [pc, #132]	; (80042b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800423a:	491f      	ldr	r1, [pc, #124]	; (80042b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4313      	orrs	r3, r2
 8004240:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004242:	f7fd facb 	bl	80017dc <HAL_GetTick>
 8004246:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004248:	e009      	b.n	800425e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800424a:	f7fd fac7 	bl	80017dc <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004258:	d901      	bls.n	800425e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e028      	b.n	80042b0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800425e:	4b16      	ldr	r3, [pc, #88]	; (80042b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426a:	d1ee      	bne.n	800424a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b1e      	cmp	r3, #30
 8004270:	d008      	beq.n	8004284 <HAL_PWREx_ConfigSupply+0x7c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b2e      	cmp	r3, #46	; 0x2e
 8004276:	d005      	beq.n	8004284 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b1d      	cmp	r3, #29
 800427c:	d002      	beq.n	8004284 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b2d      	cmp	r3, #45	; 0x2d
 8004282:	d114      	bne.n	80042ae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004284:	f7fd faaa 	bl	80017dc <HAL_GetTick>
 8004288:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800428a:	e009      	b.n	80042a0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800428c:	f7fd faa6 	bl	80017dc <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800429a:	d901      	bls.n	80042a0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e007      	b.n	80042b0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_PWREx_ConfigSupply+0xb0>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ac:	d1ee      	bne.n	800428c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	58024800 	.word	0x58024800

080042bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08c      	sub	sp, #48	; 0x30
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d102      	bne.n	80042d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	f000 bc1d 	b.w	8004b0a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8087 	beq.w	80043ec <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042de:	4b99      	ldr	r3, [pc, #612]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042e8:	4b96      	ldr	r3, [pc, #600]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d007      	beq.n	8004304 <HAL_RCC_OscConfig+0x48>
 80042f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f6:	2b18      	cmp	r3, #24
 80042f8:	d110      	bne.n	800431c <HAL_RCC_OscConfig+0x60>
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d10b      	bne.n	800431c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	4b8f      	ldr	r3, [pc, #572]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d06c      	beq.n	80043ea <HAL_RCC_OscConfig+0x12e>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d168      	bne.n	80043ea <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e3f6      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004324:	d106      	bne.n	8004334 <HAL_RCC_OscConfig+0x78>
 8004326:	4b87      	ldr	r3, [pc, #540]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a86      	ldr	r2, [pc, #536]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e02e      	b.n	8004392 <HAL_RCC_OscConfig+0xd6>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10c      	bne.n	8004356 <HAL_RCC_OscConfig+0x9a>
 800433c:	4b81      	ldr	r3, [pc, #516]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a80      	ldr	r2, [pc, #512]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	4b7e      	ldr	r3, [pc, #504]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a7d      	ldr	r2, [pc, #500]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800434e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	e01d      	b.n	8004392 <HAL_RCC_OscConfig+0xd6>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800435e:	d10c      	bne.n	800437a <HAL_RCC_OscConfig+0xbe>
 8004360:	4b78      	ldr	r3, [pc, #480]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a77      	ldr	r2, [pc, #476]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	4b75      	ldr	r3, [pc, #468]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a74      	ldr	r2, [pc, #464]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	e00b      	b.n	8004392 <HAL_RCC_OscConfig+0xd6>
 800437a:	4b72      	ldr	r3, [pc, #456]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a71      	ldr	r2, [pc, #452]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	4b6f      	ldr	r3, [pc, #444]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a6e      	ldr	r2, [pc, #440]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800438c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004390:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d013      	beq.n	80043c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439a:	f7fd fa1f 	bl	80017dc <HAL_GetTick>
 800439e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a2:	f7fd fa1b 	bl	80017dc <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b64      	cmp	r3, #100	; 0x64
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e3aa      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043b4:	4b63      	ldr	r3, [pc, #396]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0xe6>
 80043c0:	e014      	b.n	80043ec <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c2:	f7fd fa0b 	bl	80017dc <HAL_GetTick>
 80043c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043ca:	f7fd fa07 	bl	80017dc <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b64      	cmp	r3, #100	; 0x64
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e396      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043dc:	4b59      	ldr	r3, [pc, #356]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f0      	bne.n	80043ca <HAL_RCC_OscConfig+0x10e>
 80043e8:	e000      	b.n	80043ec <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80cb 	beq.w	8004590 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043fa:	4b52      	ldr	r3, [pc, #328]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004402:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004404:	4b4f      	ldr	r3, [pc, #316]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004408:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <HAL_RCC_OscConfig+0x164>
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	2b18      	cmp	r3, #24
 8004414:	d156      	bne.n	80044c4 <HAL_RCC_OscConfig+0x208>
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d151      	bne.n	80044c4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004420:	4b48      	ldr	r3, [pc, #288]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <HAL_RCC_OscConfig+0x17c>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e368      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004438:	4b42      	ldr	r3, [pc, #264]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f023 0219 	bic.w	r2, r3, #25
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	493f      	ldr	r1, [pc, #252]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800444a:	f7fd f9c7 	bl	80017dc <HAL_GetTick>
 800444e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004452:	f7fd f9c3 	bl	80017dc <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e352      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004464:	4b37      	ldr	r3, [pc, #220]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004470:	f7fd f9e4 	bl	800183c <HAL_GetREVID>
 8004474:	4603      	mov	r3, r0
 8004476:	f241 0203 	movw	r2, #4099	; 0x1003
 800447a:	4293      	cmp	r3, r2
 800447c:	d817      	bhi.n	80044ae <HAL_RCC_OscConfig+0x1f2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b40      	cmp	r3, #64	; 0x40
 8004484:	d108      	bne.n	8004498 <HAL_RCC_OscConfig+0x1dc>
 8004486:	4b2f      	ldr	r3, [pc, #188]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800448e:	4a2d      	ldr	r2, [pc, #180]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004494:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004496:	e07b      	b.n	8004590 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004498:	4b2a      	ldr	r3, [pc, #168]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	031b      	lsls	r3, r3, #12
 80044a6:	4927      	ldr	r1, [pc, #156]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ac:	e070      	b.n	8004590 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ae:	4b25      	ldr	r3, [pc, #148]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	061b      	lsls	r3, r3, #24
 80044bc:	4921      	ldr	r1, [pc, #132]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044c2:	e065      	b.n	8004590 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d048      	beq.n	800455e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044cc:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f023 0219 	bic.w	r2, r3, #25
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	491a      	ldr	r1, [pc, #104]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044de:	f7fd f97d 	bl	80017dc <HAL_GetTick>
 80044e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e6:	f7fd f979 	bl	80017dc <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e308      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044f8:	4b12      	ldr	r3, [pc, #72]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004504:	f7fd f99a 	bl	800183c <HAL_GetREVID>
 8004508:	4603      	mov	r3, r0
 800450a:	f241 0203 	movw	r2, #4099	; 0x1003
 800450e:	4293      	cmp	r3, r2
 8004510:	d81a      	bhi.n	8004548 <HAL_RCC_OscConfig+0x28c>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b40      	cmp	r3, #64	; 0x40
 8004518:	d108      	bne.n	800452c <HAL_RCC_OscConfig+0x270>
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004522:	4a08      	ldr	r2, [pc, #32]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004528:	6053      	str	r3, [r2, #4]
 800452a:	e031      	b.n	8004590 <HAL_RCC_OscConfig+0x2d4>
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	031b      	lsls	r3, r3, #12
 800453a:	4902      	ldr	r1, [pc, #8]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800453c:	4313      	orrs	r3, r2
 800453e:	604b      	str	r3, [r1, #4]
 8004540:	e026      	b.n	8004590 <HAL_RCC_OscConfig+0x2d4>
 8004542:	bf00      	nop
 8004544:	58024400 	.word	0x58024400
 8004548:	4b9a      	ldr	r3, [pc, #616]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	061b      	lsls	r3, r3, #24
 8004556:	4997      	ldr	r1, [pc, #604]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004558:	4313      	orrs	r3, r2
 800455a:	604b      	str	r3, [r1, #4]
 800455c:	e018      	b.n	8004590 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800455e:	4b95      	ldr	r3, [pc, #596]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a94      	ldr	r2, [pc, #592]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004564:	f023 0301 	bic.w	r3, r3, #1
 8004568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456a:	f7fd f937 	bl	80017dc <HAL_GetTick>
 800456e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004572:	f7fd f933 	bl	80017dc <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e2c2      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004584:	4b8b      	ldr	r3, [pc, #556]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f0      	bne.n	8004572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80a9 	beq.w	80046f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800459e:	4b85      	ldr	r3, [pc, #532]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045a8:	4b82      	ldr	r3, [pc, #520]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d007      	beq.n	80045c4 <HAL_RCC_OscConfig+0x308>
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b18      	cmp	r3, #24
 80045b8:	d13a      	bne.n	8004630 <HAL_RCC_OscConfig+0x374>
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d135      	bne.n	8004630 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045c4:	4b7b      	ldr	r3, [pc, #492]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_OscConfig+0x320>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	2b80      	cmp	r3, #128	; 0x80
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e296      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045dc:	f7fd f92e 	bl	800183c <HAL_GetREVID>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d817      	bhi.n	800461a <HAL_RCC_OscConfig+0x35e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d108      	bne.n	8004604 <HAL_RCC_OscConfig+0x348>
 80045f2:	4b70      	ldr	r3, [pc, #448]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80045fa:	4a6e      	ldr	r2, [pc, #440]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80045fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004600:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004602:	e075      	b.n	80046f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004604:	4b6b      	ldr	r3, [pc, #428]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	069b      	lsls	r3, r3, #26
 8004612:	4968      	ldr	r1, [pc, #416]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004614:	4313      	orrs	r3, r2
 8004616:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004618:	e06a      	b.n	80046f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800461a:	4b66      	ldr	r3, [pc, #408]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	061b      	lsls	r3, r3, #24
 8004628:	4962      	ldr	r1, [pc, #392]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800462a:	4313      	orrs	r3, r2
 800462c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800462e:	e05f      	b.n	80046f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d042      	beq.n	80046be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004638:	4b5e      	ldr	r3, [pc, #376]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a5d      	ldr	r2, [pc, #372]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800463e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fd f8ca 	bl	80017dc <HAL_GetTick>
 8004648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800464c:	f7fd f8c6 	bl	80017dc <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e255      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800465e:	4b55      	ldr	r3, [pc, #340]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800466a:	f7fd f8e7 	bl	800183c <HAL_GetREVID>
 800466e:	4603      	mov	r3, r0
 8004670:	f241 0203 	movw	r2, #4099	; 0x1003
 8004674:	4293      	cmp	r3, r2
 8004676:	d817      	bhi.n	80046a8 <HAL_RCC_OscConfig+0x3ec>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	2b20      	cmp	r3, #32
 800467e:	d108      	bne.n	8004692 <HAL_RCC_OscConfig+0x3d6>
 8004680:	4b4c      	ldr	r3, [pc, #304]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004688:	4a4a      	ldr	r2, [pc, #296]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800468a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800468e:	6053      	str	r3, [r2, #4]
 8004690:	e02e      	b.n	80046f0 <HAL_RCC_OscConfig+0x434>
 8004692:	4b48      	ldr	r3, [pc, #288]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	069b      	lsls	r3, r3, #26
 80046a0:	4944      	ldr	r1, [pc, #272]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]
 80046a6:	e023      	b.n	80046f0 <HAL_RCC_OscConfig+0x434>
 80046a8:	4b42      	ldr	r3, [pc, #264]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	493f      	ldr	r1, [pc, #252]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60cb      	str	r3, [r1, #12]
 80046bc:	e018      	b.n	80046f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80046be:	4b3d      	ldr	r3, [pc, #244]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a3c      	ldr	r2, [pc, #240]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80046c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fd f887 	bl	80017dc <HAL_GetTick>
 80046ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80046d2:	f7fd f883 	bl	80017dc <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e212      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046e4:	4b33      	ldr	r3, [pc, #204]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f0      	bne.n	80046d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d036      	beq.n	800476a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d019      	beq.n	8004738 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004704:	4b2b      	ldr	r3, [pc, #172]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004708:	4a2a      	ldr	r2, [pc, #168]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fd f864 	bl	80017dc <HAL_GetTick>
 8004714:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004718:	f7fd f860 	bl	80017dc <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e1ef      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800472a:	4b22      	ldr	r3, [pc, #136]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800472c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0x45c>
 8004736:	e018      	b.n	800476a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004738:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800473a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473c:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 800473e:	f023 0301 	bic.w	r3, r3, #1
 8004742:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004744:	f7fd f84a 	bl	80017dc <HAL_GetTick>
 8004748:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800474c:	f7fd f846 	bl	80017dc <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e1d5      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800475e:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d039      	beq.n	80047ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01c      	beq.n	80047b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800477e:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a0c      	ldr	r2, [pc, #48]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 8004784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004788:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800478a:	f7fd f827 	bl	80017dc <HAL_GetTick>
 800478e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004792:	f7fd f823 	bl	80017dc <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e1b2      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80047a4:	4b03      	ldr	r3, [pc, #12]	; (80047b4 <HAL_RCC_OscConfig+0x4f8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x4d6>
 80047b0:	e01b      	b.n	80047ea <HAL_RCC_OscConfig+0x52e>
 80047b2:	bf00      	nop
 80047b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047b8:	4b9b      	ldr	r3, [pc, #620]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a9a      	ldr	r2, [pc, #616]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80047be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80047c4:	f7fd f80a 	bl	80017dc <HAL_GetTick>
 80047c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80047cc:	f7fd f806 	bl	80017dc <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e195      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047de:	4b92      	ldr	r3, [pc, #584]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 8081 	beq.w	80048fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047f8:	4b8c      	ldr	r3, [pc, #560]	; (8004a2c <HAL_RCC_OscConfig+0x770>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a8b      	ldr	r2, [pc, #556]	; (8004a2c <HAL_RCC_OscConfig+0x770>)
 80047fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004802:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004804:	f7fc ffea 	bl	80017dc <HAL_GetTick>
 8004808:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800480c:	f7fc ffe6 	bl	80017dc <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	; 0x64
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e175      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800481e:	4b83      	ldr	r3, [pc, #524]	; (8004a2c <HAL_RCC_OscConfig+0x770>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d106      	bne.n	8004840 <HAL_RCC_OscConfig+0x584>
 8004832:	4b7d      	ldr	r3, [pc, #500]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004836:	4a7c      	ldr	r2, [pc, #496]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	6713      	str	r3, [r2, #112]	; 0x70
 800483e:	e02d      	b.n	800489c <HAL_RCC_OscConfig+0x5e0>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10c      	bne.n	8004862 <HAL_RCC_OscConfig+0x5a6>
 8004848:	4b77      	ldr	r3, [pc, #476]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 800484a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484c:	4a76      	ldr	r2, [pc, #472]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 800484e:	f023 0301 	bic.w	r3, r3, #1
 8004852:	6713      	str	r3, [r2, #112]	; 0x70
 8004854:	4b74      	ldr	r3, [pc, #464]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004858:	4a73      	ldr	r2, [pc, #460]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 800485a:	f023 0304 	bic.w	r3, r3, #4
 800485e:	6713      	str	r3, [r2, #112]	; 0x70
 8004860:	e01c      	b.n	800489c <HAL_RCC_OscConfig+0x5e0>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b05      	cmp	r3, #5
 8004868:	d10c      	bne.n	8004884 <HAL_RCC_OscConfig+0x5c8>
 800486a:	4b6f      	ldr	r3, [pc, #444]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 800486c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486e:	4a6e      	ldr	r2, [pc, #440]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004870:	f043 0304 	orr.w	r3, r3, #4
 8004874:	6713      	str	r3, [r2, #112]	; 0x70
 8004876:	4b6c      	ldr	r3, [pc, #432]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487a:	4a6b      	ldr	r2, [pc, #428]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 800487c:	f043 0301 	orr.w	r3, r3, #1
 8004880:	6713      	str	r3, [r2, #112]	; 0x70
 8004882:	e00b      	b.n	800489c <HAL_RCC_OscConfig+0x5e0>
 8004884:	4b68      	ldr	r3, [pc, #416]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004888:	4a67      	ldr	r2, [pc, #412]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 800488a:	f023 0301 	bic.w	r3, r3, #1
 800488e:	6713      	str	r3, [r2, #112]	; 0x70
 8004890:	4b65      	ldr	r3, [pc, #404]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004894:	4a64      	ldr	r2, [pc, #400]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004896:	f023 0304 	bic.w	r3, r3, #4
 800489a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d015      	beq.n	80048d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a4:	f7fc ff9a 	bl	80017dc <HAL_GetTick>
 80048a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048aa:	e00a      	b.n	80048c2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ac:	f7fc ff96 	bl	80017dc <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e123      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048c2:	4b59      	ldr	r3, [pc, #356]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80048c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0ee      	beq.n	80048ac <HAL_RCC_OscConfig+0x5f0>
 80048ce:	e014      	b.n	80048fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d0:	f7fc ff84 	bl	80017dc <HAL_GetTick>
 80048d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048d6:	e00a      	b.n	80048ee <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d8:	f7fc ff80 	bl	80017dc <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e10d      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048ee:	4b4e      	ldr	r3, [pc, #312]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1ee      	bne.n	80048d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8102 	beq.w	8004b08 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004904:	4b48      	ldr	r3, [pc, #288]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800490c:	2b18      	cmp	r3, #24
 800490e:	f000 80bd 	beq.w	8004a8c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	2b02      	cmp	r3, #2
 8004918:	f040 809e 	bne.w	8004a58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800491c:	4b42      	ldr	r3, [pc, #264]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a41      	ldr	r2, [pc, #260]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fc ff58 	bl	80017dc <HAL_GetTick>
 800492c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004930:	f7fc ff54 	bl	80017dc <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e0e3      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004942:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800494e:	4b36      	ldr	r3, [pc, #216]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004952:	4b37      	ldr	r3, [pc, #220]	; (8004a30 <HAL_RCC_OscConfig+0x774>)
 8004954:	4013      	ands	r3, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800495e:	0112      	lsls	r2, r2, #4
 8004960:	430a      	orrs	r2, r1
 8004962:	4931      	ldr	r1, [pc, #196]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004964:	4313      	orrs	r3, r2
 8004966:	628b      	str	r3, [r1, #40]	; 0x28
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496c:	3b01      	subs	r3, #1
 800496e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004976:	3b01      	subs	r3, #1
 8004978:	025b      	lsls	r3, r3, #9
 800497a:	b29b      	uxth	r3, r3
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	3b01      	subs	r3, #1
 8004984:	041b      	lsls	r3, r3, #16
 8004986:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004990:	3b01      	subs	r3, #1
 8004992:	061b      	lsls	r3, r3, #24
 8004994:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004998:	4923      	ldr	r1, [pc, #140]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 800499a:	4313      	orrs	r3, r2
 800499c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800499e:	4b22      	ldr	r3, [pc, #136]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a2:	4a21      	ldr	r2, [pc, #132]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049a4:	f023 0301 	bic.w	r3, r3, #1
 80049a8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049aa:	4b1f      	ldr	r3, [pc, #124]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ae:	4b21      	ldr	r3, [pc, #132]	; (8004a34 <HAL_RCC_OscConfig+0x778>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80049b6:	00d2      	lsls	r2, r2, #3
 80049b8:	491b      	ldr	r1, [pc, #108]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80049be:	4b1a      	ldr	r3, [pc, #104]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c2:	f023 020c 	bic.w	r2, r3, #12
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	4917      	ldr	r1, [pc, #92]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80049d0:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	f023 0202 	bic.w	r2, r3, #2
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049dc:	4912      	ldr	r1, [pc, #72]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049e2:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	4a10      	ldr	r2, [pc, #64]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ee:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	4a0d      	ldr	r2, [pc, #52]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004a06:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	4a07      	ldr	r2, [pc, #28]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a04      	ldr	r2, [pc, #16]	; (8004a28 <HAL_RCC_OscConfig+0x76c>)
 8004a18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1e:	f7fc fedd 	bl	80017dc <HAL_GetTick>
 8004a22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a24:	e011      	b.n	8004a4a <HAL_RCC_OscConfig+0x78e>
 8004a26:	bf00      	nop
 8004a28:	58024400 	.word	0x58024400
 8004a2c:	58024800 	.word	0x58024800
 8004a30:	fffffc0c 	.word	0xfffffc0c
 8004a34:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a38:	f7fc fed0 	bl	80017dc <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e05f      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a4a:	4b32      	ldr	r3, [pc, #200]	; (8004b14 <HAL_RCC_OscConfig+0x858>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCC_OscConfig+0x77c>
 8004a56:	e057      	b.n	8004b08 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a58:	4b2e      	ldr	r3, [pc, #184]	; (8004b14 <HAL_RCC_OscConfig+0x858>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a2d      	ldr	r2, [pc, #180]	; (8004b14 <HAL_RCC_OscConfig+0x858>)
 8004a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a64:	f7fc feba 	bl	80017dc <HAL_GetTick>
 8004a68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a6c:	f7fc feb6 	bl	80017dc <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e045      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a7e:	4b25      	ldr	r3, [pc, #148]	; (8004b14 <HAL_RCC_OscConfig+0x858>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x7b0>
 8004a8a:	e03d      	b.n	8004b08 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a8c:	4b21      	ldr	r3, [pc, #132]	; (8004b14 <HAL_RCC_OscConfig+0x858>)
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a92:	4b20      	ldr	r3, [pc, #128]	; (8004b14 <HAL_RCC_OscConfig+0x858>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d031      	beq.n	8004b04 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f003 0203 	and.w	r2, r3, #3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d12a      	bne.n	8004b04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d122      	bne.n	8004b04 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d11a      	bne.n	8004b04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	0a5b      	lsrs	r3, r3, #9
 8004ad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ada:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d111      	bne.n	8004b04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	0c1b      	lsrs	r3, r3, #16
 8004ae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d108      	bne.n	8004b04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	0e1b      	lsrs	r3, r3, #24
 8004af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d001      	beq.n	8004b08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e000      	b.n	8004b0a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3730      	adds	r7, #48	; 0x30
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	58024400 	.word	0x58024400

08004b18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e19c      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b2c:	4b8a      	ldr	r3, [pc, #552]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 030f 	and.w	r3, r3, #15
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d910      	bls.n	8004b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3a:	4b87      	ldr	r3, [pc, #540]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f023 020f 	bic.w	r2, r3, #15
 8004b42:	4985      	ldr	r1, [pc, #532]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4a:	4b83      	ldr	r3, [pc, #524]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e184      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d010      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	4b7b      	ldr	r3, [pc, #492]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d908      	bls.n	8004b8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b78:	4b78      	ldr	r3, [pc, #480]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	4975      	ldr	r1, [pc, #468]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d010      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	4b70      	ldr	r3, [pc, #448]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d908      	bls.n	8004bb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ba6:	4b6d      	ldr	r3, [pc, #436]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	496a      	ldr	r1, [pc, #424]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d010      	beq.n	8004be6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699a      	ldr	r2, [r3, #24]
 8004bc8:	4b64      	ldr	r3, [pc, #400]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d908      	bls.n	8004be6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004bd4:	4b61      	ldr	r3, [pc, #388]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	495e      	ldr	r1, [pc, #376]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d010      	beq.n	8004c14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69da      	ldr	r2, [r3, #28]
 8004bf6:	4b59      	ldr	r3, [pc, #356]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d908      	bls.n	8004c14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c02:	4b56      	ldr	r3, [pc, #344]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	4953      	ldr	r1, [pc, #332]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d010      	beq.n	8004c42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	4b4d      	ldr	r3, [pc, #308]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d908      	bls.n	8004c42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c30:	4b4a      	ldr	r3, [pc, #296]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f023 020f 	bic.w	r2, r3, #15
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4947      	ldr	r1, [pc, #284]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d055      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c4e:	4b43      	ldr	r3, [pc, #268]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	4940      	ldr	r1, [pc, #256]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d107      	bne.n	8004c78 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c68:	4b3c      	ldr	r3, [pc, #240]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d121      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e0f6      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d107      	bne.n	8004c90 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c80:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d115      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0ea      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d107      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c98:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d109      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e0de      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ca8:	4b2c      	ldr	r3, [pc, #176]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0d6      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cb8:	4b28      	ldr	r3, [pc, #160]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f023 0207 	bic.w	r2, r3, #7
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	4925      	ldr	r1, [pc, #148]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cca:	f7fc fd87 	bl	80017dc <HAL_GetTick>
 8004cce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd0:	e00a      	b.n	8004ce8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd2:	f7fc fd83 	bl	80017dc <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e0be      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce8:	4b1c      	ldr	r3, [pc, #112]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d1eb      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d010      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d208      	bcs.n	8004d28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d16:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f023 020f 	bic.w	r2, r3, #15
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	490e      	ldr	r1, [pc, #56]	; (8004d5c <HAL_RCC_ClockConfig+0x244>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d214      	bcs.n	8004d60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d36:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 020f 	bic.w	r2, r3, #15
 8004d3e:	4906      	ldr	r1, [pc, #24]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d46:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <HAL_RCC_ClockConfig+0x240>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d005      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e086      	b.n	8004e66 <HAL_RCC_ClockConfig+0x34e>
 8004d58:	52002000 	.word	0x52002000
 8004d5c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d010      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	4b3f      	ldr	r3, [pc, #252]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d208      	bcs.n	8004d8e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d7c:	4b3c      	ldr	r3, [pc, #240]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	4939      	ldr	r1, [pc, #228]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d010      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695a      	ldr	r2, [r3, #20]
 8004d9e:	4b34      	ldr	r3, [pc, #208]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d208      	bcs.n	8004dbc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004daa:	4b31      	ldr	r3, [pc, #196]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	492e      	ldr	r1, [pc, #184]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d010      	beq.n	8004dea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699a      	ldr	r2, [r3, #24]
 8004dcc:	4b28      	ldr	r3, [pc, #160]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d208      	bcs.n	8004dea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004dd8:	4b25      	ldr	r3, [pc, #148]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	4922      	ldr	r1, [pc, #136]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d010      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69da      	ldr	r2, [r3, #28]
 8004dfa:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d208      	bcs.n	8004e18 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e06:	4b1a      	ldr	r3, [pc, #104]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	4917      	ldr	r1, [pc, #92]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e18:	f000 f834 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	0a1b      	lsrs	r3, r3, #8
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	4912      	ldr	r1, [pc, #72]	; (8004e74 <HAL_RCC_ClockConfig+0x35c>)
 8004e2a:	5ccb      	ldrb	r3, [r1, r3]
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
 8004e34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e36:	4b0e      	ldr	r3, [pc, #56]	; (8004e70 <HAL_RCC_ClockConfig+0x358>)
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	4a0d      	ldr	r2, [pc, #52]	; (8004e74 <HAL_RCC_ClockConfig+0x35c>)
 8004e40:	5cd3      	ldrb	r3, [r2, r3]
 8004e42:	f003 031f 	and.w	r3, r3, #31
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4c:	4a0a      	ldr	r2, [pc, #40]	; (8004e78 <HAL_RCC_ClockConfig+0x360>)
 8004e4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e50:	4a0a      	ldr	r2, [pc, #40]	; (8004e7c <HAL_RCC_ClockConfig+0x364>)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <HAL_RCC_ClockConfig+0x368>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fc fc74 	bl	8001748 <HAL_InitTick>
 8004e60:	4603      	mov	r3, r0
 8004e62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	58024400 	.word	0x58024400
 8004e74:	0800c034 	.word	0x0800c034
 8004e78:	24000004 	.word	0x24000004
 8004e7c:	24000000 	.word	0x24000000
 8004e80:	24000008 	.word	0x24000008

08004e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b089      	sub	sp, #36	; 0x24
 8004e88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e8a:	4bb3      	ldr	r3, [pc, #716]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e92:	2b18      	cmp	r3, #24
 8004e94:	f200 8155 	bhi.w	8005142 <HAL_RCC_GetSysClockFreq+0x2be>
 8004e98:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9e:	bf00      	nop
 8004ea0:	08004f05 	.word	0x08004f05
 8004ea4:	08005143 	.word	0x08005143
 8004ea8:	08005143 	.word	0x08005143
 8004eac:	08005143 	.word	0x08005143
 8004eb0:	08005143 	.word	0x08005143
 8004eb4:	08005143 	.word	0x08005143
 8004eb8:	08005143 	.word	0x08005143
 8004ebc:	08005143 	.word	0x08005143
 8004ec0:	08004f2b 	.word	0x08004f2b
 8004ec4:	08005143 	.word	0x08005143
 8004ec8:	08005143 	.word	0x08005143
 8004ecc:	08005143 	.word	0x08005143
 8004ed0:	08005143 	.word	0x08005143
 8004ed4:	08005143 	.word	0x08005143
 8004ed8:	08005143 	.word	0x08005143
 8004edc:	08005143 	.word	0x08005143
 8004ee0:	08004f31 	.word	0x08004f31
 8004ee4:	08005143 	.word	0x08005143
 8004ee8:	08005143 	.word	0x08005143
 8004eec:	08005143 	.word	0x08005143
 8004ef0:	08005143 	.word	0x08005143
 8004ef4:	08005143 	.word	0x08005143
 8004ef8:	08005143 	.word	0x08005143
 8004efc:	08005143 	.word	0x08005143
 8004f00:	08004f37 	.word	0x08004f37
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f04:	4b94      	ldr	r3, [pc, #592]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d009      	beq.n	8004f24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f10:	4b91      	ldr	r3, [pc, #580]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	08db      	lsrs	r3, r3, #3
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	4a90      	ldr	r2, [pc, #576]	; (800515c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004f22:	e111      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f24:	4b8d      	ldr	r3, [pc, #564]	; (800515c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f26:	61bb      	str	r3, [r7, #24]
    break;
 8004f28:	e10e      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004f2a:	4b8d      	ldr	r3, [pc, #564]	; (8005160 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f2c:	61bb      	str	r3, [r7, #24]
    break;
 8004f2e:	e10b      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004f30:	4b8c      	ldr	r3, [pc, #560]	; (8005164 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f32:	61bb      	str	r3, [r7, #24]
    break;
 8004f34:	e108      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f36:	4b88      	ldr	r3, [pc, #544]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004f40:	4b85      	ldr	r3, [pc, #532]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	091b      	lsrs	r3, r3, #4
 8004f46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f4a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f4c:	4b82      	ldr	r3, [pc, #520]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004f56:	4b80      	ldr	r3, [pc, #512]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5a:	08db      	lsrs	r3, r3, #3
 8004f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80e1 	beq.w	800513c <HAL_RCC_GetSysClockFreq+0x2b8>
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	f000 8083 	beq.w	8005088 <HAL_RCC_GetSysClockFreq+0x204>
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	f200 80a1 	bhi.w	80050cc <HAL_RCC_GetSysClockFreq+0x248>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x114>
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d056      	beq.n	8005044 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004f96:	e099      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f98:	4b6f      	ldr	r3, [pc, #444]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d02d      	beq.n	8005000 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fa4:	4b6c      	ldr	r3, [pc, #432]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	08db      	lsrs	r3, r3, #3
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	4a6b      	ldr	r2, [pc, #428]	; (800515c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fce:	4b62      	ldr	r3, [pc, #392]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd6:	ee07 3a90 	vmov	s15, r3
 8004fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fde:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fe2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005168 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004ffe:	e087      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800516c <HAL_RCC_GetSysClockFreq+0x2e8>
 800500e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005012:	4b51      	ldr	r3, [pc, #324]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005022:	ed97 6a02 	vldr	s12, [r7, #8]
 8005026:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005168 <HAL_RCC_GetSysClockFreq+0x2e4>
 800502a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005042:	e065      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005170 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005056:	4b40      	ldr	r3, [pc, #256]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005066:	ed97 6a02 	vldr	s12, [r7, #8]
 800506a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005168 <HAL_RCC_GetSysClockFreq+0x2e4>
 800506e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800507a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005086:	e043      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005092:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005174 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509a:	4b2f      	ldr	r3, [pc, #188]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005168 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ca:	e021      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005170 <HAL_RCC_GetSysClockFreq+0x2ec>
 80050da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050de:	4b1e      	ldr	r3, [pc, #120]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80050f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005168 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800510e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005110:	4b11      	ldr	r3, [pc, #68]	; (8005158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	0a5b      	lsrs	r3, r3, #9
 8005116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800511a:	3301      	adds	r3, #1
 800511c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	ee07 3a90 	vmov	s15, r3
 8005124:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005128:	edd7 6a07 	vldr	s13, [r7, #28]
 800512c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005134:	ee17 3a90 	vmov	r3, s15
 8005138:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800513a:	e005      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	61bb      	str	r3, [r7, #24]
    break;
 8005140:	e002      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005144:	61bb      	str	r3, [r7, #24]
    break;
 8005146:	bf00      	nop
  }

  return sysclockfreq;
 8005148:	69bb      	ldr	r3, [r7, #24]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3724      	adds	r7, #36	; 0x24
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	58024400 	.word	0x58024400
 800515c:	03d09000 	.word	0x03d09000
 8005160:	003d0900 	.word	0x003d0900
 8005164:	007a1200 	.word	0x007a1200
 8005168:	46000000 	.word	0x46000000
 800516c:	4c742400 	.word	0x4c742400
 8005170:	4a742400 	.word	0x4a742400
 8005174:	4af42400 	.word	0x4af42400

08005178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800517e:	f7ff fe81 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8005182:	4602      	mov	r2, r0
 8005184:	4b10      	ldr	r3, [pc, #64]	; (80051c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	0a1b      	lsrs	r3, r3, #8
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	490f      	ldr	r1, [pc, #60]	; (80051cc <HAL_RCC_GetHCLKFreq+0x54>)
 8005190:	5ccb      	ldrb	r3, [r1, r3]
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	fa22 f303 	lsr.w	r3, r2, r3
 800519a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	4a09      	ldr	r2, [pc, #36]	; (80051cc <HAL_RCC_GetHCLKFreq+0x54>)
 80051a6:	5cd3      	ldrb	r3, [r2, r3]
 80051a8:	f003 031f 	and.w	r3, r3, #31
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	fa22 f303 	lsr.w	r3, r2, r3
 80051b2:	4a07      	ldr	r2, [pc, #28]	; (80051d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80051b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051b6:	4a07      	ldr	r2, [pc, #28]	; (80051d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80051bc:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80051be:	681b      	ldr	r3, [r3, #0]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	58024400 	.word	0x58024400
 80051cc:	0800c034 	.word	0x0800c034
 80051d0:	24000004 	.word	0x24000004
 80051d4:	24000000 	.word	0x24000000

080051d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80051dc:	f7ff ffcc 	bl	8005178 <HAL_RCC_GetHCLKFreq>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4b06      	ldr	r3, [pc, #24]	; (80051fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	091b      	lsrs	r3, r3, #4
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	4904      	ldr	r1, [pc, #16]	; (8005200 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	58024400 	.word	0x58024400
 8005200:	0800c034 	.word	0x0800c034

08005204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005208:	f7ff ffb6 	bl	8005178 <HAL_RCC_GetHCLKFreq>
 800520c:	4602      	mov	r2, r0
 800520e:	4b06      	ldr	r3, [pc, #24]	; (8005228 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	0a1b      	lsrs	r3, r3, #8
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	4904      	ldr	r1, [pc, #16]	; (800522c <HAL_RCC_GetPCLK2Freq+0x28>)
 800521a:	5ccb      	ldrb	r3, [r1, r3]
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005224:	4618      	mov	r0, r3
 8005226:	bd80      	pop	{r7, pc}
 8005228:	58024400 	.word	0x58024400
 800522c:	0800c034 	.word	0x0800c034

08005230 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005238:	2300      	movs	r3, #0
 800523a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800523c:	2300      	movs	r3, #0
 800523e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d03f      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005250:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005254:	d02a      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005256:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800525a:	d824      	bhi.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800525c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005260:	d018      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005262:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005266:	d81e      	bhi.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800526c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005270:	d007      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005272:	e018      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005274:	4ba3      	ldr	r3, [pc, #652]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	4aa2      	ldr	r2, [pc, #648]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800527a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800527e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005280:	e015      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3304      	adds	r3, #4
 8005286:	2102      	movs	r1, #2
 8005288:	4618      	mov	r0, r3
 800528a:	f001 fff9 	bl	8007280 <RCCEx_PLL2_Config>
 800528e:	4603      	mov	r3, r0
 8005290:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005292:	e00c      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3324      	adds	r3, #36	; 0x24
 8005298:	2102      	movs	r1, #2
 800529a:	4618      	mov	r0, r3
 800529c:	f002 f8a2 	bl	80073e4 <RCCEx_PLL3_Config>
 80052a0:	4603      	mov	r3, r0
 80052a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80052a4:	e003      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	75fb      	strb	r3, [r7, #23]
      break;
 80052aa:	e000      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80052ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052ae:	7dfb      	ldrb	r3, [r7, #23]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d109      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80052b4:	4b93      	ldr	r3, [pc, #588]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80052b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052c0:	4990      	ldr	r1, [pc, #576]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	650b      	str	r3, [r1, #80]	; 0x50
 80052c6:	e001      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c8:	7dfb      	ldrb	r3, [r7, #23]
 80052ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d03d      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d826      	bhi.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80052e0:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80052e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e6:	bf00      	nop
 80052e8:	080052fd 	.word	0x080052fd
 80052ec:	0800530b 	.word	0x0800530b
 80052f0:	0800531d 	.word	0x0800531d
 80052f4:	08005335 	.word	0x08005335
 80052f8:	08005335 	.word	0x08005335
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052fc:	4b81      	ldr	r3, [pc, #516]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	4a80      	ldr	r2, [pc, #512]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005306:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005308:	e015      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3304      	adds	r3, #4
 800530e:	2100      	movs	r1, #0
 8005310:	4618      	mov	r0, r3
 8005312:	f001 ffb5 	bl	8007280 <RCCEx_PLL2_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800531a:	e00c      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3324      	adds	r3, #36	; 0x24
 8005320:	2100      	movs	r1, #0
 8005322:	4618      	mov	r0, r3
 8005324:	f002 f85e 	bl	80073e4 <RCCEx_PLL3_Config>
 8005328:	4603      	mov	r3, r0
 800532a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800532c:	e003      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	75fb      	strb	r3, [r7, #23]
      break;
 8005332:	e000      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005336:	7dfb      	ldrb	r3, [r7, #23]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d109      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800533c:	4b71      	ldr	r3, [pc, #452]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800533e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005340:	f023 0207 	bic.w	r2, r3, #7
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005348:	496e      	ldr	r1, [pc, #440]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800534a:	4313      	orrs	r3, r2
 800534c:	650b      	str	r3, [r1, #80]	; 0x50
 800534e:	e001      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800535c:	2b00      	cmp	r3, #0
 800535e:	d042      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005368:	d02b      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800536a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800536e:	d825      	bhi.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005370:	2bc0      	cmp	r3, #192	; 0xc0
 8005372:	d028      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005374:	2bc0      	cmp	r3, #192	; 0xc0
 8005376:	d821      	bhi.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005378:	2b80      	cmp	r3, #128	; 0x80
 800537a:	d016      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800537c:	2b80      	cmp	r3, #128	; 0x80
 800537e:	d81d      	bhi.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005384:	2b40      	cmp	r3, #64	; 0x40
 8005386:	d007      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005388:	e018      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800538a:	4b5e      	ldr	r3, [pc, #376]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800538c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538e:	4a5d      	ldr	r2, [pc, #372]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005394:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005396:	e017      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3304      	adds	r3, #4
 800539c:	2100      	movs	r1, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	f001 ff6e 	bl	8007280 <RCCEx_PLL2_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80053a8:	e00e      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3324      	adds	r3, #36	; 0x24
 80053ae:	2100      	movs	r1, #0
 80053b0:	4618      	mov	r0, r3
 80053b2:	f002 f817 	bl	80073e4 <RCCEx_PLL3_Config>
 80053b6:	4603      	mov	r3, r0
 80053b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80053ba:	e005      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	75fb      	strb	r3, [r7, #23]
      break;
 80053c0:	e002      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80053c2:	bf00      	nop
 80053c4:	e000      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80053c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d109      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80053ce:	4b4d      	ldr	r3, [pc, #308]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053da:	494a      	ldr	r1, [pc, #296]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	650b      	str	r3, [r1, #80]	; 0x50
 80053e0:	e001      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
 80053e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d049      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053fc:	d030      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80053fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005402:	d82a      	bhi.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005404:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005408:	d02c      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800540a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800540e:	d824      	bhi.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005414:	d018      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800541a:	d81e      	bhi.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005420:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005424:	d007      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005426:	e018      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005428:	4b36      	ldr	r3, [pc, #216]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	4a35      	ldr	r2, [pc, #212]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800542e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005432:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005434:	e017      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3304      	adds	r3, #4
 800543a:	2100      	movs	r1, #0
 800543c:	4618      	mov	r0, r3
 800543e:	f001 ff1f 	bl	8007280 <RCCEx_PLL2_Config>
 8005442:	4603      	mov	r3, r0
 8005444:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005446:	e00e      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3324      	adds	r3, #36	; 0x24
 800544c:	2100      	movs	r1, #0
 800544e:	4618      	mov	r0, r3
 8005450:	f001 ffc8 	bl	80073e4 <RCCEx_PLL3_Config>
 8005454:	4603      	mov	r3, r0
 8005456:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005458:	e005      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	75fb      	strb	r3, [r7, #23]
      break;
 800545e:	e002      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005460:	bf00      	nop
 8005462:	e000      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005466:	7dfb      	ldrb	r3, [r7, #23]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10a      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800546c:	4b25      	ldr	r3, [pc, #148]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800546e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005470:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800547a:	4922      	ldr	r1, [pc, #136]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800547c:	4313      	orrs	r3, r2
 800547e:	658b      	str	r3, [r1, #88]	; 0x58
 8005480:	e001      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005482:	7dfb      	ldrb	r3, [r7, #23]
 8005484:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548e:	2b00      	cmp	r3, #0
 8005490:	d04b      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005498:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800549c:	d030      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800549e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054a2:	d82a      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80054a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054a8:	d02e      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80054aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054ae:	d824      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80054b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054b4:	d018      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80054b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054ba:	d81e      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80054c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054c4:	d007      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80054c6:	e018      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054c8:	4b0e      	ldr	r3, [pc, #56]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	4a0d      	ldr	r2, [pc, #52]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054d4:	e019      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3304      	adds	r3, #4
 80054da:	2100      	movs	r1, #0
 80054dc:	4618      	mov	r0, r3
 80054de:	f001 fecf 	bl	8007280 <RCCEx_PLL2_Config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80054e6:	e010      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3324      	adds	r3, #36	; 0x24
 80054ec:	2100      	movs	r1, #0
 80054ee:	4618      	mov	r0, r3
 80054f0:	f001 ff78 	bl	80073e4 <RCCEx_PLL3_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054f8:	e007      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	75fb      	strb	r3, [r7, #23]
      break;
 80054fe:	e004      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005500:	bf00      	nop
 8005502:	e002      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005504:	58024400 	.word	0x58024400
      break;
 8005508:	bf00      	nop
    }

    if(ret == HAL_OK)
 800550a:	7dfb      	ldrb	r3, [r7, #23]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005510:	4b99      	ldr	r3, [pc, #612]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005514:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800551e:	4996      	ldr	r1, [pc, #600]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005520:	4313      	orrs	r3, r2
 8005522:	658b      	str	r3, [r1, #88]	; 0x58
 8005524:	e001      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005526:	7dfb      	ldrb	r3, [r7, #23]
 8005528:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d032      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800553a:	2b30      	cmp	r3, #48	; 0x30
 800553c:	d01c      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800553e:	2b30      	cmp	r3, #48	; 0x30
 8005540:	d817      	bhi.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005542:	2b20      	cmp	r3, #32
 8005544:	d00c      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005546:	2b20      	cmp	r3, #32
 8005548:	d813      	bhi.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800554a:	2b00      	cmp	r3, #0
 800554c:	d016      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800554e:	2b10      	cmp	r3, #16
 8005550:	d10f      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005552:	4b89      	ldr	r3, [pc, #548]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005556:	4a88      	ldr	r2, [pc, #544]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800555c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800555e:	e00e      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3304      	adds	r3, #4
 8005564:	2102      	movs	r1, #2
 8005566:	4618      	mov	r0, r3
 8005568:	f001 fe8a 	bl	8007280 <RCCEx_PLL2_Config>
 800556c:	4603      	mov	r3, r0
 800556e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005570:	e005      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	75fb      	strb	r3, [r7, #23]
      break;
 8005576:	e002      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005578:	bf00      	nop
 800557a:	e000      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800557c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800557e:	7dfb      	ldrb	r3, [r7, #23]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d109      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005584:	4b7c      	ldr	r3, [pc, #496]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005588:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005590:	4979      	ldr	r1, [pc, #484]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005592:	4313      	orrs	r3, r2
 8005594:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005596:	e001      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005598:	7dfb      	ldrb	r3, [r7, #23]
 800559a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d047      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055b0:	d030      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80055b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055b6:	d82a      	bhi.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80055b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055bc:	d02c      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80055be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055c2:	d824      	bhi.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80055c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c8:	d018      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80055ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ce:	d81e      	bhi.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80055d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d8:	d007      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80055da:	e018      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055dc:	4b66      	ldr	r3, [pc, #408]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	4a65      	ldr	r2, [pc, #404]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80055e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80055e8:	e017      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3304      	adds	r3, #4
 80055ee:	2100      	movs	r1, #0
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 fe45 	bl	8007280 <RCCEx_PLL2_Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80055fa:	e00e      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3324      	adds	r3, #36	; 0x24
 8005600:	2100      	movs	r1, #0
 8005602:	4618      	mov	r0, r3
 8005604:	f001 feee 	bl	80073e4 <RCCEx_PLL3_Config>
 8005608:	4603      	mov	r3, r0
 800560a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800560c:	e005      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	75fb      	strb	r3, [r7, #23]
      break;
 8005612:	e002      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005614:	bf00      	nop
 8005616:	e000      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d109      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005620:	4b55      	ldr	r3, [pc, #340]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005624:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800562c:	4952      	ldr	r1, [pc, #328]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800562e:	4313      	orrs	r3, r2
 8005630:	650b      	str	r3, [r1, #80]	; 0x50
 8005632:	e001      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005634:	7dfb      	ldrb	r3, [r7, #23]
 8005636:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d049      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800564c:	d02e      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800564e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005652:	d828      	bhi.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005654:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005658:	d02a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800565a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800565e:	d822      	bhi.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005660:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005664:	d026      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005666:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800566a:	d81c      	bhi.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800566c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005670:	d010      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005676:	d816      	bhi.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005678:	2b00      	cmp	r3, #0
 800567a:	d01d      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800567c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005680:	d111      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3304      	adds	r3, #4
 8005686:	2101      	movs	r1, #1
 8005688:	4618      	mov	r0, r3
 800568a:	f001 fdf9 	bl	8007280 <RCCEx_PLL2_Config>
 800568e:	4603      	mov	r3, r0
 8005690:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005692:	e012      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3324      	adds	r3, #36	; 0x24
 8005698:	2101      	movs	r1, #1
 800569a:	4618      	mov	r0, r3
 800569c:	f001 fea2 	bl	80073e4 <RCCEx_PLL3_Config>
 80056a0:	4603      	mov	r3, r0
 80056a2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80056a4:	e009      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	75fb      	strb	r3, [r7, #23]
      break;
 80056aa:	e006      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80056ac:	bf00      	nop
 80056ae:	e004      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80056b0:	bf00      	nop
 80056b2:	e002      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80056b4:	bf00      	nop
 80056b6:	e000      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80056b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d109      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80056c0:	4b2d      	ldr	r3, [pc, #180]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056cc:	492a      	ldr	r1, [pc, #168]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	650b      	str	r3, [r1, #80]	; 0x50
 80056d2:	e001      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
 80056d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d04d      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80056ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056ee:	d02e      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80056f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056f4:	d828      	bhi.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80056f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fa:	d02a      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80056fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005700:	d822      	bhi.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005702:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005706:	d026      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005708:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800570c:	d81c      	bhi.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800570e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005712:	d010      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005718:	d816      	bhi.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800571a:	2b00      	cmp	r3, #0
 800571c:	d01d      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800571e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005722:	d111      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3304      	adds	r3, #4
 8005728:	2101      	movs	r1, #1
 800572a:	4618      	mov	r0, r3
 800572c:	f001 fda8 	bl	8007280 <RCCEx_PLL2_Config>
 8005730:	4603      	mov	r3, r0
 8005732:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005734:	e012      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3324      	adds	r3, #36	; 0x24
 800573a:	2101      	movs	r1, #1
 800573c:	4618      	mov	r0, r3
 800573e:	f001 fe51 	bl	80073e4 <RCCEx_PLL3_Config>
 8005742:	4603      	mov	r3, r0
 8005744:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005746:	e009      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	75fb      	strb	r3, [r7, #23]
      break;
 800574c:	e006      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800574e:	bf00      	nop
 8005750:	e004      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005752:	bf00      	nop
 8005754:	e002      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005756:	bf00      	nop
 8005758:	e000      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800575a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800575c:	7dfb      	ldrb	r3, [r7, #23]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10c      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005762:	4b05      	ldr	r3, [pc, #20]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005766:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005770:	4901      	ldr	r1, [pc, #4]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005772:	4313      	orrs	r3, r2
 8005774:	658b      	str	r3, [r1, #88]	; 0x58
 8005776:	e003      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005778:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577c:	7dfb      	ldrb	r3, [r7, #23]
 800577e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d02f      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005794:	d00e      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800579a:	d814      	bhi.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d015      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80057a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057a4:	d10f      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a6:	4baf      	ldr	r3, [pc, #700]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	4aae      	ldr	r2, [pc, #696]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80057b2:	e00c      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3304      	adds	r3, #4
 80057b8:	2101      	movs	r1, #1
 80057ba:	4618      	mov	r0, r3
 80057bc:	f001 fd60 	bl	8007280 <RCCEx_PLL2_Config>
 80057c0:	4603      	mov	r3, r0
 80057c2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80057c4:	e003      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	75fb      	strb	r3, [r7, #23]
      break;
 80057ca:	e000      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80057cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d109      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80057d4:	4ba3      	ldr	r3, [pc, #652]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e0:	49a0      	ldr	r1, [pc, #640]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	650b      	str	r3, [r1, #80]	; 0x50
 80057e6:	e001      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
 80057ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d032      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d81b      	bhi.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005800:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	0800583f 	.word	0x0800583f
 800580c:	08005819 	.word	0x08005819
 8005810:	08005827 	.word	0x08005827
 8005814:	0800583f 	.word	0x0800583f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005818:	4b92      	ldr	r3, [pc, #584]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	4a91      	ldr	r2, [pc, #580]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800581e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005824:	e00c      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	3304      	adds	r3, #4
 800582a:	2102      	movs	r1, #2
 800582c:	4618      	mov	r0, r3
 800582e:	f001 fd27 	bl	8007280 <RCCEx_PLL2_Config>
 8005832:	4603      	mov	r3, r0
 8005834:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005836:	e003      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	75fb      	strb	r3, [r7, #23]
      break;
 800583c:	e000      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800583e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005840:	7dfb      	ldrb	r3, [r7, #23]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d109      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005846:	4b87      	ldr	r3, [pc, #540]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584a:	f023 0203 	bic.w	r2, r3, #3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	4984      	ldr	r1, [pc, #528]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005854:	4313      	orrs	r3, r2
 8005856:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005858:	e001      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800585a:	7dfb      	ldrb	r3, [r7, #23]
 800585c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 8086 	beq.w	8005978 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800586c:	4b7e      	ldr	r3, [pc, #504]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a7d      	ldr	r2, [pc, #500]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005876:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005878:	f7fb ffb0 	bl	80017dc <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800587e:	e009      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005880:	f7fb ffac 	bl	80017dc <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b64      	cmp	r3, #100	; 0x64
 800588c:	d902      	bls.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	75fb      	strb	r3, [r7, #23]
        break;
 8005892:	e005      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005894:	4b74      	ldr	r3, [pc, #464]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0ef      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80058a0:	7dfb      	ldrb	r3, [r7, #23]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d166      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80058a6:	4b6f      	ldr	r3, [pc, #444]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058b0:	4053      	eors	r3, r2
 80058b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d013      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058ba:	4b6a      	ldr	r3, [pc, #424]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058c4:	4b67      	ldr	r3, [pc, #412]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c8:	4a66      	ldr	r2, [pc, #408]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ce:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058d0:	4b64      	ldr	r3, [pc, #400]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d4:	4a63      	ldr	r2, [pc, #396]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058da:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80058dc:	4a61      	ldr	r2, [pc, #388]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ec:	d115      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ee:	f7fb ff75 	bl	80017dc <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058f4:	e00b      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058f6:	f7fb ff71 	bl	80017dc <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	f241 3288 	movw	r2, #5000	; 0x1388
 8005904:	4293      	cmp	r3, r2
 8005906:	d902      	bls.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	75fb      	strb	r3, [r7, #23]
            break;
 800590c:	e005      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800590e:	4b55      	ldr	r3, [pc, #340]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0ed      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800591a:	7dfb      	ldrb	r3, [r7, #23]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d126      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800592e:	d10d      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005930:	4b4c      	ldr	r3, [pc, #304]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800593e:	0919      	lsrs	r1, r3, #4
 8005940:	4b4a      	ldr	r3, [pc, #296]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005942:	400b      	ands	r3, r1
 8005944:	4947      	ldr	r1, [pc, #284]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005946:	4313      	orrs	r3, r2
 8005948:	610b      	str	r3, [r1, #16]
 800594a:	e005      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800594c:	4b45      	ldr	r3, [pc, #276]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	4a44      	ldr	r2, [pc, #272]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005952:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005956:	6113      	str	r3, [r2, #16]
 8005958:	4b42      	ldr	r3, [pc, #264]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800595a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005966:	493f      	ldr	r1, [pc, #252]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005968:	4313      	orrs	r3, r2
 800596a:	670b      	str	r3, [r1, #112]	; 0x70
 800596c:	e004      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800596e:	7dfb      	ldrb	r3, [r7, #23]
 8005970:	75bb      	strb	r3, [r7, #22]
 8005972:	e001      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005974:	7dfb      	ldrb	r3, [r7, #23]
 8005976:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 8085 	beq.w	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800598a:	2b28      	cmp	r3, #40	; 0x28
 800598c:	d866      	bhi.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800598e:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	08005a71 	.word	0x08005a71
 8005998:	08005a5d 	.word	0x08005a5d
 800599c:	08005a5d 	.word	0x08005a5d
 80059a0:	08005a5d 	.word	0x08005a5d
 80059a4:	08005a5d 	.word	0x08005a5d
 80059a8:	08005a5d 	.word	0x08005a5d
 80059ac:	08005a5d 	.word	0x08005a5d
 80059b0:	08005a5d 	.word	0x08005a5d
 80059b4:	08005a39 	.word	0x08005a39
 80059b8:	08005a5d 	.word	0x08005a5d
 80059bc:	08005a5d 	.word	0x08005a5d
 80059c0:	08005a5d 	.word	0x08005a5d
 80059c4:	08005a5d 	.word	0x08005a5d
 80059c8:	08005a5d 	.word	0x08005a5d
 80059cc:	08005a5d 	.word	0x08005a5d
 80059d0:	08005a5d 	.word	0x08005a5d
 80059d4:	08005a4b 	.word	0x08005a4b
 80059d8:	08005a5d 	.word	0x08005a5d
 80059dc:	08005a5d 	.word	0x08005a5d
 80059e0:	08005a5d 	.word	0x08005a5d
 80059e4:	08005a5d 	.word	0x08005a5d
 80059e8:	08005a5d 	.word	0x08005a5d
 80059ec:	08005a5d 	.word	0x08005a5d
 80059f0:	08005a5d 	.word	0x08005a5d
 80059f4:	08005a71 	.word	0x08005a71
 80059f8:	08005a5d 	.word	0x08005a5d
 80059fc:	08005a5d 	.word	0x08005a5d
 8005a00:	08005a5d 	.word	0x08005a5d
 8005a04:	08005a5d 	.word	0x08005a5d
 8005a08:	08005a5d 	.word	0x08005a5d
 8005a0c:	08005a5d 	.word	0x08005a5d
 8005a10:	08005a5d 	.word	0x08005a5d
 8005a14:	08005a71 	.word	0x08005a71
 8005a18:	08005a5d 	.word	0x08005a5d
 8005a1c:	08005a5d 	.word	0x08005a5d
 8005a20:	08005a5d 	.word	0x08005a5d
 8005a24:	08005a5d 	.word	0x08005a5d
 8005a28:	08005a5d 	.word	0x08005a5d
 8005a2c:	08005a5d 	.word	0x08005a5d
 8005a30:	08005a5d 	.word	0x08005a5d
 8005a34:	08005a71 	.word	0x08005a71
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f001 fc1e 	bl	8007280 <RCCEx_PLL2_Config>
 8005a44:	4603      	mov	r3, r0
 8005a46:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005a48:	e013      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3324      	adds	r3, #36	; 0x24
 8005a4e:	2101      	movs	r1, #1
 8005a50:	4618      	mov	r0, r3
 8005a52:	f001 fcc7 	bl	80073e4 <RCCEx_PLL3_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005a5a:	e00a      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a60:	e007      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005a62:	bf00      	nop
 8005a64:	58024400 	.word	0x58024400
 8005a68:	58024800 	.word	0x58024800
 8005a6c:	00ffffcf 	.word	0x00ffffcf
      break;
 8005a70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a72:	7dfb      	ldrb	r3, [r7, #23]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d109      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a78:	4b96      	ldr	r3, [pc, #600]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a84:	4993      	ldr	r1, [pc, #588]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	654b      	str	r3, [r1, #84]	; 0x54
 8005a8a:	e001      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d038      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aa0:	2b05      	cmp	r3, #5
 8005aa2:	d821      	bhi.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005aa4:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005aef 	.word	0x08005aef
 8005ab0:	08005ac5 	.word	0x08005ac5
 8005ab4:	08005ad7 	.word	0x08005ad7
 8005ab8:	08005aef 	.word	0x08005aef
 8005abc:	08005aef 	.word	0x08005aef
 8005ac0:	08005aef 	.word	0x08005aef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	2101      	movs	r1, #1
 8005aca:	4618      	mov	r0, r3
 8005acc:	f001 fbd8 	bl	8007280 <RCCEx_PLL2_Config>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005ad4:	e00c      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3324      	adds	r3, #36	; 0x24
 8005ada:	2101      	movs	r1, #1
 8005adc:	4618      	mov	r0, r3
 8005ade:	f001 fc81 	bl	80073e4 <RCCEx_PLL3_Config>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005ae6:	e003      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	75fb      	strb	r3, [r7, #23]
      break;
 8005aec:	e000      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005aee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d109      	bne.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005af6:	4b77      	ldr	r3, [pc, #476]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afa:	f023 0207 	bic.w	r2, r3, #7
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b02:	4974      	ldr	r1, [pc, #464]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	654b      	str	r3, [r1, #84]	; 0x54
 8005b08:	e001      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
 8005b0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0304 	and.w	r3, r3, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d03a      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b20:	2b05      	cmp	r3, #5
 8005b22:	d821      	bhi.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005b24:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2a:	bf00      	nop
 8005b2c:	08005b6f 	.word	0x08005b6f
 8005b30:	08005b45 	.word	0x08005b45
 8005b34:	08005b57 	.word	0x08005b57
 8005b38:	08005b6f 	.word	0x08005b6f
 8005b3c:	08005b6f 	.word	0x08005b6f
 8005b40:	08005b6f 	.word	0x08005b6f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3304      	adds	r3, #4
 8005b48:	2101      	movs	r1, #1
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f001 fb98 	bl	8007280 <RCCEx_PLL2_Config>
 8005b50:	4603      	mov	r3, r0
 8005b52:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005b54:	e00c      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3324      	adds	r3, #36	; 0x24
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f001 fc41 	bl	80073e4 <RCCEx_PLL3_Config>
 8005b62:	4603      	mov	r3, r0
 8005b64:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005b66:	e003      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b6c:	e000      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005b6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10a      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b76:	4b57      	ldr	r3, [pc, #348]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7a:	f023 0207 	bic.w	r2, r3, #7
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b84:	4953      	ldr	r1, [pc, #332]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	658b      	str	r3, [r1, #88]	; 0x58
 8005b8a:	e001      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
 8005b8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d04b      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ba6:	d02e      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bac:	d828      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb2:	d02a      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb8:	d822      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005bba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bbe:	d026      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005bc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bc4:	d81c      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bca:	d010      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bd0:	d816      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d01d      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bda:	d111      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3304      	adds	r3, #4
 8005be0:	2100      	movs	r1, #0
 8005be2:	4618      	mov	r0, r3
 8005be4:	f001 fb4c 	bl	8007280 <RCCEx_PLL2_Config>
 8005be8:	4603      	mov	r3, r0
 8005bea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005bec:	e012      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	3324      	adds	r3, #36	; 0x24
 8005bf2:	2102      	movs	r1, #2
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f001 fbf5 	bl	80073e4 <RCCEx_PLL3_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005bfe:	e009      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	75fb      	strb	r3, [r7, #23]
      break;
 8005c04:	e006      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005c06:	bf00      	nop
 8005c08:	e004      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005c0a:	bf00      	nop
 8005c0c:	e002      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005c0e:	bf00      	nop
 8005c10:	e000      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005c12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10a      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c1a:	4b2e      	ldr	r3, [pc, #184]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c28:	492a      	ldr	r1, [pc, #168]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	654b      	str	r3, [r1, #84]	; 0x54
 8005c2e:	e001      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c30:	7dfb      	ldrb	r3, [r7, #23]
 8005c32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d04d      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c4a:	d02e      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005c4c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c50:	d828      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c56:	d02a      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c5c:	d822      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005c5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c62:	d026      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005c64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c68:	d81c      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c6e:	d010      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c74:	d816      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d01d      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c7e:	d111      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3304      	adds	r3, #4
 8005c84:	2100      	movs	r1, #0
 8005c86:	4618      	mov	r0, r3
 8005c88:	f001 fafa 	bl	8007280 <RCCEx_PLL2_Config>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005c90:	e012      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3324      	adds	r3, #36	; 0x24
 8005c96:	2102      	movs	r1, #2
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f001 fba3 	bl	80073e4 <RCCEx_PLL3_Config>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005ca2:	e009      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca8:	e006      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005caa:	bf00      	nop
 8005cac:	e004      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005cae:	bf00      	nop
 8005cb0:	e002      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005cb2:	bf00      	nop
 8005cb4:	e000      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cb8:	7dfb      	ldrb	r3, [r7, #23]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10c      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cbe:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ccc:	4901      	ldr	r1, [pc, #4]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	658b      	str	r3, [r1, #88]	; 0x58
 8005cd2:	e003      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005cd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d04b      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005cf2:	d02e      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005cf4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005cf8:	d828      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cfe:	d02a      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d04:	d822      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005d06:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d0a:	d026      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005d0c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d10:	d81c      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d16:	d010      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d1c:	d816      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d01d      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d26:	d111      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 faa6 	bl	8007280 <RCCEx_PLL2_Config>
 8005d34:	4603      	mov	r3, r0
 8005d36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005d38:	e012      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	3324      	adds	r3, #36	; 0x24
 8005d3e:	2102      	movs	r1, #2
 8005d40:	4618      	mov	r0, r3
 8005d42:	f001 fb4f 	bl	80073e4 <RCCEx_PLL3_Config>
 8005d46:	4603      	mov	r3, r0
 8005d48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005d4a:	e009      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d50:	e006      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005d52:	bf00      	nop
 8005d54:	e004      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005d56:	bf00      	nop
 8005d58:	e002      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005d5a:	bf00      	nop
 8005d5c:	e000      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d60:	7dfb      	ldrb	r3, [r7, #23]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10a      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005d66:	4b9d      	ldr	r3, [pc, #628]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d74:	4999      	ldr	r1, [pc, #612]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	658b      	str	r3, [r1, #88]	; 0x58
 8005d7a:	e001      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7c:	7dfb      	ldrb	r3, [r7, #23]
 8005d7e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01a      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d96:	d10a      	bne.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3324      	adds	r3, #36	; 0x24
 8005d9c:	2102      	movs	r1, #2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 fb20 	bl	80073e4 <RCCEx_PLL3_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005dae:	4b8b      	ldr	r3, [pc, #556]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dbc:	4987      	ldr	r1, [pc, #540]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0310 	and.w	r3, r3, #16
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d01a      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd8:	d10a      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3324      	adds	r3, #36	; 0x24
 8005dde:	2102      	movs	r1, #2
 8005de0:	4618      	mov	r0, r3
 8005de2:	f001 faff 	bl	80073e4 <RCCEx_PLL3_Config>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005df0:	4b7a      	ldr	r3, [pc, #488]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dfe:	4977      	ldr	r1, [pc, #476]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d034      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e1a:	d01d      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005e1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e20:	d817      	bhi.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e2a:	d009      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005e2c:	e011      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3304      	adds	r3, #4
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f001 fa23 	bl	8007280 <RCCEx_PLL2_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005e3e:	e00c      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3324      	adds	r3, #36	; 0x24
 8005e44:	2102      	movs	r1, #2
 8005e46:	4618      	mov	r0, r3
 8005e48:	f001 facc 	bl	80073e4 <RCCEx_PLL3_Config>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005e50:	e003      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	75fb      	strb	r3, [r7, #23]
      break;
 8005e56:	e000      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005e58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e60:	4b5e      	ldr	r3, [pc, #376]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e6e:	495b      	ldr	r1, [pc, #364]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	658b      	str	r3, [r1, #88]	; 0x58
 8005e74:	e001      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d033      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e90:	d01c      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005e92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e96:	d816      	bhi.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e9c:	d003      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005e9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ea2:	d007      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005ea4:	e00f      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ea6:	4b4d      	ldr	r3, [pc, #308]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eaa:	4a4c      	ldr	r2, [pc, #304]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005eb2:	e00c      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3324      	adds	r3, #36	; 0x24
 8005eb8:	2101      	movs	r1, #1
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f001 fa92 	bl	80073e4 <RCCEx_PLL3_Config>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005ec4:	e003      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8005eca:	e000      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10a      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ed4:	4b41      	ldr	r3, [pc, #260]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ee2:	493e      	ldr	r1, [pc, #248]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	654b      	str	r3, [r1, #84]	; 0x54
 8005ee8:	e001      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
 8005eec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d029      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f06:	d007      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005f08:	e00f      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f0a:	4b34      	ldr	r3, [pc, #208]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	4a33      	ldr	r2, [pc, #204]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005f16:	e00b      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	2102      	movs	r1, #2
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f001 f9ae 	bl	8007280 <RCCEx_PLL2_Config>
 8005f24:	4603      	mov	r3, r0
 8005f26:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005f28:	e002      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d109      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005f36:	4b29      	ldr	r3, [pc, #164]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f42:	4926      	ldr	r1, [pc, #152]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f48:	e001      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
 8005f4c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3324      	adds	r3, #36	; 0x24
 8005f5e:	2102      	movs	r1, #2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 fa3f 	bl	80073e4 <RCCEx_PLL3_Config>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d033      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f84:	d017      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f8a:	d811      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f90:	d013      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f96:	d80b      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d010      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa0:	d106      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fa2:	4b0e      	ldr	r3, [pc, #56]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	4a0d      	ldr	r2, [pc, #52]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005fae:	e007      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fb4:	e004      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005fb6:	bf00      	nop
 8005fb8:	e002      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005fba:	bf00      	nop
 8005fbc:	e000      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10c      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fc6:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fd2:	4902      	ldr	r1, [pc, #8]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	654b      	str	r3, [r1, #84]	; 0x54
 8005fd8:	e004      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005fda:	bf00      	nop
 8005fdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe0:	7dfb      	ldrb	r3, [r7, #23]
 8005fe2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d008      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ff0:	4b31      	ldr	r3, [pc, #196]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffc:	492e      	ldr	r1, [pc, #184]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d009      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800600e:	4b2a      	ldr	r3, [pc, #168]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800601c:	4926      	ldr	r1, [pc, #152]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800601e:	4313      	orrs	r3, r2
 8006020:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d008      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800602e:	4b22      	ldr	r3, [pc, #136]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006032:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800603a:	491f      	ldr	r1, [pc, #124]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800603c:	4313      	orrs	r3, r2
 800603e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00d      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800604c:	4b1a      	ldr	r3, [pc, #104]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	4a19      	ldr	r2, [pc, #100]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006052:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006056:	6113      	str	r3, [r2, #16]
 8006058:	4b17      	ldr	r3, [pc, #92]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800605a:	691a      	ldr	r2, [r3, #16]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006062:	4915      	ldr	r1, [pc, #84]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006064:	4313      	orrs	r3, r2
 8006066:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	da08      	bge.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006070:	4b11      	ldr	r3, [pc, #68]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006074:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607c:	490e      	ldr	r1, [pc, #56]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800607e:	4313      	orrs	r3, r2
 8006080:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d009      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800608e:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006092:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609c:	4906      	ldr	r1, [pc, #24]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80060a2:	7dbb      	ldrb	r3, [r7, #22]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	e000      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	58024400 	.word	0x58024400

080060bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b090      	sub	sp, #64	; 0x40
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ca:	f040 8095 	bne.w	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80060ce:	4b97      	ldr	r3, [pc, #604]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80060d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060da:	2b04      	cmp	r3, #4
 80060dc:	f200 8088 	bhi.w	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80060e0:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80060e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e6:	bf00      	nop
 80060e8:	080060fd 	.word	0x080060fd
 80060ec:	08006125 	.word	0x08006125
 80060f0:	0800614d 	.word	0x0800614d
 80060f4:	080061e9 	.word	0x080061e9
 80060f8:	08006175 	.word	0x08006175
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80060fc:	4b8b      	ldr	r3, [pc, #556]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006104:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006108:	d108      	bne.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800610a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800610e:	4618      	mov	r0, r3
 8006110:	f000 ff64 	bl	8006fdc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006118:	f000 bc94 	b.w	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006120:	f000 bc90 	b.w	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006124:	4b81      	ldr	r3, [pc, #516]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800612c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006130:	d108      	bne.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006132:	f107 0318 	add.w	r3, r7, #24
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fca8 	bl	8006a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006140:	f000 bc80 	b.w	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006144:	2300      	movs	r3, #0
 8006146:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006148:	f000 bc7c 	b.w	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800614c:	4b77      	ldr	r3, [pc, #476]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006158:	d108      	bne.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800615a:	f107 030c 	add.w	r3, r7, #12
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fde8 	bl	8006d34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006168:	f000 bc6c 	b.w	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006170:	f000 bc68 	b.w	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006174:	4b6d      	ldr	r3, [pc, #436]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006178:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800617c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800617e:	4b6b      	ldr	r3, [pc, #428]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b04      	cmp	r3, #4
 8006188:	d10c      	bne.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800618a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618c:	2b00      	cmp	r3, #0
 800618e:	d109      	bne.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006190:	4b66      	ldr	r3, [pc, #408]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	08db      	lsrs	r3, r3, #3
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	4a65      	ldr	r2, [pc, #404]	; (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800619c:	fa22 f303 	lsr.w	r3, r2, r3
 80061a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061a2:	e01f      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80061a4:	4b61      	ldr	r3, [pc, #388]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b0:	d106      	bne.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80061b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061b8:	d102      	bne.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80061ba:	4b5e      	ldr	r3, [pc, #376]	; (8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80061bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061be:	e011      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80061c0:	4b5a      	ldr	r3, [pc, #360]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061cc:	d106      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80061ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061d4:	d102      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80061d6:	4b58      	ldr	r3, [pc, #352]	; (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80061d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061da:	e003      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80061e0:	f000 bc30 	b.w	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80061e4:	f000 bc2e 	b.w	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80061e8:	4b54      	ldr	r3, [pc, #336]	; (800633c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061ec:	f000 bc2a 	b.w	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061f4:	f000 bc26 	b.w	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061fe:	f040 809f 	bne.w	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006202:	4b4a      	ldr	r3, [pc, #296]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006206:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800620a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006212:	d04d      	beq.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621a:	f200 8084 	bhi.w	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	2bc0      	cmp	r3, #192	; 0xc0
 8006222:	d07d      	beq.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	2bc0      	cmp	r3, #192	; 0xc0
 8006228:	d87d      	bhi.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	2b80      	cmp	r3, #128	; 0x80
 800622e:	d02d      	beq.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	2b80      	cmp	r3, #128	; 0x80
 8006234:	d877      	bhi.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	2b40      	cmp	r3, #64	; 0x40
 8006240:	d012      	beq.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8006242:	e070      	b.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006244:	4b39      	ldr	r3, [pc, #228]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006250:	d107      	bne.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fec0 	bl	8006fdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006260:	e3f0      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006262:	2300      	movs	r3, #0
 8006264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006266:	e3ed      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006268:	4b30      	ldr	r3, [pc, #192]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006274:	d107      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006276:	f107 0318 	add.w	r3, r7, #24
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fc06 	bl	8006a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006284:	e3de      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800628a:	e3db      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800628c:	4b27      	ldr	r3, [pc, #156]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006298:	d107      	bne.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800629a:	f107 030c 	add.w	r3, r7, #12
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fd48 	bl	8006d34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80062a8:	e3cc      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062ae:	e3c9      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80062b0:	4b1e      	ldr	r3, [pc, #120]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062b8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062ba:	4b1c      	ldr	r3, [pc, #112]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0304 	and.w	r3, r3, #4
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d10c      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80062c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d109      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062cc:	4b17      	ldr	r3, [pc, #92]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	08db      	lsrs	r3, r3, #3
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	4a16      	ldr	r2, [pc, #88]	; (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80062d8:	fa22 f303 	lsr.w	r3, r2, r3
 80062dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062de:	e01e      	b.n	800631e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062e0:	4b12      	ldr	r3, [pc, #72]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ec:	d106      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80062ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062f4:	d102      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80062f6:	4b0f      	ldr	r3, [pc, #60]	; (8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80062f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062fa:	e010      	b.n	800631e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062fc:	4b0b      	ldr	r3, [pc, #44]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006304:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006308:	d106      	bne.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800630a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006310:	d102      	bne.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006312:	4b09      	ldr	r3, [pc, #36]	; (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006316:	e002      	b.n	800631e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006318:	2300      	movs	r3, #0
 800631a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800631c:	e392      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800631e:	e391      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006320:	4b06      	ldr	r3, [pc, #24]	; (800633c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006322:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006324:	e38e      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800632a:	e38b      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800632c:	58024400 	.word	0x58024400
 8006330:	03d09000 	.word	0x03d09000
 8006334:	003d0900 	.word	0x003d0900
 8006338:	007a1200 	.word	0x007a1200
 800633c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006346:	f040 809c 	bne.w	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800634a:	4b9d      	ldr	r3, [pc, #628]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800634c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006352:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800635a:	d054      	beq.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006362:	f200 808b 	bhi.w	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800636c:	f000 8083 	beq.w	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006376:	f200 8081 	bhi.w	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006380:	d02f      	beq.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006388:	d878      	bhi.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	2b00      	cmp	r3, #0
 800638e:	d004      	beq.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006396:	d012      	beq.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8006398:	e070      	b.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800639a:	4b89      	ldr	r3, [pc, #548]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063a6:	d107      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 fe15 	bl	8006fdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80063b6:	e345      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063bc:	e342      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063be:	4b80      	ldr	r3, [pc, #512]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ca:	d107      	bne.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063cc:	f107 0318 	add.w	r3, r7, #24
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fb5b 	bl	8006a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80063da:	e333      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063e0:	e330      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063e2:	4b77      	ldr	r3, [pc, #476]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063ee:	d107      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063f0:	f107 030c 	add.w	r3, r7, #12
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 fc9d 	bl	8006d34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80063fe:	e321      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006400:	2300      	movs	r3, #0
 8006402:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006404:	e31e      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006406:	4b6e      	ldr	r3, [pc, #440]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800640a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800640e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006410:	4b6b      	ldr	r3, [pc, #428]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b04      	cmp	r3, #4
 800641a:	d10c      	bne.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800641c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641e:	2b00      	cmp	r3, #0
 8006420:	d109      	bne.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006422:	4b67      	ldr	r3, [pc, #412]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	08db      	lsrs	r3, r3, #3
 8006428:	f003 0303 	and.w	r3, r3, #3
 800642c:	4a65      	ldr	r2, [pc, #404]	; (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800642e:	fa22 f303 	lsr.w	r3, r2, r3
 8006432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006434:	e01e      	b.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006436:	4b62      	ldr	r3, [pc, #392]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006442:	d106      	bne.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800644a:	d102      	bne.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800644c:	4b5e      	ldr	r3, [pc, #376]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800644e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006450:	e010      	b.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006452:	4b5b      	ldr	r3, [pc, #364]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800645e:	d106      	bne.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006466:	d102      	bne.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006468:	4b58      	ldr	r3, [pc, #352]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800646a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800646c:	e002      	b.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800646e:	2300      	movs	r3, #0
 8006470:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006472:	e2e7      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006474:	e2e6      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006476:	4b56      	ldr	r3, [pc, #344]	; (80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006478:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800647a:	e2e3      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800647c:	2300      	movs	r3, #0
 800647e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006480:	e2e0      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006488:	f040 80a7 	bne.w	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800648c:	4b4c      	ldr	r3, [pc, #304]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800648e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006490:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006494:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800649c:	d055      	beq.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064a4:	f200 8096 	bhi.w	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064ae:	f000 8084 	beq.w	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064b8:	f200 808c 	bhi.w	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064c2:	d030      	beq.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064ca:	f200 8083 	bhi.w	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d004      	beq.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80064d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064da:	d012      	beq.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80064dc:	e07a      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064de:	4b38      	ldr	r3, [pc, #224]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064ea:	d107      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 fd73 	bl	8006fdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80064fa:	e2a3      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006500:	e2a0      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006502:	4b2f      	ldr	r3, [pc, #188]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800650a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800650e:	d107      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006510:	f107 0318 	add.w	r3, r7, #24
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fab9 	bl	8006a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800651e:	e291      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006524:	e28e      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006526:	4b26      	ldr	r3, [pc, #152]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800652e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006532:	d107      	bne.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006534:	f107 030c 	add.w	r3, r7, #12
 8006538:	4618      	mov	r0, r3
 800653a:	f000 fbfb 	bl	8006d34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006542:	e27f      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006544:	2300      	movs	r3, #0
 8006546:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006548:	e27c      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800654a:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800654c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006552:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006554:	4b1a      	ldr	r3, [pc, #104]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b04      	cmp	r3, #4
 800655e:	d10c      	bne.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006562:	2b00      	cmp	r3, #0
 8006564:	d109      	bne.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006566:	4b16      	ldr	r3, [pc, #88]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	08db      	lsrs	r3, r3, #3
 800656c:	f003 0303 	and.w	r3, r3, #3
 8006570:	4a14      	ldr	r2, [pc, #80]	; (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006572:	fa22 f303 	lsr.w	r3, r2, r3
 8006576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006578:	e01e      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800657a:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006586:	d106      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800658e:	d102      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006590:	4b0d      	ldr	r3, [pc, #52]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006594:	e010      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006596:	4b0a      	ldr	r3, [pc, #40]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800659e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065a2:	d106      	bne.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80065a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065aa:	d102      	bne.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80065ac:	4b07      	ldr	r3, [pc, #28]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80065ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b0:	e002      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80065b6:	e245      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80065b8:	e244      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80065ba:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80065bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065be:	e241      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80065c0:	58024400 	.word	0x58024400
 80065c4:	03d09000 	.word	0x03d09000
 80065c8:	003d0900 	.word	0x003d0900
 80065cc:	007a1200 	.word	0x007a1200
 80065d0:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80065d4:	2300      	movs	r3, #0
 80065d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065d8:	e234      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e0:	f040 809c 	bne.w	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80065e4:	4b9b      	ldr	r3, [pc, #620]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80065e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80065ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80065ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065f4:	d054      	beq.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80065f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065fc:	f200 808b 	bhi.w	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006602:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006606:	f000 8083 	beq.w	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006610:	f200 8081 	bhi.w	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800661a:	d02f      	beq.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800661c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006622:	d878      	bhi.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	2b00      	cmp	r3, #0
 8006628:	d004      	beq.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006630:	d012      	beq.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006632:	e070      	b.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006634:	4b87      	ldr	r3, [pc, #540]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006640:	d107      	bne.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006646:	4618      	mov	r0, r3
 8006648:	f000 fcc8 	bl	8006fdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006650:	e1f8      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006656:	e1f5      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006658:	4b7e      	ldr	r3, [pc, #504]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006664:	d107      	bne.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006666:	f107 0318 	add.w	r3, r7, #24
 800666a:	4618      	mov	r0, r3
 800666c:	f000 fa0e 	bl	8006a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006674:	e1e6      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006676:	2300      	movs	r3, #0
 8006678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800667a:	e1e3      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800667c:	4b75      	ldr	r3, [pc, #468]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006688:	d107      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800668a:	f107 030c 	add.w	r3, r7, #12
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fb50 	bl	8006d34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006698:	e1d4      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800669a:	2300      	movs	r3, #0
 800669c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800669e:	e1d1      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80066a0:	4b6c      	ldr	r3, [pc, #432]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80066a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066a8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066aa:	4b6a      	ldr	r3, [pc, #424]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0304 	and.w	r3, r3, #4
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d10c      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80066b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d109      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066bc:	4b65      	ldr	r3, [pc, #404]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	08db      	lsrs	r3, r3, #3
 80066c2:	f003 0303 	and.w	r3, r3, #3
 80066c6:	4a64      	ldr	r2, [pc, #400]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80066c8:	fa22 f303 	lsr.w	r3, r2, r3
 80066cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066ce:	e01e      	b.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066d0:	4b60      	ldr	r3, [pc, #384]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066dc:	d106      	bne.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80066de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066e4:	d102      	bne.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80066e6:	4b5d      	ldr	r3, [pc, #372]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80066e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066ea:	e010      	b.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066ec:	4b59      	ldr	r3, [pc, #356]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066f8:	d106      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80066fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006700:	d102      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006702:	4b57      	ldr	r3, [pc, #348]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006706:	e002      	b.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006708:	2300      	movs	r3, #0
 800670a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800670c:	e19a      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800670e:	e199      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006710:	4b54      	ldr	r3, [pc, #336]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006712:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006714:	e196      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006716:	2300      	movs	r3, #0
 8006718:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800671a:	e193      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006722:	d173      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006724:	4b4b      	ldr	r3, [pc, #300]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006728:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800672c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800672e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006730:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006734:	d02f      	beq.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800673c:	d863      	bhi.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	2b00      	cmp	r3, #0
 8006742:	d004      	beq.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800674a:	d012      	beq.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800674c:	e05b      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800674e:	4b41      	ldr	r3, [pc, #260]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800675a:	d107      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800675c:	f107 0318 	add.w	r3, r7, #24
 8006760:	4618      	mov	r0, r3
 8006762:	f000 f993 	bl	8006a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800676a:	e16b      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006770:	e168      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006772:	4b38      	ldr	r3, [pc, #224]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800677a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800677e:	d107      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006780:	f107 030c 	add.w	r3, r7, #12
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fad5 	bl	8006d34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800678e:	e159      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006790:	2300      	movs	r3, #0
 8006792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006794:	e156      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006796:	4b2f      	ldr	r3, [pc, #188]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800679e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067a0:	4b2c      	ldr	r3, [pc, #176]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d10c      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 80067ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d109      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067b2:	4b28      	ldr	r3, [pc, #160]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	08db      	lsrs	r3, r3, #3
 80067b8:	f003 0303 	and.w	r3, r3, #3
 80067bc:	4a26      	ldr	r2, [pc, #152]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80067be:	fa22 f303 	lsr.w	r3, r2, r3
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c4:	e01e      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067c6:	4b23      	ldr	r3, [pc, #140]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d2:	d106      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80067d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067da:	d102      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80067dc:	4b1f      	ldr	r3, [pc, #124]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80067de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067e0:	e010      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067e2:	4b1c      	ldr	r3, [pc, #112]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067ee:	d106      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80067f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f6:	d102      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80067f8:	4b19      	ldr	r3, [pc, #100]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80067fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067fc:	e002      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006802:	e11f      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006804:	e11e      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006806:	2300      	movs	r3, #0
 8006808:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800680a:	e11b      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006812:	d13e      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006814:	4b0f      	ldr	r3, [pc, #60]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800681c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800681e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006820:	2b00      	cmp	r3, #0
 8006822:	d004      	beq.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8006824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800682a:	d01d      	beq.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800682c:	e02e      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800682e:	4b09      	ldr	r3, [pc, #36]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006836:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800683a:	d107      	bne.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800683c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006840:	4618      	mov	r0, r3
 8006842:	f000 fbcb 	bl	8006fdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006848:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800684a:	e0fb      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800684c:	2300      	movs	r3, #0
 800684e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006850:	e0f8      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006852:	bf00      	nop
 8006854:	58024400 	.word	0x58024400
 8006858:	03d09000 	.word	0x03d09000
 800685c:	003d0900 	.word	0x003d0900
 8006860:	007a1200 	.word	0x007a1200
 8006864:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006868:	4b79      	ldr	r3, [pc, #484]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006870:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006874:	d107      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006876:	f107 0318 	add.w	r3, r7, #24
 800687a:	4618      	mov	r0, r3
 800687c:	f000 f906 	bl	8006a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006884:	e0de      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006886:	2300      	movs	r3, #0
 8006888:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800688a:	e0db      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006890:	e0d8      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006898:	f040 8085 	bne.w	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800689c:	4b6c      	ldr	r3, [pc, #432]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800689e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80068a4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80068a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068ac:	d06b      	beq.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068b4:	d874      	bhi.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068bc:	d056      	beq.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c4:	d86c      	bhi.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068cc:	d03b      	beq.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80068ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068d4:	d864      	bhi.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80068d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068dc:	d021      	beq.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80068de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068e4:	d85c      	bhi.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80068e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d004      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80068ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068f2:	d004      	beq.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80068f4:	e054      	b.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80068f6:	f000 f8b3 	bl	8006a60 <HAL_RCCEx_GetD3PCLK1Freq>
 80068fa:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80068fc:	e0a2      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068fe:	4b54      	ldr	r3, [pc, #336]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006906:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800690a:	d107      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800690c:	f107 0318 	add.w	r3, r7, #24
 8006910:	4618      	mov	r0, r3
 8006912:	f000 f8bb 	bl	8006a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800691a:	e093      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006920:	e090      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006922:	4b4b      	ldr	r3, [pc, #300]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800692a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800692e:	d107      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006930:	f107 030c 	add.w	r3, r7, #12
 8006934:	4618      	mov	r0, r3
 8006936:	f000 f9fd 	bl	8006d34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800693e:	e081      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006944:	e07e      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006946:	4b42      	ldr	r3, [pc, #264]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0304 	and.w	r3, r3, #4
 800694e:	2b04      	cmp	r3, #4
 8006950:	d109      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006952:	4b3f      	ldr	r3, [pc, #252]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	08db      	lsrs	r3, r3, #3
 8006958:	f003 0303 	and.w	r3, r3, #3
 800695c:	4a3d      	ldr	r2, [pc, #244]	; (8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800695e:	fa22 f303 	lsr.w	r3, r2, r3
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006964:	e06e      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800696a:	e06b      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800696c:	4b38      	ldr	r3, [pc, #224]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006978:	d102      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800697a:	4b37      	ldr	r3, [pc, #220]	; (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800697c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800697e:	e061      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006980:	2300      	movs	r3, #0
 8006982:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006984:	e05e      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006986:	4b32      	ldr	r3, [pc, #200]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006992:	d102      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8006994:	4b31      	ldr	r3, [pc, #196]	; (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006998:	e054      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800699e:	e051      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80069a0:	2300      	movs	r3, #0
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069a4:	e04e      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ac:	d148      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80069ae:	4b28      	ldr	r3, [pc, #160]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069b6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069be:	d02a      	beq.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80069c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c6:	d838      	bhi.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 80069c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d004      	beq.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80069ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069d4:	d00d      	beq.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80069d6:	e030      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80069d8:	4b1d      	ldr	r3, [pc, #116]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069e4:	d102      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 80069e6:	4b1d      	ldr	r3, [pc, #116]	; (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80069e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80069ea:	e02b      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069f0:	e028      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069f2:	4b17      	ldr	r3, [pc, #92]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069fe:	d107      	bne.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 fae9 	bl	8006fdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a0e:	e019      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a14:	e016      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a16:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a22:	d107      	bne.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a24:	f107 0318 	add.w	r3, r7, #24
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 f82f 	bl	8006a8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a32:	e007      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006a34:	2300      	movs	r3, #0
 8006a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a38:	e004      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a3e:	e001      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8006a40:	2300      	movs	r3, #0
 8006a42:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3740      	adds	r7, #64	; 0x40
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	58024400 	.word	0x58024400
 8006a54:	03d09000 	.word	0x03d09000
 8006a58:	003d0900 	.word	0x003d0900
 8006a5c:	007a1200 	.word	0x007a1200

08006a60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a64:	f7fe fb88 	bl	8005178 <HAL_RCC_GetHCLKFreq>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	091b      	lsrs	r3, r3, #4
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	4904      	ldr	r1, [pc, #16]	; (8006a88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a76:	5ccb      	ldrb	r3, [r1, r3]
 8006a78:	f003 031f 	and.w	r3, r3, #31
 8006a7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	58024400 	.word	0x58024400
 8006a88:	0800c034 	.word	0x0800c034

08006a8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b089      	sub	sp, #36	; 0x24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a94:	4ba1      	ldr	r3, [pc, #644]	; (8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a98:	f003 0303 	and.w	r3, r3, #3
 8006a9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006a9e:	4b9f      	ldr	r3, [pc, #636]	; (8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa2:	0b1b      	lsrs	r3, r3, #12
 8006aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006aa8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006aaa:	4b9c      	ldr	r3, [pc, #624]	; (8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aae:	091b      	lsrs	r3, r3, #4
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006ab6:	4b99      	ldr	r3, [pc, #612]	; (8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aba:	08db      	lsrs	r3, r3, #3
 8006abc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	fb02 f303 	mul.w	r3, r2, r3
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ace:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 8111 	beq.w	8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	f000 8083 	beq.w	8006be8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	f200 80a1 	bhi.w	8006c2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d056      	beq.n	8006ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006af6:	e099      	b.n	8006c2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006af8:	4b88      	ldr	r3, [pc, #544]	; (8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0320 	and.w	r3, r3, #32
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d02d      	beq.n	8006b60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b04:	4b85      	ldr	r3, [pc, #532]	; (8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	08db      	lsrs	r3, r3, #3
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	4a84      	ldr	r2, [pc, #528]	; (8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006b10:	fa22 f303 	lsr.w	r3, r2, r3
 8006b14:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	ee07 3a90 	vmov	s15, r3
 8006b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b2e:	4b7b      	ldr	r3, [pc, #492]	; (8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b5e:	e087      	b.n	8006c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b72:	4b6a      	ldr	r3, [pc, #424]	; (8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ba2:	e065      	b.n	8006c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	ee07 3a90 	vmov	s15, r3
 8006baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb6:	4b59      	ldr	r3, [pc, #356]	; (8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006be6:	e043      	b.n	8006c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfa:	4b48      	ldr	r3, [pc, #288]	; (8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c2a:	e021      	b.n	8006c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c3e:	4b37      	ldr	r3, [pc, #220]	; (8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c46:	ee07 3a90 	vmov	s15, r3
 8006c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006c70:	4b2a      	ldr	r3, [pc, #168]	; (8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	0a5b      	lsrs	r3, r3, #9
 8006c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c96:	ee17 2a90 	vmov	r2, s15
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006c9e:	4b1f      	ldr	r3, [pc, #124]	; (8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	0c1b      	lsrs	r3, r3, #16
 8006ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ca8:	ee07 3a90 	vmov	s15, r3
 8006cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cc4:	ee17 2a90 	vmov	r2, s15
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006ccc:	4b13      	ldr	r3, [pc, #76]	; (8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	0e1b      	lsrs	r3, r3, #24
 8006cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ce6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cf2:	ee17 2a90 	vmov	r2, s15
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006cfa:	e008      	b.n	8006d0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	609a      	str	r2, [r3, #8]
}
 8006d0e:	bf00      	nop
 8006d10:	3724      	adds	r7, #36	; 0x24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	58024400 	.word	0x58024400
 8006d20:	03d09000 	.word	0x03d09000
 8006d24:	46000000 	.word	0x46000000
 8006d28:	4c742400 	.word	0x4c742400
 8006d2c:	4a742400 	.word	0x4a742400
 8006d30:	4af42400 	.word	0x4af42400

08006d34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b089      	sub	sp, #36	; 0x24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d3c:	4ba1      	ldr	r3, [pc, #644]	; (8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d40:	f003 0303 	and.w	r3, r3, #3
 8006d44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006d46:	4b9f      	ldr	r3, [pc, #636]	; (8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4a:	0d1b      	lsrs	r3, r3, #20
 8006d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d52:	4b9c      	ldr	r3, [pc, #624]	; (8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d56:	0a1b      	lsrs	r3, r3, #8
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006d5e:	4b99      	ldr	r3, [pc, #612]	; (8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d62:	08db      	lsrs	r3, r3, #3
 8006d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	fb02 f303 	mul.w	r3, r2, r3
 8006d6e:	ee07 3a90 	vmov	s15, r3
 8006d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 8111 	beq.w	8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	f000 8083 	beq.w	8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	f200 80a1 	bhi.w	8006ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d056      	beq.n	8006e4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d9e:	e099      	b.n	8006ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006da0:	4b88      	ldr	r3, [pc, #544]	; (8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d02d      	beq.n	8006e08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dac:	4b85      	ldr	r3, [pc, #532]	; (8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	08db      	lsrs	r3, r3, #3
 8006db2:	f003 0303 	and.w	r3, r3, #3
 8006db6:	4a84      	ldr	r2, [pc, #528]	; (8006fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006db8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dbc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	ee07 3a90 	vmov	s15, r3
 8006dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dd6:	4b7b      	ldr	r3, [pc, #492]	; (8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dde:	ee07 3a90 	vmov	s15, r3
 8006de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e02:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e06:	e087      	b.n	8006f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	ee07 3a90 	vmov	s15, r3
 8006e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e1a:	4b6a      	ldr	r3, [pc, #424]	; (8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e4a:	e065      	b.n	8006f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e5e:	4b59      	ldr	r3, [pc, #356]	; (8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e66:	ee07 3a90 	vmov	s15, r3
 8006e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e72:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e8e:	e043      	b.n	8006f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ea2:	4b48      	ldr	r3, [pc, #288]	; (8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ece:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ed2:	e021      	b.n	8006f18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ede:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ee6:	4b37      	ldr	r3, [pc, #220]	; (8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006efa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006fcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006f18:	4b2a      	ldr	r3, [pc, #168]	; (8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1c:	0a5b      	lsrs	r3, r3, #9
 8006f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f3e:	ee17 2a90 	vmov	r2, s15
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006f46:	4b1f      	ldr	r3, [pc, #124]	; (8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	0c1b      	lsrs	r3, r3, #16
 8006f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f50:	ee07 3a90 	vmov	s15, r3
 8006f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f60:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f6c:	ee17 2a90 	vmov	r2, s15
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006f74:	4b13      	ldr	r3, [pc, #76]	; (8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	0e1b      	lsrs	r3, r3, #24
 8006f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f9a:	ee17 2a90 	vmov	r2, s15
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	609a      	str	r2, [r3, #8]
}
 8006fb6:	bf00      	nop
 8006fb8:	3724      	adds	r7, #36	; 0x24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	58024400 	.word	0x58024400
 8006fc8:	03d09000 	.word	0x03d09000
 8006fcc:	46000000 	.word	0x46000000
 8006fd0:	4c742400 	.word	0x4c742400
 8006fd4:	4a742400 	.word	0x4a742400
 8006fd8:	4af42400 	.word	0x4af42400

08006fdc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b089      	sub	sp, #36	; 0x24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fe4:	4ba0      	ldr	r3, [pc, #640]	; (8007268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe8:	f003 0303 	and.w	r3, r3, #3
 8006fec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006fee:	4b9e      	ldr	r3, [pc, #632]	; (8007268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff2:	091b      	lsrs	r3, r3, #4
 8006ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ff8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006ffa:	4b9b      	ldr	r3, [pc, #620]	; (8007268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007004:	4b98      	ldr	r3, [pc, #608]	; (8007268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007008:	08db      	lsrs	r3, r3, #3
 800700a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	fb02 f303 	mul.w	r3, r2, r3
 8007014:	ee07 3a90 	vmov	s15, r3
 8007018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 8111 	beq.w	800724a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	2b02      	cmp	r3, #2
 800702c:	f000 8083 	beq.w	8007136 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	2b02      	cmp	r3, #2
 8007034:	f200 80a1 	bhi.w	800717a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d056      	beq.n	80070f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007044:	e099      	b.n	800717a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007046:	4b88      	ldr	r3, [pc, #544]	; (8007268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0320 	and.w	r3, r3, #32
 800704e:	2b00      	cmp	r3, #0
 8007050:	d02d      	beq.n	80070ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007052:	4b85      	ldr	r3, [pc, #532]	; (8007268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	08db      	lsrs	r3, r3, #3
 8007058:	f003 0303 	and.w	r3, r3, #3
 800705c:	4a83      	ldr	r2, [pc, #524]	; (800726c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800705e:	fa22 f303 	lsr.w	r3, r2, r3
 8007062:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	ee07 3a90 	vmov	s15, r3
 8007074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800707c:	4b7a      	ldr	r3, [pc, #488]	; (8007268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007084:	ee07 3a90 	vmov	s15, r3
 8007088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007090:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007094:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007098:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800709c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80070ac:	e087      	b.n	80071be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	ee07 3a90 	vmov	s15, r3
 80070b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80070bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c0:	4b69      	ldr	r3, [pc, #420]	; (8007268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c8:	ee07 3a90 	vmov	s15, r3
 80070cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80070d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070f0:	e065      	b.n	80071be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	ee07 3a90 	vmov	s15, r3
 80070f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007278 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007104:	4b58      	ldr	r3, [pc, #352]	; (8007268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710c:	ee07 3a90 	vmov	s15, r3
 8007110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007114:	ed97 6a03 	vldr	s12, [r7, #12]
 8007118:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800711c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007120:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007124:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007128:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800712c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007130:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007134:	e043      	b.n	80071be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	ee07 3a90 	vmov	s15, r3
 800713c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007140:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800727c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007148:	4b47      	ldr	r3, [pc, #284]	; (8007268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800714a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007150:	ee07 3a90 	vmov	s15, r3
 8007154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007158:	ed97 6a03 	vldr	s12, [r7, #12]
 800715c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007160:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007168:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800716c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007174:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007178:	e021      	b.n	80071be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	ee07 3a90 	vmov	s15, r3
 8007180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007184:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007274 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718c:	4b36      	ldr	r3, [pc, #216]	; (8007268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007194:	ee07 3a90 	vmov	s15, r3
 8007198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719c:	ed97 6a03 	vldr	s12, [r7, #12]
 80071a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071bc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80071be:	4b2a      	ldr	r3, [pc, #168]	; (8007268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	0a5b      	lsrs	r3, r3, #9
 80071c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c8:	ee07 3a90 	vmov	s15, r3
 80071cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80071dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071e4:	ee17 2a90 	vmov	r2, s15
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80071ec:	4b1e      	ldr	r3, [pc, #120]	; (8007268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f0:	0c1b      	lsrs	r3, r3, #16
 80071f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007202:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007206:	edd7 6a07 	vldr	s13, [r7, #28]
 800720a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800720e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007212:	ee17 2a90 	vmov	r2, s15
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800721a:	4b13      	ldr	r3, [pc, #76]	; (8007268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800721c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721e:	0e1b      	lsrs	r3, r3, #24
 8007220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007224:	ee07 3a90 	vmov	s15, r3
 8007228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007230:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007234:	edd7 6a07 	vldr	s13, [r7, #28]
 8007238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800723c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007240:	ee17 2a90 	vmov	r2, s15
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007248:	e008      	b.n	800725c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	609a      	str	r2, [r3, #8]
}
 800725c:	bf00      	nop
 800725e:	3724      	adds	r7, #36	; 0x24
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	58024400 	.word	0x58024400
 800726c:	03d09000 	.word	0x03d09000
 8007270:	46000000 	.word	0x46000000
 8007274:	4c742400 	.word	0x4c742400
 8007278:	4a742400 	.word	0x4a742400
 800727c:	4af42400 	.word	0x4af42400

08007280 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800728e:	4b53      	ldr	r3, [pc, #332]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 8007290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	2b03      	cmp	r3, #3
 8007298:	d101      	bne.n	800729e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e099      	b.n	80073d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800729e:	4b4f      	ldr	r3, [pc, #316]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a4e      	ldr	r2, [pc, #312]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 80072a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072aa:	f7fa fa97 	bl	80017dc <HAL_GetTick>
 80072ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072b0:	e008      	b.n	80072c4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80072b2:	f7fa fa93 	bl	80017dc <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d901      	bls.n	80072c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e086      	b.n	80073d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072c4:	4b45      	ldr	r3, [pc, #276]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1f0      	bne.n	80072b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80072d0:	4b42      	ldr	r3, [pc, #264]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 80072d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	031b      	lsls	r3, r3, #12
 80072de:	493f      	ldr	r1, [pc, #252]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	628b      	str	r3, [r1, #40]	; 0x28
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	3b01      	subs	r3, #1
 80072ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	3b01      	subs	r3, #1
 80072f4:	025b      	lsls	r3, r3, #9
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	431a      	orrs	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	3b01      	subs	r3, #1
 8007300:	041b      	lsls	r3, r3, #16
 8007302:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	3b01      	subs	r3, #1
 800730e:	061b      	lsls	r3, r3, #24
 8007310:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007314:	4931      	ldr	r1, [pc, #196]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 8007316:	4313      	orrs	r3, r2
 8007318:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800731a:	4b30      	ldr	r3, [pc, #192]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 800731c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	492d      	ldr	r1, [pc, #180]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 8007328:	4313      	orrs	r3, r2
 800732a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800732c:	4b2b      	ldr	r3, [pc, #172]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 800732e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007330:	f023 0220 	bic.w	r2, r3, #32
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	4928      	ldr	r1, [pc, #160]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 800733a:	4313      	orrs	r3, r2
 800733c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800733e:	4b27      	ldr	r3, [pc, #156]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 8007340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007342:	4a26      	ldr	r2, [pc, #152]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 8007344:	f023 0310 	bic.w	r3, r3, #16
 8007348:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800734a:	4b24      	ldr	r3, [pc, #144]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 800734c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800734e:	4b24      	ldr	r3, [pc, #144]	; (80073e0 <RCCEx_PLL2_Config+0x160>)
 8007350:	4013      	ands	r3, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	69d2      	ldr	r2, [r2, #28]
 8007356:	00d2      	lsls	r2, r2, #3
 8007358:	4920      	ldr	r1, [pc, #128]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 800735a:	4313      	orrs	r3, r2
 800735c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800735e:	4b1f      	ldr	r3, [pc, #124]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 8007360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007362:	4a1e      	ldr	r2, [pc, #120]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 8007364:	f043 0310 	orr.w	r3, r3, #16
 8007368:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007370:	4b1a      	ldr	r3, [pc, #104]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	4a19      	ldr	r2, [pc, #100]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 8007376:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800737a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800737c:	e00f      	b.n	800739e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d106      	bne.n	8007392 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007384:	4b15      	ldr	r3, [pc, #84]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	4a14      	ldr	r2, [pc, #80]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 800738a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800738e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007390:	e005      	b.n	800739e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007392:	4b12      	ldr	r3, [pc, #72]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 8007394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007396:	4a11      	ldr	r2, [pc, #68]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 8007398:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800739c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800739e:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a0e      	ldr	r2, [pc, #56]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 80073a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073aa:	f7fa fa17 	bl	80017dc <HAL_GetTick>
 80073ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073b0:	e008      	b.n	80073c4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80073b2:	f7fa fa13 	bl	80017dc <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d901      	bls.n	80073c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e006      	b.n	80073d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073c4:	4b05      	ldr	r3, [pc, #20]	; (80073dc <RCCEx_PLL2_Config+0x15c>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d0f0      	beq.n	80073b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	58024400 	.word	0x58024400
 80073e0:	ffff0007 	.word	0xffff0007

080073e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073f2:	4b53      	ldr	r3, [pc, #332]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 80073f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d101      	bne.n	8007402 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e099      	b.n	8007536 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007402:	4b4f      	ldr	r3, [pc, #316]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a4e      	ldr	r2, [pc, #312]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 8007408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800740c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800740e:	f7fa f9e5 	bl	80017dc <HAL_GetTick>
 8007412:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007414:	e008      	b.n	8007428 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007416:	f7fa f9e1 	bl	80017dc <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	2b02      	cmp	r3, #2
 8007422:	d901      	bls.n	8007428 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e086      	b.n	8007536 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007428:	4b45      	ldr	r3, [pc, #276]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1f0      	bne.n	8007416 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007434:	4b42      	ldr	r3, [pc, #264]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 8007436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007438:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	051b      	lsls	r3, r3, #20
 8007442:	493f      	ldr	r1, [pc, #252]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 8007444:	4313      	orrs	r3, r2
 8007446:	628b      	str	r3, [r1, #40]	; 0x28
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	3b01      	subs	r3, #1
 800744e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	3b01      	subs	r3, #1
 8007458:	025b      	lsls	r3, r3, #9
 800745a:	b29b      	uxth	r3, r3
 800745c:	431a      	orrs	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	3b01      	subs	r3, #1
 8007464:	041b      	lsls	r3, r3, #16
 8007466:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800746a:	431a      	orrs	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	3b01      	subs	r3, #1
 8007472:	061b      	lsls	r3, r3, #24
 8007474:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007478:	4931      	ldr	r1, [pc, #196]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 800747a:	4313      	orrs	r3, r2
 800747c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800747e:	4b30      	ldr	r3, [pc, #192]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 8007480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007482:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	492d      	ldr	r1, [pc, #180]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 800748c:	4313      	orrs	r3, r2
 800748e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007490:	4b2b      	ldr	r3, [pc, #172]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	4928      	ldr	r1, [pc, #160]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80074a2:	4b27      	ldr	r3, [pc, #156]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 80074a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a6:	4a26      	ldr	r2, [pc, #152]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 80074a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80074ae:	4b24      	ldr	r3, [pc, #144]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 80074b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074b2:	4b24      	ldr	r3, [pc, #144]	; (8007544 <RCCEx_PLL3_Config+0x160>)
 80074b4:	4013      	ands	r3, r2
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	69d2      	ldr	r2, [r2, #28]
 80074ba:	00d2      	lsls	r2, r2, #3
 80074bc:	4920      	ldr	r1, [pc, #128]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80074c2:	4b1f      	ldr	r3, [pc, #124]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 80074c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c6:	4a1e      	ldr	r2, [pc, #120]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 80074c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d106      	bne.n	80074e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80074d4:	4b1a      	ldr	r3, [pc, #104]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 80074d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d8:	4a19      	ldr	r2, [pc, #100]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 80074da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074e0:	e00f      	b.n	8007502 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d106      	bne.n	80074f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80074e8:	4b15      	ldr	r3, [pc, #84]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	4a14      	ldr	r2, [pc, #80]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 80074ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80074f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074f4:	e005      	b.n	8007502 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80074f6:	4b12      	ldr	r3, [pc, #72]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 80074f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fa:	4a11      	ldr	r2, [pc, #68]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 80074fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007500:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007502:	4b0f      	ldr	r3, [pc, #60]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a0e      	ldr	r2, [pc, #56]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 8007508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800750c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800750e:	f7fa f965 	bl	80017dc <HAL_GetTick>
 8007512:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007514:	e008      	b.n	8007528 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007516:	f7fa f961 	bl	80017dc <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	2b02      	cmp	r3, #2
 8007522:	d901      	bls.n	8007528 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e006      	b.n	8007536 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007528:	4b05      	ldr	r3, [pc, #20]	; (8007540 <RCCEx_PLL3_Config+0x15c>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d0f0      	beq.n	8007516 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007534:	7bfb      	ldrb	r3, [r7, #15]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	58024400 	.word	0x58024400
 8007544:	ffff0007 	.word	0xffff0007

08007548 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e049      	b.n	80075ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7f9 fef4 	bl	800135c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3304      	adds	r3, #4
 8007584:	4619      	mov	r1, r3
 8007586:	4610      	mov	r0, r2
 8007588:	f000 fa58 	bl	8007a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d109      	bne.n	800761c <HAL_TIM_PWM_Start+0x24>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b01      	cmp	r3, #1
 8007612:	bf14      	ite	ne
 8007614:	2301      	movne	r3, #1
 8007616:	2300      	moveq	r3, #0
 8007618:	b2db      	uxtb	r3, r3
 800761a:	e03c      	b.n	8007696 <HAL_TIM_PWM_Start+0x9e>
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	2b04      	cmp	r3, #4
 8007620:	d109      	bne.n	8007636 <HAL_TIM_PWM_Start+0x3e>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b01      	cmp	r3, #1
 800762c:	bf14      	ite	ne
 800762e:	2301      	movne	r3, #1
 8007630:	2300      	moveq	r3, #0
 8007632:	b2db      	uxtb	r3, r3
 8007634:	e02f      	b.n	8007696 <HAL_TIM_PWM_Start+0x9e>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b08      	cmp	r3, #8
 800763a:	d109      	bne.n	8007650 <HAL_TIM_PWM_Start+0x58>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b01      	cmp	r3, #1
 8007646:	bf14      	ite	ne
 8007648:	2301      	movne	r3, #1
 800764a:	2300      	moveq	r3, #0
 800764c:	b2db      	uxtb	r3, r3
 800764e:	e022      	b.n	8007696 <HAL_TIM_PWM_Start+0x9e>
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2b0c      	cmp	r3, #12
 8007654:	d109      	bne.n	800766a <HAL_TIM_PWM_Start+0x72>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b01      	cmp	r3, #1
 8007660:	bf14      	ite	ne
 8007662:	2301      	movne	r3, #1
 8007664:	2300      	moveq	r3, #0
 8007666:	b2db      	uxtb	r3, r3
 8007668:	e015      	b.n	8007696 <HAL_TIM_PWM_Start+0x9e>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b10      	cmp	r3, #16
 800766e:	d109      	bne.n	8007684 <HAL_TIM_PWM_Start+0x8c>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b01      	cmp	r3, #1
 800767a:	bf14      	ite	ne
 800767c:	2301      	movne	r3, #1
 800767e:	2300      	moveq	r3, #0
 8007680:	b2db      	uxtb	r3, r3
 8007682:	e008      	b.n	8007696 <HAL_TIM_PWM_Start+0x9e>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b01      	cmp	r3, #1
 800768e:	bf14      	ite	ne
 8007690:	2301      	movne	r3, #1
 8007692:	2300      	moveq	r3, #0
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e0a1      	b.n	80077e2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d104      	bne.n	80076ae <HAL_TIM_PWM_Start+0xb6>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076ac:	e023      	b.n	80076f6 <HAL_TIM_PWM_Start+0xfe>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b04      	cmp	r3, #4
 80076b2:	d104      	bne.n	80076be <HAL_TIM_PWM_Start+0xc6>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076bc:	e01b      	b.n	80076f6 <HAL_TIM_PWM_Start+0xfe>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d104      	bne.n	80076ce <HAL_TIM_PWM_Start+0xd6>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076cc:	e013      	b.n	80076f6 <HAL_TIM_PWM_Start+0xfe>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b0c      	cmp	r3, #12
 80076d2:	d104      	bne.n	80076de <HAL_TIM_PWM_Start+0xe6>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076dc:	e00b      	b.n	80076f6 <HAL_TIM_PWM_Start+0xfe>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	2b10      	cmp	r3, #16
 80076e2:	d104      	bne.n	80076ee <HAL_TIM_PWM_Start+0xf6>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076ec:	e003      	b.n	80076f6 <HAL_TIM_PWM_Start+0xfe>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2202      	movs	r2, #2
 80076f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2201      	movs	r2, #1
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fd0c 	bl	800811c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a38      	ldr	r2, [pc, #224]	; (80077ec <HAL_TIM_PWM_Start+0x1f4>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d013      	beq.n	8007736 <HAL_TIM_PWM_Start+0x13e>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a37      	ldr	r2, [pc, #220]	; (80077f0 <HAL_TIM_PWM_Start+0x1f8>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d00e      	beq.n	8007736 <HAL_TIM_PWM_Start+0x13e>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a35      	ldr	r2, [pc, #212]	; (80077f4 <HAL_TIM_PWM_Start+0x1fc>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d009      	beq.n	8007736 <HAL_TIM_PWM_Start+0x13e>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a34      	ldr	r2, [pc, #208]	; (80077f8 <HAL_TIM_PWM_Start+0x200>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d004      	beq.n	8007736 <HAL_TIM_PWM_Start+0x13e>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a32      	ldr	r2, [pc, #200]	; (80077fc <HAL_TIM_PWM_Start+0x204>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d101      	bne.n	800773a <HAL_TIM_PWM_Start+0x142>
 8007736:	2301      	movs	r3, #1
 8007738:	e000      	b.n	800773c <HAL_TIM_PWM_Start+0x144>
 800773a:	2300      	movs	r3, #0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d007      	beq.n	8007750 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800774e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a25      	ldr	r2, [pc, #148]	; (80077ec <HAL_TIM_PWM_Start+0x1f4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d022      	beq.n	80077a0 <HAL_TIM_PWM_Start+0x1a8>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007762:	d01d      	beq.n	80077a0 <HAL_TIM_PWM_Start+0x1a8>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a25      	ldr	r2, [pc, #148]	; (8007800 <HAL_TIM_PWM_Start+0x208>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d018      	beq.n	80077a0 <HAL_TIM_PWM_Start+0x1a8>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a24      	ldr	r2, [pc, #144]	; (8007804 <HAL_TIM_PWM_Start+0x20c>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d013      	beq.n	80077a0 <HAL_TIM_PWM_Start+0x1a8>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a22      	ldr	r2, [pc, #136]	; (8007808 <HAL_TIM_PWM_Start+0x210>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d00e      	beq.n	80077a0 <HAL_TIM_PWM_Start+0x1a8>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a1a      	ldr	r2, [pc, #104]	; (80077f0 <HAL_TIM_PWM_Start+0x1f8>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d009      	beq.n	80077a0 <HAL_TIM_PWM_Start+0x1a8>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a1e      	ldr	r2, [pc, #120]	; (800780c <HAL_TIM_PWM_Start+0x214>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d004      	beq.n	80077a0 <HAL_TIM_PWM_Start+0x1a8>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a16      	ldr	r2, [pc, #88]	; (80077f4 <HAL_TIM_PWM_Start+0x1fc>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d115      	bne.n	80077cc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689a      	ldr	r2, [r3, #8]
 80077a6:	4b1a      	ldr	r3, [pc, #104]	; (8007810 <HAL_TIM_PWM_Start+0x218>)
 80077a8:	4013      	ands	r3, r2
 80077aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b06      	cmp	r3, #6
 80077b0:	d015      	beq.n	80077de <HAL_TIM_PWM_Start+0x1e6>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b8:	d011      	beq.n	80077de <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f042 0201 	orr.w	r2, r2, #1
 80077c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ca:	e008      	b.n	80077de <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0201 	orr.w	r2, r2, #1
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	e000      	b.n	80077e0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	40010000 	.word	0x40010000
 80077f0:	40010400 	.word	0x40010400
 80077f4:	40014000 	.word	0x40014000
 80077f8:	40014400 	.word	0x40014400
 80077fc:	40014800 	.word	0x40014800
 8007800:	40000400 	.word	0x40000400
 8007804:	40000800 	.word	0x40000800
 8007808:	40000c00 	.word	0x40000c00
 800780c:	40001800 	.word	0x40001800
 8007810:	00010007 	.word	0x00010007

08007814 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800782a:	2b01      	cmp	r3, #1
 800782c:	d101      	bne.n	8007832 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800782e:	2302      	movs	r3, #2
 8007830:	e0ff      	b.n	8007a32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b14      	cmp	r3, #20
 800783e:	f200 80f0 	bhi.w	8007a22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007842:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	0800789d 	.word	0x0800789d
 800784c:	08007a23 	.word	0x08007a23
 8007850:	08007a23 	.word	0x08007a23
 8007854:	08007a23 	.word	0x08007a23
 8007858:	080078dd 	.word	0x080078dd
 800785c:	08007a23 	.word	0x08007a23
 8007860:	08007a23 	.word	0x08007a23
 8007864:	08007a23 	.word	0x08007a23
 8007868:	0800791f 	.word	0x0800791f
 800786c:	08007a23 	.word	0x08007a23
 8007870:	08007a23 	.word	0x08007a23
 8007874:	08007a23 	.word	0x08007a23
 8007878:	0800795f 	.word	0x0800795f
 800787c:	08007a23 	.word	0x08007a23
 8007880:	08007a23 	.word	0x08007a23
 8007884:	08007a23 	.word	0x08007a23
 8007888:	080079a1 	.word	0x080079a1
 800788c:	08007a23 	.word	0x08007a23
 8007890:	08007a23 	.word	0x08007a23
 8007894:	08007a23 	.word	0x08007a23
 8007898:	080079e1 	.word	0x080079e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68b9      	ldr	r1, [r7, #8]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 f964 	bl	8007b70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	699a      	ldr	r2, [r3, #24]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 0208 	orr.w	r2, r2, #8
 80078b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	699a      	ldr	r2, [r3, #24]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0204 	bic.w	r2, r2, #4
 80078c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6999      	ldr	r1, [r3, #24]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	691a      	ldr	r2, [r3, #16]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	619a      	str	r2, [r3, #24]
      break;
 80078da:	e0a5      	b.n	8007a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68b9      	ldr	r1, [r7, #8]
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 f9d4 	bl	8007c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699a      	ldr	r2, [r3, #24]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	699a      	ldr	r2, [r3, #24]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6999      	ldr	r1, [r3, #24]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	021a      	lsls	r2, r3, #8
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	619a      	str	r2, [r3, #24]
      break;
 800791c:	e084      	b.n	8007a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68b9      	ldr	r1, [r7, #8]
 8007924:	4618      	mov	r0, r3
 8007926:	f000 fa3d 	bl	8007da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69da      	ldr	r2, [r3, #28]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f042 0208 	orr.w	r2, r2, #8
 8007938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	69da      	ldr	r2, [r3, #28]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 0204 	bic.w	r2, r2, #4
 8007948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	69d9      	ldr	r1, [r3, #28]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	430a      	orrs	r2, r1
 800795a:	61da      	str	r2, [r3, #28]
      break;
 800795c:	e064      	b.n	8007a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68b9      	ldr	r1, [r7, #8]
 8007964:	4618      	mov	r0, r3
 8007966:	f000 faa5 	bl	8007eb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	69da      	ldr	r2, [r3, #28]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	69da      	ldr	r2, [r3, #28]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	69d9      	ldr	r1, [r3, #28]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	021a      	lsls	r2, r3, #8
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	61da      	str	r2, [r3, #28]
      break;
 800799e:	e043      	b.n	8007a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68b9      	ldr	r1, [r7, #8]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 faee 	bl	8007f88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0208 	orr.w	r2, r2, #8
 80079ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 0204 	bic.w	r2, r2, #4
 80079ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	691a      	ldr	r2, [r3, #16]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80079de:	e023      	b.n	8007a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68b9      	ldr	r1, [r7, #8]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fb32 	bl	8008050 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	021a      	lsls	r2, r3, #8
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a20:	e002      	b.n	8007a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	75fb      	strb	r3, [r7, #23]
      break;
 8007a26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop

08007a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a40      	ldr	r2, [pc, #256]	; (8007b50 <TIM_Base_SetConfig+0x114>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d013      	beq.n	8007a7c <TIM_Base_SetConfig+0x40>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a5a:	d00f      	beq.n	8007a7c <TIM_Base_SetConfig+0x40>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a3d      	ldr	r2, [pc, #244]	; (8007b54 <TIM_Base_SetConfig+0x118>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d00b      	beq.n	8007a7c <TIM_Base_SetConfig+0x40>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a3c      	ldr	r2, [pc, #240]	; (8007b58 <TIM_Base_SetConfig+0x11c>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d007      	beq.n	8007a7c <TIM_Base_SetConfig+0x40>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a3b      	ldr	r2, [pc, #236]	; (8007b5c <TIM_Base_SetConfig+0x120>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d003      	beq.n	8007a7c <TIM_Base_SetConfig+0x40>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a3a      	ldr	r2, [pc, #232]	; (8007b60 <TIM_Base_SetConfig+0x124>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d108      	bne.n	8007a8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a2f      	ldr	r2, [pc, #188]	; (8007b50 <TIM_Base_SetConfig+0x114>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d01f      	beq.n	8007ad6 <TIM_Base_SetConfig+0x9a>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a9c:	d01b      	beq.n	8007ad6 <TIM_Base_SetConfig+0x9a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a2c      	ldr	r2, [pc, #176]	; (8007b54 <TIM_Base_SetConfig+0x118>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d017      	beq.n	8007ad6 <TIM_Base_SetConfig+0x9a>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a2b      	ldr	r2, [pc, #172]	; (8007b58 <TIM_Base_SetConfig+0x11c>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d013      	beq.n	8007ad6 <TIM_Base_SetConfig+0x9a>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a2a      	ldr	r2, [pc, #168]	; (8007b5c <TIM_Base_SetConfig+0x120>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d00f      	beq.n	8007ad6 <TIM_Base_SetConfig+0x9a>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a29      	ldr	r2, [pc, #164]	; (8007b60 <TIM_Base_SetConfig+0x124>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00b      	beq.n	8007ad6 <TIM_Base_SetConfig+0x9a>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a28      	ldr	r2, [pc, #160]	; (8007b64 <TIM_Base_SetConfig+0x128>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d007      	beq.n	8007ad6 <TIM_Base_SetConfig+0x9a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a27      	ldr	r2, [pc, #156]	; (8007b68 <TIM_Base_SetConfig+0x12c>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d003      	beq.n	8007ad6 <TIM_Base_SetConfig+0x9a>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a26      	ldr	r2, [pc, #152]	; (8007b6c <TIM_Base_SetConfig+0x130>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d108      	bne.n	8007ae8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007adc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a10      	ldr	r2, [pc, #64]	; (8007b50 <TIM_Base_SetConfig+0x114>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d00f      	beq.n	8007b34 <TIM_Base_SetConfig+0xf8>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a12      	ldr	r2, [pc, #72]	; (8007b60 <TIM_Base_SetConfig+0x124>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d00b      	beq.n	8007b34 <TIM_Base_SetConfig+0xf8>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a11      	ldr	r2, [pc, #68]	; (8007b64 <TIM_Base_SetConfig+0x128>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d007      	beq.n	8007b34 <TIM_Base_SetConfig+0xf8>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a10      	ldr	r2, [pc, #64]	; (8007b68 <TIM_Base_SetConfig+0x12c>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d003      	beq.n	8007b34 <TIM_Base_SetConfig+0xf8>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a0f      	ldr	r2, [pc, #60]	; (8007b6c <TIM_Base_SetConfig+0x130>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d103      	bne.n	8007b3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	691a      	ldr	r2, [r3, #16]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	615a      	str	r2, [r3, #20]
}
 8007b42:	bf00      	nop
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	40010000 	.word	0x40010000
 8007b54:	40000400 	.word	0x40000400
 8007b58:	40000800 	.word	0x40000800
 8007b5c:	40000c00 	.word	0x40000c00
 8007b60:	40010400 	.word	0x40010400
 8007b64:	40014000 	.word	0x40014000
 8007b68:	40014400 	.word	0x40014400
 8007b6c:	40014800 	.word	0x40014800

08007b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b087      	sub	sp, #28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	f023 0201 	bic.w	r2, r3, #1
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	4b37      	ldr	r3, [pc, #220]	; (8007c78 <TIM_OC1_SetConfig+0x108>)
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f023 0303 	bic.w	r3, r3, #3
 8007ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f023 0302 	bic.w	r3, r3, #2
 8007bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a2d      	ldr	r2, [pc, #180]	; (8007c7c <TIM_OC1_SetConfig+0x10c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d00f      	beq.n	8007bec <TIM_OC1_SetConfig+0x7c>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a2c      	ldr	r2, [pc, #176]	; (8007c80 <TIM_OC1_SetConfig+0x110>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d00b      	beq.n	8007bec <TIM_OC1_SetConfig+0x7c>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a2b      	ldr	r2, [pc, #172]	; (8007c84 <TIM_OC1_SetConfig+0x114>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d007      	beq.n	8007bec <TIM_OC1_SetConfig+0x7c>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a2a      	ldr	r2, [pc, #168]	; (8007c88 <TIM_OC1_SetConfig+0x118>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d003      	beq.n	8007bec <TIM_OC1_SetConfig+0x7c>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a29      	ldr	r2, [pc, #164]	; (8007c8c <TIM_OC1_SetConfig+0x11c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d10c      	bne.n	8007c06 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f023 0308 	bic.w	r3, r3, #8
 8007bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f023 0304 	bic.w	r3, r3, #4
 8007c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a1c      	ldr	r2, [pc, #112]	; (8007c7c <TIM_OC1_SetConfig+0x10c>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00f      	beq.n	8007c2e <TIM_OC1_SetConfig+0xbe>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a1b      	ldr	r2, [pc, #108]	; (8007c80 <TIM_OC1_SetConfig+0x110>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d00b      	beq.n	8007c2e <TIM_OC1_SetConfig+0xbe>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a1a      	ldr	r2, [pc, #104]	; (8007c84 <TIM_OC1_SetConfig+0x114>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d007      	beq.n	8007c2e <TIM_OC1_SetConfig+0xbe>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a19      	ldr	r2, [pc, #100]	; (8007c88 <TIM_OC1_SetConfig+0x118>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d003      	beq.n	8007c2e <TIM_OC1_SetConfig+0xbe>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a18      	ldr	r2, [pc, #96]	; (8007c8c <TIM_OC1_SetConfig+0x11c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d111      	bne.n	8007c52 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	621a      	str	r2, [r3, #32]
}
 8007c6c:	bf00      	nop
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	fffeff8f 	.word	0xfffeff8f
 8007c7c:	40010000 	.word	0x40010000
 8007c80:	40010400 	.word	0x40010400
 8007c84:	40014000 	.word	0x40014000
 8007c88:	40014400 	.word	0x40014400
 8007c8c:	40014800 	.word	0x40014800

08007c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	f023 0210 	bic.w	r2, r3, #16
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4b34      	ldr	r3, [pc, #208]	; (8007d8c <TIM_OC2_SetConfig+0xfc>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	021b      	lsls	r3, r3, #8
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f023 0320 	bic.w	r3, r3, #32
 8007cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a29      	ldr	r2, [pc, #164]	; (8007d90 <TIM_OC2_SetConfig+0x100>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d003      	beq.n	8007cf8 <TIM_OC2_SetConfig+0x68>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a28      	ldr	r2, [pc, #160]	; (8007d94 <TIM_OC2_SetConfig+0x104>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d10d      	bne.n	8007d14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	011b      	lsls	r3, r3, #4
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a1e      	ldr	r2, [pc, #120]	; (8007d90 <TIM_OC2_SetConfig+0x100>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d00f      	beq.n	8007d3c <TIM_OC2_SetConfig+0xac>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a1d      	ldr	r2, [pc, #116]	; (8007d94 <TIM_OC2_SetConfig+0x104>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d00b      	beq.n	8007d3c <TIM_OC2_SetConfig+0xac>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a1c      	ldr	r2, [pc, #112]	; (8007d98 <TIM_OC2_SetConfig+0x108>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d007      	beq.n	8007d3c <TIM_OC2_SetConfig+0xac>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a1b      	ldr	r2, [pc, #108]	; (8007d9c <TIM_OC2_SetConfig+0x10c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d003      	beq.n	8007d3c <TIM_OC2_SetConfig+0xac>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a1a      	ldr	r2, [pc, #104]	; (8007da0 <TIM_OC2_SetConfig+0x110>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d113      	bne.n	8007d64 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	621a      	str	r2, [r3, #32]
}
 8007d7e:	bf00      	nop
 8007d80:	371c      	adds	r7, #28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	feff8fff 	.word	0xfeff8fff
 8007d90:	40010000 	.word	0x40010000
 8007d94:	40010400 	.word	0x40010400
 8007d98:	40014000 	.word	0x40014000
 8007d9c:	40014400 	.word	0x40014400
 8007da0:	40014800 	.word	0x40014800

08007da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	4b33      	ldr	r3, [pc, #204]	; (8007e9c <TIM_OC3_SetConfig+0xf8>)
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0303 	bic.w	r3, r3, #3
 8007dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a28      	ldr	r2, [pc, #160]	; (8007ea0 <TIM_OC3_SetConfig+0xfc>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d003      	beq.n	8007e0a <TIM_OC3_SetConfig+0x66>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a27      	ldr	r2, [pc, #156]	; (8007ea4 <TIM_OC3_SetConfig+0x100>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d10d      	bne.n	8007e26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	021b      	lsls	r3, r3, #8
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a1d      	ldr	r2, [pc, #116]	; (8007ea0 <TIM_OC3_SetConfig+0xfc>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d00f      	beq.n	8007e4e <TIM_OC3_SetConfig+0xaa>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a1c      	ldr	r2, [pc, #112]	; (8007ea4 <TIM_OC3_SetConfig+0x100>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d00b      	beq.n	8007e4e <TIM_OC3_SetConfig+0xaa>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a1b      	ldr	r2, [pc, #108]	; (8007ea8 <TIM_OC3_SetConfig+0x104>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d007      	beq.n	8007e4e <TIM_OC3_SetConfig+0xaa>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a1a      	ldr	r2, [pc, #104]	; (8007eac <TIM_OC3_SetConfig+0x108>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d003      	beq.n	8007e4e <TIM_OC3_SetConfig+0xaa>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a19      	ldr	r2, [pc, #100]	; (8007eb0 <TIM_OC3_SetConfig+0x10c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d113      	bne.n	8007e76 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	011b      	lsls	r3, r3, #4
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	621a      	str	r2, [r3, #32]
}
 8007e90:	bf00      	nop
 8007e92:	371c      	adds	r7, #28
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	fffeff8f 	.word	0xfffeff8f
 8007ea0:	40010000 	.word	0x40010000
 8007ea4:	40010400 	.word	0x40010400
 8007ea8:	40014000 	.word	0x40014000
 8007eac:	40014400 	.word	0x40014400
 8007eb0:	40014800 	.word	0x40014800

08007eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4b24      	ldr	r3, [pc, #144]	; (8007f70 <TIM_OC4_SetConfig+0xbc>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	021b      	lsls	r3, r3, #8
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	031b      	lsls	r3, r3, #12
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a19      	ldr	r2, [pc, #100]	; (8007f74 <TIM_OC4_SetConfig+0xc0>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00f      	beq.n	8007f34 <TIM_OC4_SetConfig+0x80>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a18      	ldr	r2, [pc, #96]	; (8007f78 <TIM_OC4_SetConfig+0xc4>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d00b      	beq.n	8007f34 <TIM_OC4_SetConfig+0x80>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a17      	ldr	r2, [pc, #92]	; (8007f7c <TIM_OC4_SetConfig+0xc8>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d007      	beq.n	8007f34 <TIM_OC4_SetConfig+0x80>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a16      	ldr	r2, [pc, #88]	; (8007f80 <TIM_OC4_SetConfig+0xcc>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d003      	beq.n	8007f34 <TIM_OC4_SetConfig+0x80>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a15      	ldr	r2, [pc, #84]	; (8007f84 <TIM_OC4_SetConfig+0xd0>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d109      	bne.n	8007f48 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	019b      	lsls	r3, r3, #6
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	621a      	str	r2, [r3, #32]
}
 8007f62:	bf00      	nop
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	feff8fff 	.word	0xfeff8fff
 8007f74:	40010000 	.word	0x40010000
 8007f78:	40010400 	.word	0x40010400
 8007f7c:	40014000 	.word	0x40014000
 8007f80:	40014400 	.word	0x40014400
 8007f84:	40014800 	.word	0x40014800

08007f88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4b21      	ldr	r3, [pc, #132]	; (8008038 <TIM_OC5_SetConfig+0xb0>)
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007fc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	041b      	lsls	r3, r3, #16
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a18      	ldr	r2, [pc, #96]	; (800803c <TIM_OC5_SetConfig+0xb4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d00f      	beq.n	8007ffe <TIM_OC5_SetConfig+0x76>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a17      	ldr	r2, [pc, #92]	; (8008040 <TIM_OC5_SetConfig+0xb8>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00b      	beq.n	8007ffe <TIM_OC5_SetConfig+0x76>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a16      	ldr	r2, [pc, #88]	; (8008044 <TIM_OC5_SetConfig+0xbc>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d007      	beq.n	8007ffe <TIM_OC5_SetConfig+0x76>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a15      	ldr	r2, [pc, #84]	; (8008048 <TIM_OC5_SetConfig+0xc0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d003      	beq.n	8007ffe <TIM_OC5_SetConfig+0x76>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a14      	ldr	r2, [pc, #80]	; (800804c <TIM_OC5_SetConfig+0xc4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d109      	bne.n	8008012 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008004:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	021b      	lsls	r3, r3, #8
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4313      	orrs	r3, r2
 8008010:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	621a      	str	r2, [r3, #32]
}
 800802c:	bf00      	nop
 800802e:	371c      	adds	r7, #28
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	fffeff8f 	.word	0xfffeff8f
 800803c:	40010000 	.word	0x40010000
 8008040:	40010400 	.word	0x40010400
 8008044:	40014000 	.word	0x40014000
 8008048:	40014400 	.word	0x40014400
 800804c:	40014800 	.word	0x40014800

08008050 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	4b22      	ldr	r3, [pc, #136]	; (8008104 <TIM_OC6_SetConfig+0xb4>)
 800807c:	4013      	ands	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	021b      	lsls	r3, r3, #8
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	4313      	orrs	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008092:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	051b      	lsls	r3, r3, #20
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	4313      	orrs	r3, r2
 800809e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a19      	ldr	r2, [pc, #100]	; (8008108 <TIM_OC6_SetConfig+0xb8>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d00f      	beq.n	80080c8 <TIM_OC6_SetConfig+0x78>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a18      	ldr	r2, [pc, #96]	; (800810c <TIM_OC6_SetConfig+0xbc>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d00b      	beq.n	80080c8 <TIM_OC6_SetConfig+0x78>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a17      	ldr	r2, [pc, #92]	; (8008110 <TIM_OC6_SetConfig+0xc0>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d007      	beq.n	80080c8 <TIM_OC6_SetConfig+0x78>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a16      	ldr	r2, [pc, #88]	; (8008114 <TIM_OC6_SetConfig+0xc4>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d003      	beq.n	80080c8 <TIM_OC6_SetConfig+0x78>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a15      	ldr	r2, [pc, #84]	; (8008118 <TIM_OC6_SetConfig+0xc8>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d109      	bne.n	80080dc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	029b      	lsls	r3, r3, #10
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	4313      	orrs	r3, r2
 80080da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	621a      	str	r2, [r3, #32]
}
 80080f6:	bf00      	nop
 80080f8:	371c      	adds	r7, #28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	feff8fff 	.word	0xfeff8fff
 8008108:	40010000 	.word	0x40010000
 800810c:	40010400 	.word	0x40010400
 8008110:	40014000 	.word	0x40014000
 8008114:	40014400 	.word	0x40014400
 8008118:	40014800 	.word	0x40014800

0800811c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f003 031f 	and.w	r3, r3, #31
 800812e:	2201      	movs	r2, #1
 8008130:	fa02 f303 	lsl.w	r3, r2, r3
 8008134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6a1a      	ldr	r2, [r3, #32]
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	43db      	mvns	r3, r3
 800813e:	401a      	ands	r2, r3
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6a1a      	ldr	r2, [r3, #32]
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f003 031f 	and.w	r3, r3, #31
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	fa01 f303 	lsl.w	r3, r1, r3
 8008154:	431a      	orrs	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	621a      	str	r2, [r3, #32]
}
 800815a:	bf00      	nop
 800815c:	371c      	adds	r7, #28
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
	...

08008168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008178:	2b01      	cmp	r3, #1
 800817a:	d101      	bne.n	8008180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800817c:	2302      	movs	r3, #2
 800817e:	e06d      	b.n	800825c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a30      	ldr	r2, [pc, #192]	; (8008268 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d004      	beq.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a2f      	ldr	r2, [pc, #188]	; (800826c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d108      	bne.n	80081c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a20      	ldr	r2, [pc, #128]	; (8008268 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d022      	beq.n	8008230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f2:	d01d      	beq.n	8008230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a1d      	ldr	r2, [pc, #116]	; (8008270 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d018      	beq.n	8008230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a1c      	ldr	r2, [pc, #112]	; (8008274 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d013      	beq.n	8008230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a1a      	ldr	r2, [pc, #104]	; (8008278 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d00e      	beq.n	8008230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a15      	ldr	r2, [pc, #84]	; (800826c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d009      	beq.n	8008230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a16      	ldr	r2, [pc, #88]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d004      	beq.n	8008230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a15      	ldr	r2, [pc, #84]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d10c      	bne.n	800824a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008236:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	4313      	orrs	r3, r2
 8008240:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	40010000 	.word	0x40010000
 800826c:	40010400 	.word	0x40010400
 8008270:	40000400 	.word	0x40000400
 8008274:	40000800 	.word	0x40000800
 8008278:	40000c00 	.word	0x40000c00
 800827c:	40001800 	.word	0x40001800
 8008280:	40014000 	.word	0x40014000

08008284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e042      	b.n	800831c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800829c:	2b00      	cmp	r3, #0
 800829e:	d106      	bne.n	80082ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7f9 f8af 	bl	800140c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2224      	movs	r2, #36	; 0x24
 80082b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 0201 	bic.w	r2, r2, #1
 80082c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f8c2 	bl	8008450 <UART_SetConfig>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d101      	bne.n	80082d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e022      	b.n	800831c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d002      	beq.n	80082e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fe1e 	bl	8008f20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689a      	ldr	r2, [r3, #8]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0201 	orr.w	r2, r2, #1
 8008312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fea5 	bl	8009064 <UART_CheckIdleState>
 800831a:	4603      	mov	r3, r0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08a      	sub	sp, #40	; 0x28
 8008328:	af02      	add	r7, sp, #8
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	603b      	str	r3, [r7, #0]
 8008330:	4613      	mov	r3, r2
 8008332:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800833a:	2b20      	cmp	r3, #32
 800833c:	f040 8083 	bne.w	8008446 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <HAL_UART_Transmit+0x28>
 8008346:	88fb      	ldrh	r3, [r7, #6]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e07b      	b.n	8008448 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008356:	2b01      	cmp	r3, #1
 8008358:	d101      	bne.n	800835e <HAL_UART_Transmit+0x3a>
 800835a:	2302      	movs	r3, #2
 800835c:	e074      	b.n	8008448 <HAL_UART_Transmit+0x124>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2221      	movs	r2, #33	; 0x21
 8008372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008376:	f7f9 fa31 	bl	80017dc <HAL_GetTick>
 800837a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	88fa      	ldrh	r2, [r7, #6]
 8008380:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	88fa      	ldrh	r2, [r7, #6]
 8008388:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008394:	d108      	bne.n	80083a8 <HAL_UART_Transmit+0x84>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d104      	bne.n	80083a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	61bb      	str	r3, [r7, #24]
 80083a6:	e003      	b.n	80083b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083ac:	2300      	movs	r3, #0
 80083ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80083b8:	e02c      	b.n	8008414 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2200      	movs	r2, #0
 80083c2:	2180      	movs	r1, #128	; 0x80
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 fe98 	bl	80090fa <UART_WaitOnFlagUntilTimeout>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e039      	b.n	8008448 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	3302      	adds	r3, #2
 80083ee:	61bb      	str	r3, [r7, #24]
 80083f0:	e007      	b.n	8008402 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	781a      	ldrb	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	3301      	adds	r3, #1
 8008400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008408:	b29b      	uxth	r3, r3
 800840a:	3b01      	subs	r3, #1
 800840c:	b29a      	uxth	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800841a:	b29b      	uxth	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1cc      	bne.n	80083ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	2200      	movs	r2, #0
 8008428:	2140      	movs	r1, #64	; 0x40
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 fe65 	bl	80090fa <UART_WaitOnFlagUntilTimeout>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e006      	b.n	8008448 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2220      	movs	r2, #32
 800843e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	e000      	b.n	8008448 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008446:	2302      	movs	r3, #2
  }
}
 8008448:	4618      	mov	r0, r3
 800844a:	3720      	adds	r7, #32
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008454:	b092      	sub	sp, #72	; 0x48
 8008456:	af00      	add	r7, sp, #0
 8008458:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	689a      	ldr	r2, [r3, #8]
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	431a      	orrs	r2, r3
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	431a      	orrs	r2, r3
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	69db      	ldr	r3, [r3, #28]
 8008474:	4313      	orrs	r3, r2
 8008476:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	4bbe      	ldr	r3, [pc, #760]	; (8008778 <UART_SetConfig+0x328>)
 8008480:	4013      	ands	r3, r2
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	6812      	ldr	r2, [r2, #0]
 8008486:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008488:	430b      	orrs	r3, r1
 800848a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	68da      	ldr	r2, [r3, #12]
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	430a      	orrs	r2, r1
 80084a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4ab3      	ldr	r2, [pc, #716]	; (800877c <UART_SetConfig+0x32c>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d004      	beq.n	80084bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084b8:	4313      	orrs	r3, r2
 80084ba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689a      	ldr	r2, [r3, #8]
 80084c2:	4baf      	ldr	r3, [pc, #700]	; (8008780 <UART_SetConfig+0x330>)
 80084c4:	4013      	ands	r3, r2
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	6812      	ldr	r2, [r2, #0]
 80084ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084cc:	430b      	orrs	r3, r1
 80084ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d6:	f023 010f 	bic.w	r1, r3, #15
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4aa6      	ldr	r2, [pc, #664]	; (8008784 <UART_SetConfig+0x334>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d177      	bne.n	80085e0 <UART_SetConfig+0x190>
 80084f0:	4ba5      	ldr	r3, [pc, #660]	; (8008788 <UART_SetConfig+0x338>)
 80084f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084f8:	2b28      	cmp	r3, #40	; 0x28
 80084fa:	d86d      	bhi.n	80085d8 <UART_SetConfig+0x188>
 80084fc:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <UART_SetConfig+0xb4>)
 80084fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008502:	bf00      	nop
 8008504:	080085a9 	.word	0x080085a9
 8008508:	080085d9 	.word	0x080085d9
 800850c:	080085d9 	.word	0x080085d9
 8008510:	080085d9 	.word	0x080085d9
 8008514:	080085d9 	.word	0x080085d9
 8008518:	080085d9 	.word	0x080085d9
 800851c:	080085d9 	.word	0x080085d9
 8008520:	080085d9 	.word	0x080085d9
 8008524:	080085b1 	.word	0x080085b1
 8008528:	080085d9 	.word	0x080085d9
 800852c:	080085d9 	.word	0x080085d9
 8008530:	080085d9 	.word	0x080085d9
 8008534:	080085d9 	.word	0x080085d9
 8008538:	080085d9 	.word	0x080085d9
 800853c:	080085d9 	.word	0x080085d9
 8008540:	080085d9 	.word	0x080085d9
 8008544:	080085b9 	.word	0x080085b9
 8008548:	080085d9 	.word	0x080085d9
 800854c:	080085d9 	.word	0x080085d9
 8008550:	080085d9 	.word	0x080085d9
 8008554:	080085d9 	.word	0x080085d9
 8008558:	080085d9 	.word	0x080085d9
 800855c:	080085d9 	.word	0x080085d9
 8008560:	080085d9 	.word	0x080085d9
 8008564:	080085c1 	.word	0x080085c1
 8008568:	080085d9 	.word	0x080085d9
 800856c:	080085d9 	.word	0x080085d9
 8008570:	080085d9 	.word	0x080085d9
 8008574:	080085d9 	.word	0x080085d9
 8008578:	080085d9 	.word	0x080085d9
 800857c:	080085d9 	.word	0x080085d9
 8008580:	080085d9 	.word	0x080085d9
 8008584:	080085c9 	.word	0x080085c9
 8008588:	080085d9 	.word	0x080085d9
 800858c:	080085d9 	.word	0x080085d9
 8008590:	080085d9 	.word	0x080085d9
 8008594:	080085d9 	.word	0x080085d9
 8008598:	080085d9 	.word	0x080085d9
 800859c:	080085d9 	.word	0x080085d9
 80085a0:	080085d9 	.word	0x080085d9
 80085a4:	080085d1 	.word	0x080085d1
 80085a8:	2301      	movs	r3, #1
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ae:	e222      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80085b0:	2304      	movs	r3, #4
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085b6:	e21e      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80085b8:	2308      	movs	r3, #8
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085be:	e21a      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80085c0:	2310      	movs	r3, #16
 80085c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085c6:	e216      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80085c8:	2320      	movs	r3, #32
 80085ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ce:	e212      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80085d0:	2340      	movs	r3, #64	; 0x40
 80085d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085d6:	e20e      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80085d8:	2380      	movs	r3, #128	; 0x80
 80085da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085de:	e20a      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a69      	ldr	r2, [pc, #420]	; (800878c <UART_SetConfig+0x33c>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d130      	bne.n	800864c <UART_SetConfig+0x1fc>
 80085ea:	4b67      	ldr	r3, [pc, #412]	; (8008788 <UART_SetConfig+0x338>)
 80085ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ee:	f003 0307 	and.w	r3, r3, #7
 80085f2:	2b05      	cmp	r3, #5
 80085f4:	d826      	bhi.n	8008644 <UART_SetConfig+0x1f4>
 80085f6:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <UART_SetConfig+0x1ac>)
 80085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fc:	08008615 	.word	0x08008615
 8008600:	0800861d 	.word	0x0800861d
 8008604:	08008625 	.word	0x08008625
 8008608:	0800862d 	.word	0x0800862d
 800860c:	08008635 	.word	0x08008635
 8008610:	0800863d 	.word	0x0800863d
 8008614:	2300      	movs	r3, #0
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800861a:	e1ec      	b.n	80089f6 <UART_SetConfig+0x5a6>
 800861c:	2304      	movs	r3, #4
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008622:	e1e8      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008624:	2308      	movs	r3, #8
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862a:	e1e4      	b.n	80089f6 <UART_SetConfig+0x5a6>
 800862c:	2310      	movs	r3, #16
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008632:	e1e0      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008634:	2320      	movs	r3, #32
 8008636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863a:	e1dc      	b.n	80089f6 <UART_SetConfig+0x5a6>
 800863c:	2340      	movs	r3, #64	; 0x40
 800863e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008642:	e1d8      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008644:	2380      	movs	r3, #128	; 0x80
 8008646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800864a:	e1d4      	b.n	80089f6 <UART_SetConfig+0x5a6>
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a4f      	ldr	r2, [pc, #316]	; (8008790 <UART_SetConfig+0x340>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d130      	bne.n	80086b8 <UART_SetConfig+0x268>
 8008656:	4b4c      	ldr	r3, [pc, #304]	; (8008788 <UART_SetConfig+0x338>)
 8008658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865a:	f003 0307 	and.w	r3, r3, #7
 800865e:	2b05      	cmp	r3, #5
 8008660:	d826      	bhi.n	80086b0 <UART_SetConfig+0x260>
 8008662:	a201      	add	r2, pc, #4	; (adr r2, 8008668 <UART_SetConfig+0x218>)
 8008664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008668:	08008681 	.word	0x08008681
 800866c:	08008689 	.word	0x08008689
 8008670:	08008691 	.word	0x08008691
 8008674:	08008699 	.word	0x08008699
 8008678:	080086a1 	.word	0x080086a1
 800867c:	080086a9 	.word	0x080086a9
 8008680:	2300      	movs	r3, #0
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008686:	e1b6      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008688:	2304      	movs	r3, #4
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800868e:	e1b2      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008690:	2308      	movs	r3, #8
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008696:	e1ae      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008698:	2310      	movs	r3, #16
 800869a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869e:	e1aa      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80086a0:	2320      	movs	r3, #32
 80086a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a6:	e1a6      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80086a8:	2340      	movs	r3, #64	; 0x40
 80086aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ae:	e1a2      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80086b0:	2380      	movs	r3, #128	; 0x80
 80086b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086b6:	e19e      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a35      	ldr	r2, [pc, #212]	; (8008794 <UART_SetConfig+0x344>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d130      	bne.n	8008724 <UART_SetConfig+0x2d4>
 80086c2:	4b31      	ldr	r3, [pc, #196]	; (8008788 <UART_SetConfig+0x338>)
 80086c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	2b05      	cmp	r3, #5
 80086cc:	d826      	bhi.n	800871c <UART_SetConfig+0x2cc>
 80086ce:	a201      	add	r2, pc, #4	; (adr r2, 80086d4 <UART_SetConfig+0x284>)
 80086d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d4:	080086ed 	.word	0x080086ed
 80086d8:	080086f5 	.word	0x080086f5
 80086dc:	080086fd 	.word	0x080086fd
 80086e0:	08008705 	.word	0x08008705
 80086e4:	0800870d 	.word	0x0800870d
 80086e8:	08008715 	.word	0x08008715
 80086ec:	2300      	movs	r3, #0
 80086ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086f2:	e180      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80086f4:	2304      	movs	r3, #4
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fa:	e17c      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80086fc:	2308      	movs	r3, #8
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008702:	e178      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008704:	2310      	movs	r3, #16
 8008706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800870a:	e174      	b.n	80089f6 <UART_SetConfig+0x5a6>
 800870c:	2320      	movs	r3, #32
 800870e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008712:	e170      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008714:	2340      	movs	r3, #64	; 0x40
 8008716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800871a:	e16c      	b.n	80089f6 <UART_SetConfig+0x5a6>
 800871c:	2380      	movs	r3, #128	; 0x80
 800871e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008722:	e168      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a1b      	ldr	r2, [pc, #108]	; (8008798 <UART_SetConfig+0x348>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d142      	bne.n	80087b4 <UART_SetConfig+0x364>
 800872e:	4b16      	ldr	r3, [pc, #88]	; (8008788 <UART_SetConfig+0x338>)
 8008730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008732:	f003 0307 	and.w	r3, r3, #7
 8008736:	2b05      	cmp	r3, #5
 8008738:	d838      	bhi.n	80087ac <UART_SetConfig+0x35c>
 800873a:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <UART_SetConfig+0x2f0>)
 800873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008740:	08008759 	.word	0x08008759
 8008744:	08008761 	.word	0x08008761
 8008748:	08008769 	.word	0x08008769
 800874c:	08008771 	.word	0x08008771
 8008750:	0800879d 	.word	0x0800879d
 8008754:	080087a5 	.word	0x080087a5
 8008758:	2300      	movs	r3, #0
 800875a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800875e:	e14a      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008760:	2304      	movs	r3, #4
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008766:	e146      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008768:	2308      	movs	r3, #8
 800876a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800876e:	e142      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008770:	2310      	movs	r3, #16
 8008772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008776:	e13e      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008778:	cfff69f3 	.word	0xcfff69f3
 800877c:	58000c00 	.word	0x58000c00
 8008780:	11fff4ff 	.word	0x11fff4ff
 8008784:	40011000 	.word	0x40011000
 8008788:	58024400 	.word	0x58024400
 800878c:	40004400 	.word	0x40004400
 8008790:	40004800 	.word	0x40004800
 8008794:	40004c00 	.word	0x40004c00
 8008798:	40005000 	.word	0x40005000
 800879c:	2320      	movs	r3, #32
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087a2:	e128      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80087a4:	2340      	movs	r3, #64	; 0x40
 80087a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087aa:	e124      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80087ac:	2380      	movs	r3, #128	; 0x80
 80087ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087b2:	e120      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4acb      	ldr	r2, [pc, #812]	; (8008ae8 <UART_SetConfig+0x698>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d176      	bne.n	80088ac <UART_SetConfig+0x45c>
 80087be:	4bcb      	ldr	r3, [pc, #812]	; (8008aec <UART_SetConfig+0x69c>)
 80087c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087c6:	2b28      	cmp	r3, #40	; 0x28
 80087c8:	d86c      	bhi.n	80088a4 <UART_SetConfig+0x454>
 80087ca:	a201      	add	r2, pc, #4	; (adr r2, 80087d0 <UART_SetConfig+0x380>)
 80087cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d0:	08008875 	.word	0x08008875
 80087d4:	080088a5 	.word	0x080088a5
 80087d8:	080088a5 	.word	0x080088a5
 80087dc:	080088a5 	.word	0x080088a5
 80087e0:	080088a5 	.word	0x080088a5
 80087e4:	080088a5 	.word	0x080088a5
 80087e8:	080088a5 	.word	0x080088a5
 80087ec:	080088a5 	.word	0x080088a5
 80087f0:	0800887d 	.word	0x0800887d
 80087f4:	080088a5 	.word	0x080088a5
 80087f8:	080088a5 	.word	0x080088a5
 80087fc:	080088a5 	.word	0x080088a5
 8008800:	080088a5 	.word	0x080088a5
 8008804:	080088a5 	.word	0x080088a5
 8008808:	080088a5 	.word	0x080088a5
 800880c:	080088a5 	.word	0x080088a5
 8008810:	08008885 	.word	0x08008885
 8008814:	080088a5 	.word	0x080088a5
 8008818:	080088a5 	.word	0x080088a5
 800881c:	080088a5 	.word	0x080088a5
 8008820:	080088a5 	.word	0x080088a5
 8008824:	080088a5 	.word	0x080088a5
 8008828:	080088a5 	.word	0x080088a5
 800882c:	080088a5 	.word	0x080088a5
 8008830:	0800888d 	.word	0x0800888d
 8008834:	080088a5 	.word	0x080088a5
 8008838:	080088a5 	.word	0x080088a5
 800883c:	080088a5 	.word	0x080088a5
 8008840:	080088a5 	.word	0x080088a5
 8008844:	080088a5 	.word	0x080088a5
 8008848:	080088a5 	.word	0x080088a5
 800884c:	080088a5 	.word	0x080088a5
 8008850:	08008895 	.word	0x08008895
 8008854:	080088a5 	.word	0x080088a5
 8008858:	080088a5 	.word	0x080088a5
 800885c:	080088a5 	.word	0x080088a5
 8008860:	080088a5 	.word	0x080088a5
 8008864:	080088a5 	.word	0x080088a5
 8008868:	080088a5 	.word	0x080088a5
 800886c:	080088a5 	.word	0x080088a5
 8008870:	0800889d 	.word	0x0800889d
 8008874:	2301      	movs	r3, #1
 8008876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800887a:	e0bc      	b.n	80089f6 <UART_SetConfig+0x5a6>
 800887c:	2304      	movs	r3, #4
 800887e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008882:	e0b8      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008884:	2308      	movs	r3, #8
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888a:	e0b4      	b.n	80089f6 <UART_SetConfig+0x5a6>
 800888c:	2310      	movs	r3, #16
 800888e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008892:	e0b0      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008894:	2320      	movs	r3, #32
 8008896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800889a:	e0ac      	b.n	80089f6 <UART_SetConfig+0x5a6>
 800889c:	2340      	movs	r3, #64	; 0x40
 800889e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088a2:	e0a8      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80088a4:	2380      	movs	r3, #128	; 0x80
 80088a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088aa:	e0a4      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a8f      	ldr	r2, [pc, #572]	; (8008af0 <UART_SetConfig+0x6a0>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d130      	bne.n	8008918 <UART_SetConfig+0x4c8>
 80088b6:	4b8d      	ldr	r3, [pc, #564]	; (8008aec <UART_SetConfig+0x69c>)
 80088b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ba:	f003 0307 	and.w	r3, r3, #7
 80088be:	2b05      	cmp	r3, #5
 80088c0:	d826      	bhi.n	8008910 <UART_SetConfig+0x4c0>
 80088c2:	a201      	add	r2, pc, #4	; (adr r2, 80088c8 <UART_SetConfig+0x478>)
 80088c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c8:	080088e1 	.word	0x080088e1
 80088cc:	080088e9 	.word	0x080088e9
 80088d0:	080088f1 	.word	0x080088f1
 80088d4:	080088f9 	.word	0x080088f9
 80088d8:	08008901 	.word	0x08008901
 80088dc:	08008909 	.word	0x08008909
 80088e0:	2300      	movs	r3, #0
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088e6:	e086      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80088e8:	2304      	movs	r3, #4
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ee:	e082      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80088f0:	2308      	movs	r3, #8
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088f6:	e07e      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80088f8:	2310      	movs	r3, #16
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fe:	e07a      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008900:	2320      	movs	r3, #32
 8008902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008906:	e076      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008908:	2340      	movs	r3, #64	; 0x40
 800890a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890e:	e072      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008910:	2380      	movs	r3, #128	; 0x80
 8008912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008916:	e06e      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a75      	ldr	r2, [pc, #468]	; (8008af4 <UART_SetConfig+0x6a4>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d130      	bne.n	8008984 <UART_SetConfig+0x534>
 8008922:	4b72      	ldr	r3, [pc, #456]	; (8008aec <UART_SetConfig+0x69c>)
 8008924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008926:	f003 0307 	and.w	r3, r3, #7
 800892a:	2b05      	cmp	r3, #5
 800892c:	d826      	bhi.n	800897c <UART_SetConfig+0x52c>
 800892e:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <UART_SetConfig+0x4e4>)
 8008930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008934:	0800894d 	.word	0x0800894d
 8008938:	08008955 	.word	0x08008955
 800893c:	0800895d 	.word	0x0800895d
 8008940:	08008965 	.word	0x08008965
 8008944:	0800896d 	.word	0x0800896d
 8008948:	08008975 	.word	0x08008975
 800894c:	2300      	movs	r3, #0
 800894e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008952:	e050      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008954:	2304      	movs	r3, #4
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800895a:	e04c      	b.n	80089f6 <UART_SetConfig+0x5a6>
 800895c:	2308      	movs	r3, #8
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008962:	e048      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008964:	2310      	movs	r3, #16
 8008966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896a:	e044      	b.n	80089f6 <UART_SetConfig+0x5a6>
 800896c:	2320      	movs	r3, #32
 800896e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008972:	e040      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008974:	2340      	movs	r3, #64	; 0x40
 8008976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897a:	e03c      	b.n	80089f6 <UART_SetConfig+0x5a6>
 800897c:	2380      	movs	r3, #128	; 0x80
 800897e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008982:	e038      	b.n	80089f6 <UART_SetConfig+0x5a6>
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a5b      	ldr	r2, [pc, #364]	; (8008af8 <UART_SetConfig+0x6a8>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d130      	bne.n	80089f0 <UART_SetConfig+0x5a0>
 800898e:	4b57      	ldr	r3, [pc, #348]	; (8008aec <UART_SetConfig+0x69c>)
 8008990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008992:	f003 0307 	and.w	r3, r3, #7
 8008996:	2b05      	cmp	r3, #5
 8008998:	d826      	bhi.n	80089e8 <UART_SetConfig+0x598>
 800899a:	a201      	add	r2, pc, #4	; (adr r2, 80089a0 <UART_SetConfig+0x550>)
 800899c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a0:	080089b9 	.word	0x080089b9
 80089a4:	080089c1 	.word	0x080089c1
 80089a8:	080089c9 	.word	0x080089c9
 80089ac:	080089d1 	.word	0x080089d1
 80089b0:	080089d9 	.word	0x080089d9
 80089b4:	080089e1 	.word	0x080089e1
 80089b8:	2302      	movs	r3, #2
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089be:	e01a      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80089c0:	2304      	movs	r3, #4
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089c6:	e016      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80089c8:	2308      	movs	r3, #8
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ce:	e012      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80089d0:	2310      	movs	r3, #16
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089d6:	e00e      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80089d8:	2320      	movs	r3, #32
 80089da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089de:	e00a      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80089e0:	2340      	movs	r3, #64	; 0x40
 80089e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089e6:	e006      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80089e8:	2380      	movs	r3, #128	; 0x80
 80089ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ee:	e002      	b.n	80089f6 <UART_SetConfig+0x5a6>
 80089f0:	2380      	movs	r3, #128	; 0x80
 80089f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a3f      	ldr	r2, [pc, #252]	; (8008af8 <UART_SetConfig+0x6a8>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	f040 80f8 	bne.w	8008bf2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a06:	2b20      	cmp	r3, #32
 8008a08:	dc46      	bgt.n	8008a98 <UART_SetConfig+0x648>
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	f2c0 8082 	blt.w	8008b14 <UART_SetConfig+0x6c4>
 8008a10:	3b02      	subs	r3, #2
 8008a12:	2b1e      	cmp	r3, #30
 8008a14:	d87e      	bhi.n	8008b14 <UART_SetConfig+0x6c4>
 8008a16:	a201      	add	r2, pc, #4	; (adr r2, 8008a1c <UART_SetConfig+0x5cc>)
 8008a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1c:	08008a9f 	.word	0x08008a9f
 8008a20:	08008b15 	.word	0x08008b15
 8008a24:	08008aa7 	.word	0x08008aa7
 8008a28:	08008b15 	.word	0x08008b15
 8008a2c:	08008b15 	.word	0x08008b15
 8008a30:	08008b15 	.word	0x08008b15
 8008a34:	08008ab7 	.word	0x08008ab7
 8008a38:	08008b15 	.word	0x08008b15
 8008a3c:	08008b15 	.word	0x08008b15
 8008a40:	08008b15 	.word	0x08008b15
 8008a44:	08008b15 	.word	0x08008b15
 8008a48:	08008b15 	.word	0x08008b15
 8008a4c:	08008b15 	.word	0x08008b15
 8008a50:	08008b15 	.word	0x08008b15
 8008a54:	08008ac7 	.word	0x08008ac7
 8008a58:	08008b15 	.word	0x08008b15
 8008a5c:	08008b15 	.word	0x08008b15
 8008a60:	08008b15 	.word	0x08008b15
 8008a64:	08008b15 	.word	0x08008b15
 8008a68:	08008b15 	.word	0x08008b15
 8008a6c:	08008b15 	.word	0x08008b15
 8008a70:	08008b15 	.word	0x08008b15
 8008a74:	08008b15 	.word	0x08008b15
 8008a78:	08008b15 	.word	0x08008b15
 8008a7c:	08008b15 	.word	0x08008b15
 8008a80:	08008b15 	.word	0x08008b15
 8008a84:	08008b15 	.word	0x08008b15
 8008a88:	08008b15 	.word	0x08008b15
 8008a8c:	08008b15 	.word	0x08008b15
 8008a90:	08008b15 	.word	0x08008b15
 8008a94:	08008b07 	.word	0x08008b07
 8008a98:	2b40      	cmp	r3, #64	; 0x40
 8008a9a:	d037      	beq.n	8008b0c <UART_SetConfig+0x6bc>
 8008a9c:	e03a      	b.n	8008b14 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a9e:	f7fd ffdf 	bl	8006a60 <HAL_RCCEx_GetD3PCLK1Freq>
 8008aa2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008aa4:	e03c      	b.n	8008b20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fd ffee 	bl	8006a8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ab4:	e034      	b.n	8008b20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ab6:	f107 0318 	add.w	r3, r7, #24
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe f93a 	bl	8006d34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ac4:	e02c      	b.n	8008b20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ac6:	4b09      	ldr	r3, [pc, #36]	; (8008aec <UART_SetConfig+0x69c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d016      	beq.n	8008b00 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ad2:	4b06      	ldr	r3, [pc, #24]	; (8008aec <UART_SetConfig+0x69c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	08db      	lsrs	r3, r3, #3
 8008ad8:	f003 0303 	and.w	r3, r3, #3
 8008adc:	4a07      	ldr	r2, [pc, #28]	; (8008afc <UART_SetConfig+0x6ac>)
 8008ade:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ae4:	e01c      	b.n	8008b20 <UART_SetConfig+0x6d0>
 8008ae6:	bf00      	nop
 8008ae8:	40011400 	.word	0x40011400
 8008aec:	58024400 	.word	0x58024400
 8008af0:	40007800 	.word	0x40007800
 8008af4:	40007c00 	.word	0x40007c00
 8008af8:	58000c00 	.word	0x58000c00
 8008afc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008b00:	4b9d      	ldr	r3, [pc, #628]	; (8008d78 <UART_SetConfig+0x928>)
 8008b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b04:	e00c      	b.n	8008b20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b06:	4b9d      	ldr	r3, [pc, #628]	; (8008d7c <UART_SetConfig+0x92c>)
 8008b08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b0a:	e009      	b.n	8008b20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b12:	e005      	b.n	8008b20 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008b1e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f000 81de 	beq.w	8008ee4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	4a94      	ldr	r2, [pc, #592]	; (8008d80 <UART_SetConfig+0x930>)
 8008b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b32:	461a      	mov	r2, r3
 8008b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b36:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b3a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	4613      	mov	r3, r2
 8008b42:	005b      	lsls	r3, r3, #1
 8008b44:	4413      	add	r3, r2
 8008b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d305      	bcc.n	8008b58 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d903      	bls.n	8008b60 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008b5e:	e1c1      	b.n	8008ee4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b62:	2200      	movs	r2, #0
 8008b64:	60bb      	str	r3, [r7, #8]
 8008b66:	60fa      	str	r2, [r7, #12]
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	4a84      	ldr	r2, [pc, #528]	; (8008d80 <UART_SetConfig+0x930>)
 8008b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	2200      	movs	r2, #0
 8008b76:	603b      	str	r3, [r7, #0]
 8008b78:	607a      	str	r2, [r7, #4]
 8008b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b82:	f7f7 fc05 	bl	8000390 <__aeabi_uldivmod>
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	f04f 0200 	mov.w	r2, #0
 8008b92:	f04f 0300 	mov.w	r3, #0
 8008b96:	020b      	lsls	r3, r1, #8
 8008b98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b9c:	0202      	lsls	r2, r0, #8
 8008b9e:	6979      	ldr	r1, [r7, #20]
 8008ba0:	6849      	ldr	r1, [r1, #4]
 8008ba2:	0849      	lsrs	r1, r1, #1
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	460c      	mov	r4, r1
 8008ba8:	4605      	mov	r5, r0
 8008baa:	eb12 0804 	adds.w	r8, r2, r4
 8008bae:	eb43 0905 	adc.w	r9, r3, r5
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	469a      	mov	sl, r3
 8008bba:	4693      	mov	fp, r2
 8008bbc:	4652      	mov	r2, sl
 8008bbe:	465b      	mov	r3, fp
 8008bc0:	4640      	mov	r0, r8
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	f7f7 fbe4 	bl	8000390 <__aeabi_uldivmod>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4613      	mov	r3, r2
 8008bce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bd6:	d308      	bcc.n	8008bea <UART_SetConfig+0x79a>
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bde:	d204      	bcs.n	8008bea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008be6:	60da      	str	r2, [r3, #12]
 8008be8:	e17c      	b.n	8008ee4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008bf0:	e178      	b.n	8008ee4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bfa:	f040 80c5 	bne.w	8008d88 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008bfe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008c02:	2b20      	cmp	r3, #32
 8008c04:	dc48      	bgt.n	8008c98 <UART_SetConfig+0x848>
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	db7b      	blt.n	8008d02 <UART_SetConfig+0x8b2>
 8008c0a:	2b20      	cmp	r3, #32
 8008c0c:	d879      	bhi.n	8008d02 <UART_SetConfig+0x8b2>
 8008c0e:	a201      	add	r2, pc, #4	; (adr r2, 8008c14 <UART_SetConfig+0x7c4>)
 8008c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c14:	08008c9f 	.word	0x08008c9f
 8008c18:	08008ca7 	.word	0x08008ca7
 8008c1c:	08008d03 	.word	0x08008d03
 8008c20:	08008d03 	.word	0x08008d03
 8008c24:	08008caf 	.word	0x08008caf
 8008c28:	08008d03 	.word	0x08008d03
 8008c2c:	08008d03 	.word	0x08008d03
 8008c30:	08008d03 	.word	0x08008d03
 8008c34:	08008cbf 	.word	0x08008cbf
 8008c38:	08008d03 	.word	0x08008d03
 8008c3c:	08008d03 	.word	0x08008d03
 8008c40:	08008d03 	.word	0x08008d03
 8008c44:	08008d03 	.word	0x08008d03
 8008c48:	08008d03 	.word	0x08008d03
 8008c4c:	08008d03 	.word	0x08008d03
 8008c50:	08008d03 	.word	0x08008d03
 8008c54:	08008ccf 	.word	0x08008ccf
 8008c58:	08008d03 	.word	0x08008d03
 8008c5c:	08008d03 	.word	0x08008d03
 8008c60:	08008d03 	.word	0x08008d03
 8008c64:	08008d03 	.word	0x08008d03
 8008c68:	08008d03 	.word	0x08008d03
 8008c6c:	08008d03 	.word	0x08008d03
 8008c70:	08008d03 	.word	0x08008d03
 8008c74:	08008d03 	.word	0x08008d03
 8008c78:	08008d03 	.word	0x08008d03
 8008c7c:	08008d03 	.word	0x08008d03
 8008c80:	08008d03 	.word	0x08008d03
 8008c84:	08008d03 	.word	0x08008d03
 8008c88:	08008d03 	.word	0x08008d03
 8008c8c:	08008d03 	.word	0x08008d03
 8008c90:	08008d03 	.word	0x08008d03
 8008c94:	08008cf5 	.word	0x08008cf5
 8008c98:	2b40      	cmp	r3, #64	; 0x40
 8008c9a:	d02e      	beq.n	8008cfa <UART_SetConfig+0x8aa>
 8008c9c:	e031      	b.n	8008d02 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c9e:	f7fc fa9b 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 8008ca2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ca4:	e033      	b.n	8008d0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ca6:	f7fc faad 	bl	8005204 <HAL_RCC_GetPCLK2Freq>
 8008caa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008cac:	e02f      	b.n	8008d0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fd feea 	bl	8006a8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cbc:	e027      	b.n	8008d0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cbe:	f107 0318 	add.w	r3, r7, #24
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fe f836 	bl	8006d34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ccc:	e01f      	b.n	8008d0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cce:	4b2d      	ldr	r3, [pc, #180]	; (8008d84 <UART_SetConfig+0x934>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0320 	and.w	r3, r3, #32
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d009      	beq.n	8008cee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cda:	4b2a      	ldr	r3, [pc, #168]	; (8008d84 <UART_SetConfig+0x934>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	08db      	lsrs	r3, r3, #3
 8008ce0:	f003 0303 	and.w	r3, r3, #3
 8008ce4:	4a24      	ldr	r2, [pc, #144]	; (8008d78 <UART_SetConfig+0x928>)
 8008ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cec:	e00f      	b.n	8008d0e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008cee:	4b22      	ldr	r3, [pc, #136]	; (8008d78 <UART_SetConfig+0x928>)
 8008cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cf2:	e00c      	b.n	8008d0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cf4:	4b21      	ldr	r3, [pc, #132]	; (8008d7c <UART_SetConfig+0x92c>)
 8008cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cf8:	e009      	b.n	8008d0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d00:	e005      	b.n	8008d0e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008d02:	2300      	movs	r3, #0
 8008d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008d0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 80e7 	beq.w	8008ee4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1a:	4a19      	ldr	r2, [pc, #100]	; (8008d80 <UART_SetConfig+0x930>)
 8008d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d20:	461a      	mov	r2, r3
 8008d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d28:	005a      	lsls	r2, r3, #1
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	085b      	lsrs	r3, r3, #1
 8008d30:	441a      	add	r2, r3
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d3a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3e:	2b0f      	cmp	r3, #15
 8008d40:	d916      	bls.n	8008d70 <UART_SetConfig+0x920>
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d48:	d212      	bcs.n	8008d70 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	f023 030f 	bic.w	r3, r3, #15
 8008d52:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d56:	085b      	lsrs	r3, r3, #1
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	f003 0307 	and.w	r3, r3, #7
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008d62:	4313      	orrs	r3, r2
 8008d64:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008d6c:	60da      	str	r2, [r3, #12]
 8008d6e:	e0b9      	b.n	8008ee4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d76:	e0b5      	b.n	8008ee4 <UART_SetConfig+0xa94>
 8008d78:	03d09000 	.word	0x03d09000
 8008d7c:	003d0900 	.word	0x003d0900
 8008d80:	0800c054 	.word	0x0800c054
 8008d84:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d8c:	2b20      	cmp	r3, #32
 8008d8e:	dc49      	bgt.n	8008e24 <UART_SetConfig+0x9d4>
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	db7c      	blt.n	8008e8e <UART_SetConfig+0xa3e>
 8008d94:	2b20      	cmp	r3, #32
 8008d96:	d87a      	bhi.n	8008e8e <UART_SetConfig+0xa3e>
 8008d98:	a201      	add	r2, pc, #4	; (adr r2, 8008da0 <UART_SetConfig+0x950>)
 8008d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9e:	bf00      	nop
 8008da0:	08008e2b 	.word	0x08008e2b
 8008da4:	08008e33 	.word	0x08008e33
 8008da8:	08008e8f 	.word	0x08008e8f
 8008dac:	08008e8f 	.word	0x08008e8f
 8008db0:	08008e3b 	.word	0x08008e3b
 8008db4:	08008e8f 	.word	0x08008e8f
 8008db8:	08008e8f 	.word	0x08008e8f
 8008dbc:	08008e8f 	.word	0x08008e8f
 8008dc0:	08008e4b 	.word	0x08008e4b
 8008dc4:	08008e8f 	.word	0x08008e8f
 8008dc8:	08008e8f 	.word	0x08008e8f
 8008dcc:	08008e8f 	.word	0x08008e8f
 8008dd0:	08008e8f 	.word	0x08008e8f
 8008dd4:	08008e8f 	.word	0x08008e8f
 8008dd8:	08008e8f 	.word	0x08008e8f
 8008ddc:	08008e8f 	.word	0x08008e8f
 8008de0:	08008e5b 	.word	0x08008e5b
 8008de4:	08008e8f 	.word	0x08008e8f
 8008de8:	08008e8f 	.word	0x08008e8f
 8008dec:	08008e8f 	.word	0x08008e8f
 8008df0:	08008e8f 	.word	0x08008e8f
 8008df4:	08008e8f 	.word	0x08008e8f
 8008df8:	08008e8f 	.word	0x08008e8f
 8008dfc:	08008e8f 	.word	0x08008e8f
 8008e00:	08008e8f 	.word	0x08008e8f
 8008e04:	08008e8f 	.word	0x08008e8f
 8008e08:	08008e8f 	.word	0x08008e8f
 8008e0c:	08008e8f 	.word	0x08008e8f
 8008e10:	08008e8f 	.word	0x08008e8f
 8008e14:	08008e8f 	.word	0x08008e8f
 8008e18:	08008e8f 	.word	0x08008e8f
 8008e1c:	08008e8f 	.word	0x08008e8f
 8008e20:	08008e81 	.word	0x08008e81
 8008e24:	2b40      	cmp	r3, #64	; 0x40
 8008e26:	d02e      	beq.n	8008e86 <UART_SetConfig+0xa36>
 8008e28:	e031      	b.n	8008e8e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e2a:	f7fc f9d5 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 8008e2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e30:	e033      	b.n	8008e9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e32:	f7fc f9e7 	bl	8005204 <HAL_RCC_GetPCLK2Freq>
 8008e36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e38:	e02f      	b.n	8008e9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fd fe24 	bl	8006a8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e48:	e027      	b.n	8008e9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e4a:	f107 0318 	add.w	r3, r7, #24
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fd ff70 	bl	8006d34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e58:	e01f      	b.n	8008e9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e5a:	4b2d      	ldr	r3, [pc, #180]	; (8008f10 <UART_SetConfig+0xac0>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0320 	and.w	r3, r3, #32
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d009      	beq.n	8008e7a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e66:	4b2a      	ldr	r3, [pc, #168]	; (8008f10 <UART_SetConfig+0xac0>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	08db      	lsrs	r3, r3, #3
 8008e6c:	f003 0303 	and.w	r3, r3, #3
 8008e70:	4a28      	ldr	r2, [pc, #160]	; (8008f14 <UART_SetConfig+0xac4>)
 8008e72:	fa22 f303 	lsr.w	r3, r2, r3
 8008e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e78:	e00f      	b.n	8008e9a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008e7a:	4b26      	ldr	r3, [pc, #152]	; (8008f14 <UART_SetConfig+0xac4>)
 8008e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e7e:	e00c      	b.n	8008e9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e80:	4b25      	ldr	r3, [pc, #148]	; (8008f18 <UART_SetConfig+0xac8>)
 8008e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e84:	e009      	b.n	8008e9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e8c:	e005      	b.n	8008e9a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e98:	bf00      	nop
    }

    if (pclk != 0U)
 8008e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d021      	beq.n	8008ee4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea4:	4a1d      	ldr	r2, [pc, #116]	; (8008f1c <UART_SetConfig+0xacc>)
 8008ea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eae:	fbb3 f2f2 	udiv	r2, r3, r2
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	085b      	lsrs	r3, r3, #1
 8008eb8:	441a      	add	r2, r3
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec6:	2b0f      	cmp	r3, #15
 8008ec8:	d909      	bls.n	8008ede <UART_SetConfig+0xa8e>
 8008eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ed0:	d205      	bcs.n	8008ede <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	60da      	str	r2, [r3, #12]
 8008edc:	e002      	b.n	8008ee4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	2200      	movs	r2, #0
 8008efe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008f00:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3748      	adds	r7, #72	; 0x48
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f0e:	bf00      	nop
 8008f10:	58024400 	.word	0x58024400
 8008f14:	03d09000 	.word	0x03d09000
 8008f18:	003d0900 	.word	0x003d0900
 8008f1c:	0800c054 	.word	0x0800c054

08008f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2c:	f003 0301 	and.w	r3, r3, #1
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00a      	beq.n	8008f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	430a      	orrs	r2, r1
 8008f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f4e:	f003 0302 	and.w	r3, r3, #2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00a      	beq.n	8008f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	430a      	orrs	r2, r1
 8008f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f70:	f003 0304 	and.w	r3, r3, #4
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00a      	beq.n	8008f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	430a      	orrs	r2, r1
 8008f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f92:	f003 0308 	and.w	r3, r3, #8
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00a      	beq.n	8008fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	430a      	orrs	r2, r1
 8008fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb4:	f003 0310 	and.w	r3, r3, #16
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00a      	beq.n	8008fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	430a      	orrs	r2, r1
 8008fd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd6:	f003 0320 	and.w	r3, r3, #32
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00a      	beq.n	8008ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	430a      	orrs	r2, r1
 8008ff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d01a      	beq.n	8009036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	430a      	orrs	r2, r1
 8009014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800901a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800901e:	d10a      	bne.n	8009036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	430a      	orrs	r2, r1
 8009034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00a      	beq.n	8009058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	430a      	orrs	r2, r1
 8009056:	605a      	str	r2, [r3, #4]
  }
}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af02      	add	r7, sp, #8
 800906a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009074:	f7f8 fbb2 	bl	80017dc <HAL_GetTick>
 8009078:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0308 	and.w	r3, r3, #8
 8009084:	2b08      	cmp	r3, #8
 8009086:	d10e      	bne.n	80090a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009088:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f82f 	bl	80090fa <UART_WaitOnFlagUntilTimeout>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e025      	b.n	80090f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 0304 	and.w	r3, r3, #4
 80090b0:	2b04      	cmp	r3, #4
 80090b2:	d10e      	bne.n	80090d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f819 	bl	80090fa <UART_WaitOnFlagUntilTimeout>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e00f      	b.n	80090f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2220      	movs	r2, #32
 80090d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2220      	movs	r2, #32
 80090de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b09c      	sub	sp, #112	; 0x70
 80090fe:	af00      	add	r7, sp, #0
 8009100:	60f8      	str	r0, [r7, #12]
 8009102:	60b9      	str	r1, [r7, #8]
 8009104:	603b      	str	r3, [r7, #0]
 8009106:	4613      	mov	r3, r2
 8009108:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800910a:	e0a9      	b.n	8009260 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800910c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800910e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009112:	f000 80a5 	beq.w	8009260 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009116:	f7f8 fb61 	bl	80017dc <HAL_GetTick>
 800911a:	4602      	mov	r2, r0
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009122:	429a      	cmp	r2, r3
 8009124:	d302      	bcc.n	800912c <UART_WaitOnFlagUntilTimeout+0x32>
 8009126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009128:	2b00      	cmp	r3, #0
 800912a:	d140      	bne.n	80091ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009134:	e853 3f00 	ldrex	r3, [r3]
 8009138:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800913a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800913c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009140:	667b      	str	r3, [r7, #100]	; 0x64
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	461a      	mov	r2, r3
 8009148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800914a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800914c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009150:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e6      	bne.n	800912c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3308      	adds	r3, #8
 8009164:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009168:	e853 3f00 	ldrex	r3, [r3]
 800916c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800916e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009170:	f023 0301 	bic.w	r3, r3, #1
 8009174:	663b      	str	r3, [r7, #96]	; 0x60
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3308      	adds	r3, #8
 800917c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800917e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009180:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009182:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009186:	e841 2300 	strex	r3, r2, [r1]
 800918a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800918c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1e5      	bne.n	800915e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2220      	movs	r2, #32
 8009196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2220      	movs	r2, #32
 800919e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e069      	b.n	8009282 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0304 	and.w	r3, r3, #4
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d051      	beq.n	8009260 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	69db      	ldr	r3, [r3, #28]
 80091c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091ca:	d149      	bne.n	8009260 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091de:	e853 3f00 	ldrex	r3, [r3]
 80091e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	461a      	mov	r2, r3
 80091f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f4:	637b      	str	r3, [r7, #52]	; 0x34
 80091f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091fc:	e841 2300 	strex	r3, r2, [r1]
 8009200:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1e6      	bne.n	80091d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3308      	adds	r3, #8
 800920e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	e853 3f00 	ldrex	r3, [r3]
 8009216:	613b      	str	r3, [r7, #16]
   return(result);
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	f023 0301 	bic.w	r3, r3, #1
 800921e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3308      	adds	r3, #8
 8009226:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009228:	623a      	str	r2, [r7, #32]
 800922a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922c:	69f9      	ldr	r1, [r7, #28]
 800922e:	6a3a      	ldr	r2, [r7, #32]
 8009230:	e841 2300 	strex	r3, r2, [r1]
 8009234:	61bb      	str	r3, [r7, #24]
   return(result);
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1e5      	bne.n	8009208 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2220      	movs	r2, #32
 8009240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2220      	movs	r2, #32
 8009248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2220      	movs	r2, #32
 8009250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e010      	b.n	8009282 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	69da      	ldr	r2, [r3, #28]
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	4013      	ands	r3, r2
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	429a      	cmp	r2, r3
 800926e:	bf0c      	ite	eq
 8009270:	2301      	moveq	r3, #1
 8009272:	2300      	movne	r3, #0
 8009274:	b2db      	uxtb	r3, r3
 8009276:	461a      	mov	r2, r3
 8009278:	79fb      	ldrb	r3, [r7, #7]
 800927a:	429a      	cmp	r2, r3
 800927c:	f43f af46 	beq.w	800910c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3770      	adds	r7, #112	; 0x70
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800928a:	b480      	push	{r7}
 800928c:	b085      	sub	sp, #20
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009298:	2b01      	cmp	r3, #1
 800929a:	d101      	bne.n	80092a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800929c:	2302      	movs	r3, #2
 800929e:	e027      	b.n	80092f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2224      	movs	r2, #36	; 0x24
 80092ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f022 0201 	bic.w	r2, r2, #1
 80092c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80092ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2220      	movs	r2, #32
 80092e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800930c:	2b01      	cmp	r3, #1
 800930e:	d101      	bne.n	8009314 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009310:	2302      	movs	r3, #2
 8009312:	e02d      	b.n	8009370 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2224      	movs	r2, #36	; 0x24
 8009320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f022 0201 	bic.w	r2, r2, #1
 800933a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	430a      	orrs	r2, r1
 800934e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f84f 	bl	80093f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2220      	movs	r2, #32
 8009362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009388:	2b01      	cmp	r3, #1
 800938a:	d101      	bne.n	8009390 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800938c:	2302      	movs	r3, #2
 800938e:	e02d      	b.n	80093ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2224      	movs	r2, #36	; 0x24
 800939c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f022 0201 	bic.w	r2, r2, #1
 80093b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	430a      	orrs	r2, r1
 80093ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f811 	bl	80093f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2220      	movs	r2, #32
 80093de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009400:	2b00      	cmp	r3, #0
 8009402:	d108      	bne.n	8009416 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009414:	e031      	b.n	800947a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009416:	2310      	movs	r3, #16
 8009418:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800941a:	2310      	movs	r3, #16
 800941c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	0e5b      	lsrs	r3, r3, #25
 8009426:	b2db      	uxtb	r3, r3
 8009428:	f003 0307 	and.w	r3, r3, #7
 800942c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	0f5b      	lsrs	r3, r3, #29
 8009436:	b2db      	uxtb	r3, r3
 8009438:	f003 0307 	and.w	r3, r3, #7
 800943c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	7b3a      	ldrb	r2, [r7, #12]
 8009442:	4911      	ldr	r1, [pc, #68]	; (8009488 <UARTEx_SetNbDataToProcess+0x94>)
 8009444:	5c8a      	ldrb	r2, [r1, r2]
 8009446:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800944a:	7b3a      	ldrb	r2, [r7, #12]
 800944c:	490f      	ldr	r1, [pc, #60]	; (800948c <UARTEx_SetNbDataToProcess+0x98>)
 800944e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009450:	fb93 f3f2 	sdiv	r3, r3, r2
 8009454:	b29a      	uxth	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800945c:	7bfb      	ldrb	r3, [r7, #15]
 800945e:	7b7a      	ldrb	r2, [r7, #13]
 8009460:	4909      	ldr	r1, [pc, #36]	; (8009488 <UARTEx_SetNbDataToProcess+0x94>)
 8009462:	5c8a      	ldrb	r2, [r1, r2]
 8009464:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009468:	7b7a      	ldrb	r2, [r7, #13]
 800946a:	4908      	ldr	r1, [pc, #32]	; (800948c <UARTEx_SetNbDataToProcess+0x98>)
 800946c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800946e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009472:	b29a      	uxth	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800947a:	bf00      	nop
 800947c:	3714      	adds	r7, #20
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	0800c06c 	.word	0x0800c06c
 800948c:	0800c074 	.word	0x0800c074

08009490 <__errno>:
 8009490:	4b01      	ldr	r3, [pc, #4]	; (8009498 <__errno+0x8>)
 8009492:	6818      	ldr	r0, [r3, #0]
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	24000010 	.word	0x24000010

0800949c <__libc_init_array>:
 800949c:	b570      	push	{r4, r5, r6, lr}
 800949e:	4d0d      	ldr	r5, [pc, #52]	; (80094d4 <__libc_init_array+0x38>)
 80094a0:	4c0d      	ldr	r4, [pc, #52]	; (80094d8 <__libc_init_array+0x3c>)
 80094a2:	1b64      	subs	r4, r4, r5
 80094a4:	10a4      	asrs	r4, r4, #2
 80094a6:	2600      	movs	r6, #0
 80094a8:	42a6      	cmp	r6, r4
 80094aa:	d109      	bne.n	80094c0 <__libc_init_array+0x24>
 80094ac:	4d0b      	ldr	r5, [pc, #44]	; (80094dc <__libc_init_array+0x40>)
 80094ae:	4c0c      	ldr	r4, [pc, #48]	; (80094e0 <__libc_init_array+0x44>)
 80094b0:	f002 fd1a 	bl	800bee8 <_init>
 80094b4:	1b64      	subs	r4, r4, r5
 80094b6:	10a4      	asrs	r4, r4, #2
 80094b8:	2600      	movs	r6, #0
 80094ba:	42a6      	cmp	r6, r4
 80094bc:	d105      	bne.n	80094ca <__libc_init_array+0x2e>
 80094be:	bd70      	pop	{r4, r5, r6, pc}
 80094c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c4:	4798      	blx	r3
 80094c6:	3601      	adds	r6, #1
 80094c8:	e7ee      	b.n	80094a8 <__libc_init_array+0xc>
 80094ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ce:	4798      	blx	r3
 80094d0:	3601      	adds	r6, #1
 80094d2:	e7f2      	b.n	80094ba <__libc_init_array+0x1e>
 80094d4:	0800c45c 	.word	0x0800c45c
 80094d8:	0800c45c 	.word	0x0800c45c
 80094dc:	0800c45c 	.word	0x0800c45c
 80094e0:	0800c460 	.word	0x0800c460

080094e4 <memcpy>:
 80094e4:	440a      	add	r2, r1
 80094e6:	4291      	cmp	r1, r2
 80094e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80094ec:	d100      	bne.n	80094f0 <memcpy+0xc>
 80094ee:	4770      	bx	lr
 80094f0:	b510      	push	{r4, lr}
 80094f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094fa:	4291      	cmp	r1, r2
 80094fc:	d1f9      	bne.n	80094f2 <memcpy+0xe>
 80094fe:	bd10      	pop	{r4, pc}

08009500 <memset>:
 8009500:	4402      	add	r2, r0
 8009502:	4603      	mov	r3, r0
 8009504:	4293      	cmp	r3, r2
 8009506:	d100      	bne.n	800950a <memset+0xa>
 8009508:	4770      	bx	lr
 800950a:	f803 1b01 	strb.w	r1, [r3], #1
 800950e:	e7f9      	b.n	8009504 <memset+0x4>

08009510 <__cvt>:
 8009510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009512:	ed2d 8b02 	vpush	{d8}
 8009516:	eeb0 8b40 	vmov.f64	d8, d0
 800951a:	b085      	sub	sp, #20
 800951c:	4617      	mov	r7, r2
 800951e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009520:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009522:	ee18 2a90 	vmov	r2, s17
 8009526:	f025 0520 	bic.w	r5, r5, #32
 800952a:	2a00      	cmp	r2, #0
 800952c:	bfb6      	itet	lt
 800952e:	222d      	movlt	r2, #45	; 0x2d
 8009530:	2200      	movge	r2, #0
 8009532:	eeb1 8b40 	vneglt.f64	d8, d0
 8009536:	2d46      	cmp	r5, #70	; 0x46
 8009538:	460c      	mov	r4, r1
 800953a:	701a      	strb	r2, [r3, #0]
 800953c:	d004      	beq.n	8009548 <__cvt+0x38>
 800953e:	2d45      	cmp	r5, #69	; 0x45
 8009540:	d100      	bne.n	8009544 <__cvt+0x34>
 8009542:	3401      	adds	r4, #1
 8009544:	2102      	movs	r1, #2
 8009546:	e000      	b.n	800954a <__cvt+0x3a>
 8009548:	2103      	movs	r1, #3
 800954a:	ab03      	add	r3, sp, #12
 800954c:	9301      	str	r3, [sp, #4]
 800954e:	ab02      	add	r3, sp, #8
 8009550:	9300      	str	r3, [sp, #0]
 8009552:	4622      	mov	r2, r4
 8009554:	4633      	mov	r3, r6
 8009556:	eeb0 0b48 	vmov.f64	d0, d8
 800955a:	f000 fdf5 	bl	800a148 <_dtoa_r>
 800955e:	2d47      	cmp	r5, #71	; 0x47
 8009560:	d101      	bne.n	8009566 <__cvt+0x56>
 8009562:	07fb      	lsls	r3, r7, #31
 8009564:	d51a      	bpl.n	800959c <__cvt+0x8c>
 8009566:	2d46      	cmp	r5, #70	; 0x46
 8009568:	eb00 0204 	add.w	r2, r0, r4
 800956c:	d10c      	bne.n	8009588 <__cvt+0x78>
 800956e:	7803      	ldrb	r3, [r0, #0]
 8009570:	2b30      	cmp	r3, #48	; 0x30
 8009572:	d107      	bne.n	8009584 <__cvt+0x74>
 8009574:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800957c:	bf1c      	itt	ne
 800957e:	f1c4 0401 	rsbne	r4, r4, #1
 8009582:	6034      	strne	r4, [r6, #0]
 8009584:	6833      	ldr	r3, [r6, #0]
 8009586:	441a      	add	r2, r3
 8009588:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800958c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009590:	bf08      	it	eq
 8009592:	9203      	streq	r2, [sp, #12]
 8009594:	2130      	movs	r1, #48	; 0x30
 8009596:	9b03      	ldr	r3, [sp, #12]
 8009598:	4293      	cmp	r3, r2
 800959a:	d307      	bcc.n	80095ac <__cvt+0x9c>
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095a0:	1a1b      	subs	r3, r3, r0
 80095a2:	6013      	str	r3, [r2, #0]
 80095a4:	b005      	add	sp, #20
 80095a6:	ecbd 8b02 	vpop	{d8}
 80095aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ac:	1c5c      	adds	r4, r3, #1
 80095ae:	9403      	str	r4, [sp, #12]
 80095b0:	7019      	strb	r1, [r3, #0]
 80095b2:	e7f0      	b.n	8009596 <__cvt+0x86>

080095b4 <__exponent>:
 80095b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095b6:	4603      	mov	r3, r0
 80095b8:	2900      	cmp	r1, #0
 80095ba:	bfb8      	it	lt
 80095bc:	4249      	neglt	r1, r1
 80095be:	f803 2b02 	strb.w	r2, [r3], #2
 80095c2:	bfb4      	ite	lt
 80095c4:	222d      	movlt	r2, #45	; 0x2d
 80095c6:	222b      	movge	r2, #43	; 0x2b
 80095c8:	2909      	cmp	r1, #9
 80095ca:	7042      	strb	r2, [r0, #1]
 80095cc:	dd2a      	ble.n	8009624 <__exponent+0x70>
 80095ce:	f10d 0407 	add.w	r4, sp, #7
 80095d2:	46a4      	mov	ip, r4
 80095d4:	270a      	movs	r7, #10
 80095d6:	46a6      	mov	lr, r4
 80095d8:	460a      	mov	r2, r1
 80095da:	fb91 f6f7 	sdiv	r6, r1, r7
 80095de:	fb07 1516 	mls	r5, r7, r6, r1
 80095e2:	3530      	adds	r5, #48	; 0x30
 80095e4:	2a63      	cmp	r2, #99	; 0x63
 80095e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80095ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80095ee:	4631      	mov	r1, r6
 80095f0:	dcf1      	bgt.n	80095d6 <__exponent+0x22>
 80095f2:	3130      	adds	r1, #48	; 0x30
 80095f4:	f1ae 0502 	sub.w	r5, lr, #2
 80095f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80095fc:	1c44      	adds	r4, r0, #1
 80095fe:	4629      	mov	r1, r5
 8009600:	4561      	cmp	r1, ip
 8009602:	d30a      	bcc.n	800961a <__exponent+0x66>
 8009604:	f10d 0209 	add.w	r2, sp, #9
 8009608:	eba2 020e 	sub.w	r2, r2, lr
 800960c:	4565      	cmp	r5, ip
 800960e:	bf88      	it	hi
 8009610:	2200      	movhi	r2, #0
 8009612:	4413      	add	r3, r2
 8009614:	1a18      	subs	r0, r3, r0
 8009616:	b003      	add	sp, #12
 8009618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800961a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800961e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009622:	e7ed      	b.n	8009600 <__exponent+0x4c>
 8009624:	2330      	movs	r3, #48	; 0x30
 8009626:	3130      	adds	r1, #48	; 0x30
 8009628:	7083      	strb	r3, [r0, #2]
 800962a:	70c1      	strb	r1, [r0, #3]
 800962c:	1d03      	adds	r3, r0, #4
 800962e:	e7f1      	b.n	8009614 <__exponent+0x60>

08009630 <_printf_float>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	b08b      	sub	sp, #44	; 0x2c
 8009636:	460c      	mov	r4, r1
 8009638:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800963c:	4616      	mov	r6, r2
 800963e:	461f      	mov	r7, r3
 8009640:	4605      	mov	r5, r0
 8009642:	f001 fca7 	bl	800af94 <_localeconv_r>
 8009646:	f8d0 b000 	ldr.w	fp, [r0]
 800964a:	4658      	mov	r0, fp
 800964c:	f7f6 fe48 	bl	80002e0 <strlen>
 8009650:	2300      	movs	r3, #0
 8009652:	9308      	str	r3, [sp, #32]
 8009654:	f8d8 3000 	ldr.w	r3, [r8]
 8009658:	f894 9018 	ldrb.w	r9, [r4, #24]
 800965c:	6822      	ldr	r2, [r4, #0]
 800965e:	3307      	adds	r3, #7
 8009660:	f023 0307 	bic.w	r3, r3, #7
 8009664:	f103 0108 	add.w	r1, r3, #8
 8009668:	f8c8 1000 	str.w	r1, [r8]
 800966c:	4682      	mov	sl, r0
 800966e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009672:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009676:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80098d8 <_printf_float+0x2a8>
 800967a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800967e:	eeb0 6bc0 	vabs.f64	d6, d0
 8009682:	eeb4 6b47 	vcmp.f64	d6, d7
 8009686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800968a:	dd24      	ble.n	80096d6 <_printf_float+0xa6>
 800968c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009694:	d502      	bpl.n	800969c <_printf_float+0x6c>
 8009696:	232d      	movs	r3, #45	; 0x2d
 8009698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800969c:	4b90      	ldr	r3, [pc, #576]	; (80098e0 <_printf_float+0x2b0>)
 800969e:	4891      	ldr	r0, [pc, #580]	; (80098e4 <_printf_float+0x2b4>)
 80096a0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80096a4:	bf94      	ite	ls
 80096a6:	4698      	movls	r8, r3
 80096a8:	4680      	movhi	r8, r0
 80096aa:	2303      	movs	r3, #3
 80096ac:	6123      	str	r3, [r4, #16]
 80096ae:	f022 0204 	bic.w	r2, r2, #4
 80096b2:	2300      	movs	r3, #0
 80096b4:	6022      	str	r2, [r4, #0]
 80096b6:	9304      	str	r3, [sp, #16]
 80096b8:	9700      	str	r7, [sp, #0]
 80096ba:	4633      	mov	r3, r6
 80096bc:	aa09      	add	r2, sp, #36	; 0x24
 80096be:	4621      	mov	r1, r4
 80096c0:	4628      	mov	r0, r5
 80096c2:	f000 f9d3 	bl	8009a6c <_printf_common>
 80096c6:	3001      	adds	r0, #1
 80096c8:	f040 808a 	bne.w	80097e0 <_printf_float+0x1b0>
 80096cc:	f04f 30ff 	mov.w	r0, #4294967295
 80096d0:	b00b      	add	sp, #44	; 0x2c
 80096d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d6:	eeb4 0b40 	vcmp.f64	d0, d0
 80096da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096de:	d709      	bvc.n	80096f4 <_printf_float+0xc4>
 80096e0:	ee10 3a90 	vmov	r3, s1
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	bfbc      	itt	lt
 80096e8:	232d      	movlt	r3, #45	; 0x2d
 80096ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80096ee:	487e      	ldr	r0, [pc, #504]	; (80098e8 <_printf_float+0x2b8>)
 80096f0:	4b7e      	ldr	r3, [pc, #504]	; (80098ec <_printf_float+0x2bc>)
 80096f2:	e7d5      	b.n	80096a0 <_printf_float+0x70>
 80096f4:	6863      	ldr	r3, [r4, #4]
 80096f6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80096fa:	9104      	str	r1, [sp, #16]
 80096fc:	1c59      	adds	r1, r3, #1
 80096fe:	d13c      	bne.n	800977a <_printf_float+0x14a>
 8009700:	2306      	movs	r3, #6
 8009702:	6063      	str	r3, [r4, #4]
 8009704:	2300      	movs	r3, #0
 8009706:	9303      	str	r3, [sp, #12]
 8009708:	ab08      	add	r3, sp, #32
 800970a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800970e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009712:	ab07      	add	r3, sp, #28
 8009714:	6861      	ldr	r1, [r4, #4]
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	6022      	str	r2, [r4, #0]
 800971a:	f10d 031b 	add.w	r3, sp, #27
 800971e:	4628      	mov	r0, r5
 8009720:	f7ff fef6 	bl	8009510 <__cvt>
 8009724:	9b04      	ldr	r3, [sp, #16]
 8009726:	9907      	ldr	r1, [sp, #28]
 8009728:	2b47      	cmp	r3, #71	; 0x47
 800972a:	4680      	mov	r8, r0
 800972c:	d108      	bne.n	8009740 <_printf_float+0x110>
 800972e:	1cc8      	adds	r0, r1, #3
 8009730:	db02      	blt.n	8009738 <_printf_float+0x108>
 8009732:	6863      	ldr	r3, [r4, #4]
 8009734:	4299      	cmp	r1, r3
 8009736:	dd41      	ble.n	80097bc <_printf_float+0x18c>
 8009738:	f1a9 0902 	sub.w	r9, r9, #2
 800973c:	fa5f f989 	uxtb.w	r9, r9
 8009740:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009744:	d820      	bhi.n	8009788 <_printf_float+0x158>
 8009746:	3901      	subs	r1, #1
 8009748:	464a      	mov	r2, r9
 800974a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800974e:	9107      	str	r1, [sp, #28]
 8009750:	f7ff ff30 	bl	80095b4 <__exponent>
 8009754:	9a08      	ldr	r2, [sp, #32]
 8009756:	9004      	str	r0, [sp, #16]
 8009758:	1813      	adds	r3, r2, r0
 800975a:	2a01      	cmp	r2, #1
 800975c:	6123      	str	r3, [r4, #16]
 800975e:	dc02      	bgt.n	8009766 <_printf_float+0x136>
 8009760:	6822      	ldr	r2, [r4, #0]
 8009762:	07d2      	lsls	r2, r2, #31
 8009764:	d501      	bpl.n	800976a <_printf_float+0x13a>
 8009766:	3301      	adds	r3, #1
 8009768:	6123      	str	r3, [r4, #16]
 800976a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0a2      	beq.n	80096b8 <_printf_float+0x88>
 8009772:	232d      	movs	r3, #45	; 0x2d
 8009774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009778:	e79e      	b.n	80096b8 <_printf_float+0x88>
 800977a:	9904      	ldr	r1, [sp, #16]
 800977c:	2947      	cmp	r1, #71	; 0x47
 800977e:	d1c1      	bne.n	8009704 <_printf_float+0xd4>
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1bf      	bne.n	8009704 <_printf_float+0xd4>
 8009784:	2301      	movs	r3, #1
 8009786:	e7bc      	b.n	8009702 <_printf_float+0xd2>
 8009788:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800978c:	d118      	bne.n	80097c0 <_printf_float+0x190>
 800978e:	2900      	cmp	r1, #0
 8009790:	6863      	ldr	r3, [r4, #4]
 8009792:	dd0b      	ble.n	80097ac <_printf_float+0x17c>
 8009794:	6121      	str	r1, [r4, #16]
 8009796:	b913      	cbnz	r3, 800979e <_printf_float+0x16e>
 8009798:	6822      	ldr	r2, [r4, #0]
 800979a:	07d0      	lsls	r0, r2, #31
 800979c:	d502      	bpl.n	80097a4 <_printf_float+0x174>
 800979e:	3301      	adds	r3, #1
 80097a0:	440b      	add	r3, r1
 80097a2:	6123      	str	r3, [r4, #16]
 80097a4:	2300      	movs	r3, #0
 80097a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80097a8:	9304      	str	r3, [sp, #16]
 80097aa:	e7de      	b.n	800976a <_printf_float+0x13a>
 80097ac:	b913      	cbnz	r3, 80097b4 <_printf_float+0x184>
 80097ae:	6822      	ldr	r2, [r4, #0]
 80097b0:	07d2      	lsls	r2, r2, #31
 80097b2:	d501      	bpl.n	80097b8 <_printf_float+0x188>
 80097b4:	3302      	adds	r3, #2
 80097b6:	e7f4      	b.n	80097a2 <_printf_float+0x172>
 80097b8:	2301      	movs	r3, #1
 80097ba:	e7f2      	b.n	80097a2 <_printf_float+0x172>
 80097bc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80097c0:	9b08      	ldr	r3, [sp, #32]
 80097c2:	4299      	cmp	r1, r3
 80097c4:	db05      	blt.n	80097d2 <_printf_float+0x1a2>
 80097c6:	6823      	ldr	r3, [r4, #0]
 80097c8:	6121      	str	r1, [r4, #16]
 80097ca:	07d8      	lsls	r0, r3, #31
 80097cc:	d5ea      	bpl.n	80097a4 <_printf_float+0x174>
 80097ce:	1c4b      	adds	r3, r1, #1
 80097d0:	e7e7      	b.n	80097a2 <_printf_float+0x172>
 80097d2:	2900      	cmp	r1, #0
 80097d4:	bfd4      	ite	le
 80097d6:	f1c1 0202 	rsble	r2, r1, #2
 80097da:	2201      	movgt	r2, #1
 80097dc:	4413      	add	r3, r2
 80097de:	e7e0      	b.n	80097a2 <_printf_float+0x172>
 80097e0:	6823      	ldr	r3, [r4, #0]
 80097e2:	055a      	lsls	r2, r3, #21
 80097e4:	d407      	bmi.n	80097f6 <_printf_float+0x1c6>
 80097e6:	6923      	ldr	r3, [r4, #16]
 80097e8:	4642      	mov	r2, r8
 80097ea:	4631      	mov	r1, r6
 80097ec:	4628      	mov	r0, r5
 80097ee:	47b8      	blx	r7
 80097f0:	3001      	adds	r0, #1
 80097f2:	d12a      	bne.n	800984a <_printf_float+0x21a>
 80097f4:	e76a      	b.n	80096cc <_printf_float+0x9c>
 80097f6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80097fa:	f240 80e2 	bls.w	80099c2 <_printf_float+0x392>
 80097fe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009802:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800980a:	d133      	bne.n	8009874 <_printf_float+0x244>
 800980c:	4a38      	ldr	r2, [pc, #224]	; (80098f0 <_printf_float+0x2c0>)
 800980e:	2301      	movs	r3, #1
 8009810:	4631      	mov	r1, r6
 8009812:	4628      	mov	r0, r5
 8009814:	47b8      	blx	r7
 8009816:	3001      	adds	r0, #1
 8009818:	f43f af58 	beq.w	80096cc <_printf_float+0x9c>
 800981c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009820:	429a      	cmp	r2, r3
 8009822:	db02      	blt.n	800982a <_printf_float+0x1fa>
 8009824:	6823      	ldr	r3, [r4, #0]
 8009826:	07d8      	lsls	r0, r3, #31
 8009828:	d50f      	bpl.n	800984a <_printf_float+0x21a>
 800982a:	4653      	mov	r3, sl
 800982c:	465a      	mov	r2, fp
 800982e:	4631      	mov	r1, r6
 8009830:	4628      	mov	r0, r5
 8009832:	47b8      	blx	r7
 8009834:	3001      	adds	r0, #1
 8009836:	f43f af49 	beq.w	80096cc <_printf_float+0x9c>
 800983a:	f04f 0800 	mov.w	r8, #0
 800983e:	f104 091a 	add.w	r9, r4, #26
 8009842:	9b08      	ldr	r3, [sp, #32]
 8009844:	3b01      	subs	r3, #1
 8009846:	4543      	cmp	r3, r8
 8009848:	dc09      	bgt.n	800985e <_printf_float+0x22e>
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	079b      	lsls	r3, r3, #30
 800984e:	f100 8108 	bmi.w	8009a62 <_printf_float+0x432>
 8009852:	68e0      	ldr	r0, [r4, #12]
 8009854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009856:	4298      	cmp	r0, r3
 8009858:	bfb8      	it	lt
 800985a:	4618      	movlt	r0, r3
 800985c:	e738      	b.n	80096d0 <_printf_float+0xa0>
 800985e:	2301      	movs	r3, #1
 8009860:	464a      	mov	r2, r9
 8009862:	4631      	mov	r1, r6
 8009864:	4628      	mov	r0, r5
 8009866:	47b8      	blx	r7
 8009868:	3001      	adds	r0, #1
 800986a:	f43f af2f 	beq.w	80096cc <_printf_float+0x9c>
 800986e:	f108 0801 	add.w	r8, r8, #1
 8009872:	e7e6      	b.n	8009842 <_printf_float+0x212>
 8009874:	9b07      	ldr	r3, [sp, #28]
 8009876:	2b00      	cmp	r3, #0
 8009878:	dc3c      	bgt.n	80098f4 <_printf_float+0x2c4>
 800987a:	4a1d      	ldr	r2, [pc, #116]	; (80098f0 <_printf_float+0x2c0>)
 800987c:	2301      	movs	r3, #1
 800987e:	4631      	mov	r1, r6
 8009880:	4628      	mov	r0, r5
 8009882:	47b8      	blx	r7
 8009884:	3001      	adds	r0, #1
 8009886:	f43f af21 	beq.w	80096cc <_printf_float+0x9c>
 800988a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800988e:	4313      	orrs	r3, r2
 8009890:	d102      	bne.n	8009898 <_printf_float+0x268>
 8009892:	6823      	ldr	r3, [r4, #0]
 8009894:	07d9      	lsls	r1, r3, #31
 8009896:	d5d8      	bpl.n	800984a <_printf_float+0x21a>
 8009898:	4653      	mov	r3, sl
 800989a:	465a      	mov	r2, fp
 800989c:	4631      	mov	r1, r6
 800989e:	4628      	mov	r0, r5
 80098a0:	47b8      	blx	r7
 80098a2:	3001      	adds	r0, #1
 80098a4:	f43f af12 	beq.w	80096cc <_printf_float+0x9c>
 80098a8:	f04f 0900 	mov.w	r9, #0
 80098ac:	f104 0a1a 	add.w	sl, r4, #26
 80098b0:	9b07      	ldr	r3, [sp, #28]
 80098b2:	425b      	negs	r3, r3
 80098b4:	454b      	cmp	r3, r9
 80098b6:	dc01      	bgt.n	80098bc <_printf_float+0x28c>
 80098b8:	9b08      	ldr	r3, [sp, #32]
 80098ba:	e795      	b.n	80097e8 <_printf_float+0x1b8>
 80098bc:	2301      	movs	r3, #1
 80098be:	4652      	mov	r2, sl
 80098c0:	4631      	mov	r1, r6
 80098c2:	4628      	mov	r0, r5
 80098c4:	47b8      	blx	r7
 80098c6:	3001      	adds	r0, #1
 80098c8:	f43f af00 	beq.w	80096cc <_printf_float+0x9c>
 80098cc:	f109 0901 	add.w	r9, r9, #1
 80098d0:	e7ee      	b.n	80098b0 <_printf_float+0x280>
 80098d2:	bf00      	nop
 80098d4:	f3af 8000 	nop.w
 80098d8:	ffffffff 	.word	0xffffffff
 80098dc:	7fefffff 	.word	0x7fefffff
 80098e0:	0800c080 	.word	0x0800c080
 80098e4:	0800c084 	.word	0x0800c084
 80098e8:	0800c08c 	.word	0x0800c08c
 80098ec:	0800c088 	.word	0x0800c088
 80098f0:	0800c090 	.word	0x0800c090
 80098f4:	9a08      	ldr	r2, [sp, #32]
 80098f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098f8:	429a      	cmp	r2, r3
 80098fa:	bfa8      	it	ge
 80098fc:	461a      	movge	r2, r3
 80098fe:	2a00      	cmp	r2, #0
 8009900:	4691      	mov	r9, r2
 8009902:	dc38      	bgt.n	8009976 <_printf_float+0x346>
 8009904:	2300      	movs	r3, #0
 8009906:	9305      	str	r3, [sp, #20]
 8009908:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800990c:	f104 021a 	add.w	r2, r4, #26
 8009910:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009912:	9905      	ldr	r1, [sp, #20]
 8009914:	9304      	str	r3, [sp, #16]
 8009916:	eba3 0309 	sub.w	r3, r3, r9
 800991a:	428b      	cmp	r3, r1
 800991c:	dc33      	bgt.n	8009986 <_printf_float+0x356>
 800991e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009922:	429a      	cmp	r2, r3
 8009924:	db3c      	blt.n	80099a0 <_printf_float+0x370>
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	07da      	lsls	r2, r3, #31
 800992a:	d439      	bmi.n	80099a0 <_printf_float+0x370>
 800992c:	9b08      	ldr	r3, [sp, #32]
 800992e:	9a04      	ldr	r2, [sp, #16]
 8009930:	9907      	ldr	r1, [sp, #28]
 8009932:	1a9a      	subs	r2, r3, r2
 8009934:	eba3 0901 	sub.w	r9, r3, r1
 8009938:	4591      	cmp	r9, r2
 800993a:	bfa8      	it	ge
 800993c:	4691      	movge	r9, r2
 800993e:	f1b9 0f00 	cmp.w	r9, #0
 8009942:	dc35      	bgt.n	80099b0 <_printf_float+0x380>
 8009944:	f04f 0800 	mov.w	r8, #0
 8009948:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800994c:	f104 0a1a 	add.w	sl, r4, #26
 8009950:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009954:	1a9b      	subs	r3, r3, r2
 8009956:	eba3 0309 	sub.w	r3, r3, r9
 800995a:	4543      	cmp	r3, r8
 800995c:	f77f af75 	ble.w	800984a <_printf_float+0x21a>
 8009960:	2301      	movs	r3, #1
 8009962:	4652      	mov	r2, sl
 8009964:	4631      	mov	r1, r6
 8009966:	4628      	mov	r0, r5
 8009968:	47b8      	blx	r7
 800996a:	3001      	adds	r0, #1
 800996c:	f43f aeae 	beq.w	80096cc <_printf_float+0x9c>
 8009970:	f108 0801 	add.w	r8, r8, #1
 8009974:	e7ec      	b.n	8009950 <_printf_float+0x320>
 8009976:	4613      	mov	r3, r2
 8009978:	4631      	mov	r1, r6
 800997a:	4642      	mov	r2, r8
 800997c:	4628      	mov	r0, r5
 800997e:	47b8      	blx	r7
 8009980:	3001      	adds	r0, #1
 8009982:	d1bf      	bne.n	8009904 <_printf_float+0x2d4>
 8009984:	e6a2      	b.n	80096cc <_printf_float+0x9c>
 8009986:	2301      	movs	r3, #1
 8009988:	4631      	mov	r1, r6
 800998a:	4628      	mov	r0, r5
 800998c:	9204      	str	r2, [sp, #16]
 800998e:	47b8      	blx	r7
 8009990:	3001      	adds	r0, #1
 8009992:	f43f ae9b 	beq.w	80096cc <_printf_float+0x9c>
 8009996:	9b05      	ldr	r3, [sp, #20]
 8009998:	9a04      	ldr	r2, [sp, #16]
 800999a:	3301      	adds	r3, #1
 800999c:	9305      	str	r3, [sp, #20]
 800999e:	e7b7      	b.n	8009910 <_printf_float+0x2e0>
 80099a0:	4653      	mov	r3, sl
 80099a2:	465a      	mov	r2, fp
 80099a4:	4631      	mov	r1, r6
 80099a6:	4628      	mov	r0, r5
 80099a8:	47b8      	blx	r7
 80099aa:	3001      	adds	r0, #1
 80099ac:	d1be      	bne.n	800992c <_printf_float+0x2fc>
 80099ae:	e68d      	b.n	80096cc <_printf_float+0x9c>
 80099b0:	9a04      	ldr	r2, [sp, #16]
 80099b2:	464b      	mov	r3, r9
 80099b4:	4442      	add	r2, r8
 80099b6:	4631      	mov	r1, r6
 80099b8:	4628      	mov	r0, r5
 80099ba:	47b8      	blx	r7
 80099bc:	3001      	adds	r0, #1
 80099be:	d1c1      	bne.n	8009944 <_printf_float+0x314>
 80099c0:	e684      	b.n	80096cc <_printf_float+0x9c>
 80099c2:	9a08      	ldr	r2, [sp, #32]
 80099c4:	2a01      	cmp	r2, #1
 80099c6:	dc01      	bgt.n	80099cc <_printf_float+0x39c>
 80099c8:	07db      	lsls	r3, r3, #31
 80099ca:	d537      	bpl.n	8009a3c <_printf_float+0x40c>
 80099cc:	2301      	movs	r3, #1
 80099ce:	4642      	mov	r2, r8
 80099d0:	4631      	mov	r1, r6
 80099d2:	4628      	mov	r0, r5
 80099d4:	47b8      	blx	r7
 80099d6:	3001      	adds	r0, #1
 80099d8:	f43f ae78 	beq.w	80096cc <_printf_float+0x9c>
 80099dc:	4653      	mov	r3, sl
 80099de:	465a      	mov	r2, fp
 80099e0:	4631      	mov	r1, r6
 80099e2:	4628      	mov	r0, r5
 80099e4:	47b8      	blx	r7
 80099e6:	3001      	adds	r0, #1
 80099e8:	f43f ae70 	beq.w	80096cc <_printf_float+0x9c>
 80099ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80099f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80099f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f8:	d01b      	beq.n	8009a32 <_printf_float+0x402>
 80099fa:	9b08      	ldr	r3, [sp, #32]
 80099fc:	f108 0201 	add.w	r2, r8, #1
 8009a00:	3b01      	subs	r3, #1
 8009a02:	4631      	mov	r1, r6
 8009a04:	4628      	mov	r0, r5
 8009a06:	47b8      	blx	r7
 8009a08:	3001      	adds	r0, #1
 8009a0a:	d10e      	bne.n	8009a2a <_printf_float+0x3fa>
 8009a0c:	e65e      	b.n	80096cc <_printf_float+0x9c>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	464a      	mov	r2, r9
 8009a12:	4631      	mov	r1, r6
 8009a14:	4628      	mov	r0, r5
 8009a16:	47b8      	blx	r7
 8009a18:	3001      	adds	r0, #1
 8009a1a:	f43f ae57 	beq.w	80096cc <_printf_float+0x9c>
 8009a1e:	f108 0801 	add.w	r8, r8, #1
 8009a22:	9b08      	ldr	r3, [sp, #32]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	4543      	cmp	r3, r8
 8009a28:	dcf1      	bgt.n	8009a0e <_printf_float+0x3de>
 8009a2a:	9b04      	ldr	r3, [sp, #16]
 8009a2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a30:	e6db      	b.n	80097ea <_printf_float+0x1ba>
 8009a32:	f04f 0800 	mov.w	r8, #0
 8009a36:	f104 091a 	add.w	r9, r4, #26
 8009a3a:	e7f2      	b.n	8009a22 <_printf_float+0x3f2>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	4642      	mov	r2, r8
 8009a40:	e7df      	b.n	8009a02 <_printf_float+0x3d2>
 8009a42:	2301      	movs	r3, #1
 8009a44:	464a      	mov	r2, r9
 8009a46:	4631      	mov	r1, r6
 8009a48:	4628      	mov	r0, r5
 8009a4a:	47b8      	blx	r7
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	f43f ae3d 	beq.w	80096cc <_printf_float+0x9c>
 8009a52:	f108 0801 	add.w	r8, r8, #1
 8009a56:	68e3      	ldr	r3, [r4, #12]
 8009a58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a5a:	1a5b      	subs	r3, r3, r1
 8009a5c:	4543      	cmp	r3, r8
 8009a5e:	dcf0      	bgt.n	8009a42 <_printf_float+0x412>
 8009a60:	e6f7      	b.n	8009852 <_printf_float+0x222>
 8009a62:	f04f 0800 	mov.w	r8, #0
 8009a66:	f104 0919 	add.w	r9, r4, #25
 8009a6a:	e7f4      	b.n	8009a56 <_printf_float+0x426>

08009a6c <_printf_common>:
 8009a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a70:	4616      	mov	r6, r2
 8009a72:	4699      	mov	r9, r3
 8009a74:	688a      	ldr	r2, [r1, #8]
 8009a76:	690b      	ldr	r3, [r1, #16]
 8009a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	bfb8      	it	lt
 8009a80:	4613      	movlt	r3, r2
 8009a82:	6033      	str	r3, [r6, #0]
 8009a84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a88:	4607      	mov	r7, r0
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	b10a      	cbz	r2, 8009a92 <_printf_common+0x26>
 8009a8e:	3301      	adds	r3, #1
 8009a90:	6033      	str	r3, [r6, #0]
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	0699      	lsls	r1, r3, #26
 8009a96:	bf42      	ittt	mi
 8009a98:	6833      	ldrmi	r3, [r6, #0]
 8009a9a:	3302      	addmi	r3, #2
 8009a9c:	6033      	strmi	r3, [r6, #0]
 8009a9e:	6825      	ldr	r5, [r4, #0]
 8009aa0:	f015 0506 	ands.w	r5, r5, #6
 8009aa4:	d106      	bne.n	8009ab4 <_printf_common+0x48>
 8009aa6:	f104 0a19 	add.w	sl, r4, #25
 8009aaa:	68e3      	ldr	r3, [r4, #12]
 8009aac:	6832      	ldr	r2, [r6, #0]
 8009aae:	1a9b      	subs	r3, r3, r2
 8009ab0:	42ab      	cmp	r3, r5
 8009ab2:	dc26      	bgt.n	8009b02 <_printf_common+0x96>
 8009ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ab8:	1e13      	subs	r3, r2, #0
 8009aba:	6822      	ldr	r2, [r4, #0]
 8009abc:	bf18      	it	ne
 8009abe:	2301      	movne	r3, #1
 8009ac0:	0692      	lsls	r2, r2, #26
 8009ac2:	d42b      	bmi.n	8009b1c <_printf_common+0xb0>
 8009ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ac8:	4649      	mov	r1, r9
 8009aca:	4638      	mov	r0, r7
 8009acc:	47c0      	blx	r8
 8009ace:	3001      	adds	r0, #1
 8009ad0:	d01e      	beq.n	8009b10 <_printf_common+0xa4>
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	68e5      	ldr	r5, [r4, #12]
 8009ad6:	6832      	ldr	r2, [r6, #0]
 8009ad8:	f003 0306 	and.w	r3, r3, #6
 8009adc:	2b04      	cmp	r3, #4
 8009ade:	bf08      	it	eq
 8009ae0:	1aad      	subeq	r5, r5, r2
 8009ae2:	68a3      	ldr	r3, [r4, #8]
 8009ae4:	6922      	ldr	r2, [r4, #16]
 8009ae6:	bf0c      	ite	eq
 8009ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009aec:	2500      	movne	r5, #0
 8009aee:	4293      	cmp	r3, r2
 8009af0:	bfc4      	itt	gt
 8009af2:	1a9b      	subgt	r3, r3, r2
 8009af4:	18ed      	addgt	r5, r5, r3
 8009af6:	2600      	movs	r6, #0
 8009af8:	341a      	adds	r4, #26
 8009afa:	42b5      	cmp	r5, r6
 8009afc:	d11a      	bne.n	8009b34 <_printf_common+0xc8>
 8009afe:	2000      	movs	r0, #0
 8009b00:	e008      	b.n	8009b14 <_printf_common+0xa8>
 8009b02:	2301      	movs	r3, #1
 8009b04:	4652      	mov	r2, sl
 8009b06:	4649      	mov	r1, r9
 8009b08:	4638      	mov	r0, r7
 8009b0a:	47c0      	blx	r8
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	d103      	bne.n	8009b18 <_printf_common+0xac>
 8009b10:	f04f 30ff 	mov.w	r0, #4294967295
 8009b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b18:	3501      	adds	r5, #1
 8009b1a:	e7c6      	b.n	8009aaa <_printf_common+0x3e>
 8009b1c:	18e1      	adds	r1, r4, r3
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	2030      	movs	r0, #48	; 0x30
 8009b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b26:	4422      	add	r2, r4
 8009b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b30:	3302      	adds	r3, #2
 8009b32:	e7c7      	b.n	8009ac4 <_printf_common+0x58>
 8009b34:	2301      	movs	r3, #1
 8009b36:	4622      	mov	r2, r4
 8009b38:	4649      	mov	r1, r9
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	47c0      	blx	r8
 8009b3e:	3001      	adds	r0, #1
 8009b40:	d0e6      	beq.n	8009b10 <_printf_common+0xa4>
 8009b42:	3601      	adds	r6, #1
 8009b44:	e7d9      	b.n	8009afa <_printf_common+0x8e>
	...

08009b48 <_printf_i>:
 8009b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b4c:	7e0f      	ldrb	r7, [r1, #24]
 8009b4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b50:	2f78      	cmp	r7, #120	; 0x78
 8009b52:	4691      	mov	r9, r2
 8009b54:	4680      	mov	r8, r0
 8009b56:	460c      	mov	r4, r1
 8009b58:	469a      	mov	sl, r3
 8009b5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b5e:	d807      	bhi.n	8009b70 <_printf_i+0x28>
 8009b60:	2f62      	cmp	r7, #98	; 0x62
 8009b62:	d80a      	bhi.n	8009b7a <_printf_i+0x32>
 8009b64:	2f00      	cmp	r7, #0
 8009b66:	f000 80d8 	beq.w	8009d1a <_printf_i+0x1d2>
 8009b6a:	2f58      	cmp	r7, #88	; 0x58
 8009b6c:	f000 80a3 	beq.w	8009cb6 <_printf_i+0x16e>
 8009b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b78:	e03a      	b.n	8009bf0 <_printf_i+0xa8>
 8009b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b7e:	2b15      	cmp	r3, #21
 8009b80:	d8f6      	bhi.n	8009b70 <_printf_i+0x28>
 8009b82:	a101      	add	r1, pc, #4	; (adr r1, 8009b88 <_printf_i+0x40>)
 8009b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b88:	08009be1 	.word	0x08009be1
 8009b8c:	08009bf5 	.word	0x08009bf5
 8009b90:	08009b71 	.word	0x08009b71
 8009b94:	08009b71 	.word	0x08009b71
 8009b98:	08009b71 	.word	0x08009b71
 8009b9c:	08009b71 	.word	0x08009b71
 8009ba0:	08009bf5 	.word	0x08009bf5
 8009ba4:	08009b71 	.word	0x08009b71
 8009ba8:	08009b71 	.word	0x08009b71
 8009bac:	08009b71 	.word	0x08009b71
 8009bb0:	08009b71 	.word	0x08009b71
 8009bb4:	08009d01 	.word	0x08009d01
 8009bb8:	08009c25 	.word	0x08009c25
 8009bbc:	08009ce3 	.word	0x08009ce3
 8009bc0:	08009b71 	.word	0x08009b71
 8009bc4:	08009b71 	.word	0x08009b71
 8009bc8:	08009d23 	.word	0x08009d23
 8009bcc:	08009b71 	.word	0x08009b71
 8009bd0:	08009c25 	.word	0x08009c25
 8009bd4:	08009b71 	.word	0x08009b71
 8009bd8:	08009b71 	.word	0x08009b71
 8009bdc:	08009ceb 	.word	0x08009ceb
 8009be0:	682b      	ldr	r3, [r5, #0]
 8009be2:	1d1a      	adds	r2, r3, #4
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	602a      	str	r2, [r5, #0]
 8009be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e0a3      	b.n	8009d3c <_printf_i+0x1f4>
 8009bf4:	6820      	ldr	r0, [r4, #0]
 8009bf6:	6829      	ldr	r1, [r5, #0]
 8009bf8:	0606      	lsls	r6, r0, #24
 8009bfa:	f101 0304 	add.w	r3, r1, #4
 8009bfe:	d50a      	bpl.n	8009c16 <_printf_i+0xce>
 8009c00:	680e      	ldr	r6, [r1, #0]
 8009c02:	602b      	str	r3, [r5, #0]
 8009c04:	2e00      	cmp	r6, #0
 8009c06:	da03      	bge.n	8009c10 <_printf_i+0xc8>
 8009c08:	232d      	movs	r3, #45	; 0x2d
 8009c0a:	4276      	negs	r6, r6
 8009c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c10:	485e      	ldr	r0, [pc, #376]	; (8009d8c <_printf_i+0x244>)
 8009c12:	230a      	movs	r3, #10
 8009c14:	e019      	b.n	8009c4a <_printf_i+0x102>
 8009c16:	680e      	ldr	r6, [r1, #0]
 8009c18:	602b      	str	r3, [r5, #0]
 8009c1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c1e:	bf18      	it	ne
 8009c20:	b236      	sxthne	r6, r6
 8009c22:	e7ef      	b.n	8009c04 <_printf_i+0xbc>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	6820      	ldr	r0, [r4, #0]
 8009c28:	1d19      	adds	r1, r3, #4
 8009c2a:	6029      	str	r1, [r5, #0]
 8009c2c:	0601      	lsls	r1, r0, #24
 8009c2e:	d501      	bpl.n	8009c34 <_printf_i+0xec>
 8009c30:	681e      	ldr	r6, [r3, #0]
 8009c32:	e002      	b.n	8009c3a <_printf_i+0xf2>
 8009c34:	0646      	lsls	r6, r0, #25
 8009c36:	d5fb      	bpl.n	8009c30 <_printf_i+0xe8>
 8009c38:	881e      	ldrh	r6, [r3, #0]
 8009c3a:	4854      	ldr	r0, [pc, #336]	; (8009d8c <_printf_i+0x244>)
 8009c3c:	2f6f      	cmp	r7, #111	; 0x6f
 8009c3e:	bf0c      	ite	eq
 8009c40:	2308      	moveq	r3, #8
 8009c42:	230a      	movne	r3, #10
 8009c44:	2100      	movs	r1, #0
 8009c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c4a:	6865      	ldr	r5, [r4, #4]
 8009c4c:	60a5      	str	r5, [r4, #8]
 8009c4e:	2d00      	cmp	r5, #0
 8009c50:	bfa2      	ittt	ge
 8009c52:	6821      	ldrge	r1, [r4, #0]
 8009c54:	f021 0104 	bicge.w	r1, r1, #4
 8009c58:	6021      	strge	r1, [r4, #0]
 8009c5a:	b90e      	cbnz	r6, 8009c60 <_printf_i+0x118>
 8009c5c:	2d00      	cmp	r5, #0
 8009c5e:	d04d      	beq.n	8009cfc <_printf_i+0x1b4>
 8009c60:	4615      	mov	r5, r2
 8009c62:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c66:	fb03 6711 	mls	r7, r3, r1, r6
 8009c6a:	5dc7      	ldrb	r7, [r0, r7]
 8009c6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c70:	4637      	mov	r7, r6
 8009c72:	42bb      	cmp	r3, r7
 8009c74:	460e      	mov	r6, r1
 8009c76:	d9f4      	bls.n	8009c62 <_printf_i+0x11a>
 8009c78:	2b08      	cmp	r3, #8
 8009c7a:	d10b      	bne.n	8009c94 <_printf_i+0x14c>
 8009c7c:	6823      	ldr	r3, [r4, #0]
 8009c7e:	07de      	lsls	r6, r3, #31
 8009c80:	d508      	bpl.n	8009c94 <_printf_i+0x14c>
 8009c82:	6923      	ldr	r3, [r4, #16]
 8009c84:	6861      	ldr	r1, [r4, #4]
 8009c86:	4299      	cmp	r1, r3
 8009c88:	bfde      	ittt	le
 8009c8a:	2330      	movle	r3, #48	; 0x30
 8009c8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c94:	1b52      	subs	r2, r2, r5
 8009c96:	6122      	str	r2, [r4, #16]
 8009c98:	f8cd a000 	str.w	sl, [sp]
 8009c9c:	464b      	mov	r3, r9
 8009c9e:	aa03      	add	r2, sp, #12
 8009ca0:	4621      	mov	r1, r4
 8009ca2:	4640      	mov	r0, r8
 8009ca4:	f7ff fee2 	bl	8009a6c <_printf_common>
 8009ca8:	3001      	adds	r0, #1
 8009caa:	d14c      	bne.n	8009d46 <_printf_i+0x1fe>
 8009cac:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb0:	b004      	add	sp, #16
 8009cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb6:	4835      	ldr	r0, [pc, #212]	; (8009d8c <_printf_i+0x244>)
 8009cb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009cbc:	6829      	ldr	r1, [r5, #0]
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cc4:	6029      	str	r1, [r5, #0]
 8009cc6:	061d      	lsls	r5, r3, #24
 8009cc8:	d514      	bpl.n	8009cf4 <_printf_i+0x1ac>
 8009cca:	07df      	lsls	r7, r3, #31
 8009ccc:	bf44      	itt	mi
 8009cce:	f043 0320 	orrmi.w	r3, r3, #32
 8009cd2:	6023      	strmi	r3, [r4, #0]
 8009cd4:	b91e      	cbnz	r6, 8009cde <_printf_i+0x196>
 8009cd6:	6823      	ldr	r3, [r4, #0]
 8009cd8:	f023 0320 	bic.w	r3, r3, #32
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	2310      	movs	r3, #16
 8009ce0:	e7b0      	b.n	8009c44 <_printf_i+0xfc>
 8009ce2:	6823      	ldr	r3, [r4, #0]
 8009ce4:	f043 0320 	orr.w	r3, r3, #32
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	2378      	movs	r3, #120	; 0x78
 8009cec:	4828      	ldr	r0, [pc, #160]	; (8009d90 <_printf_i+0x248>)
 8009cee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cf2:	e7e3      	b.n	8009cbc <_printf_i+0x174>
 8009cf4:	0659      	lsls	r1, r3, #25
 8009cf6:	bf48      	it	mi
 8009cf8:	b2b6      	uxthmi	r6, r6
 8009cfa:	e7e6      	b.n	8009cca <_printf_i+0x182>
 8009cfc:	4615      	mov	r5, r2
 8009cfe:	e7bb      	b.n	8009c78 <_printf_i+0x130>
 8009d00:	682b      	ldr	r3, [r5, #0]
 8009d02:	6826      	ldr	r6, [r4, #0]
 8009d04:	6961      	ldr	r1, [r4, #20]
 8009d06:	1d18      	adds	r0, r3, #4
 8009d08:	6028      	str	r0, [r5, #0]
 8009d0a:	0635      	lsls	r5, r6, #24
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	d501      	bpl.n	8009d14 <_printf_i+0x1cc>
 8009d10:	6019      	str	r1, [r3, #0]
 8009d12:	e002      	b.n	8009d1a <_printf_i+0x1d2>
 8009d14:	0670      	lsls	r0, r6, #25
 8009d16:	d5fb      	bpl.n	8009d10 <_printf_i+0x1c8>
 8009d18:	8019      	strh	r1, [r3, #0]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	6123      	str	r3, [r4, #16]
 8009d1e:	4615      	mov	r5, r2
 8009d20:	e7ba      	b.n	8009c98 <_printf_i+0x150>
 8009d22:	682b      	ldr	r3, [r5, #0]
 8009d24:	1d1a      	adds	r2, r3, #4
 8009d26:	602a      	str	r2, [r5, #0]
 8009d28:	681d      	ldr	r5, [r3, #0]
 8009d2a:	6862      	ldr	r2, [r4, #4]
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	4628      	mov	r0, r5
 8009d30:	f7f6 fade 	bl	80002f0 <memchr>
 8009d34:	b108      	cbz	r0, 8009d3a <_printf_i+0x1f2>
 8009d36:	1b40      	subs	r0, r0, r5
 8009d38:	6060      	str	r0, [r4, #4]
 8009d3a:	6863      	ldr	r3, [r4, #4]
 8009d3c:	6123      	str	r3, [r4, #16]
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d44:	e7a8      	b.n	8009c98 <_printf_i+0x150>
 8009d46:	6923      	ldr	r3, [r4, #16]
 8009d48:	462a      	mov	r2, r5
 8009d4a:	4649      	mov	r1, r9
 8009d4c:	4640      	mov	r0, r8
 8009d4e:	47d0      	blx	sl
 8009d50:	3001      	adds	r0, #1
 8009d52:	d0ab      	beq.n	8009cac <_printf_i+0x164>
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	079b      	lsls	r3, r3, #30
 8009d58:	d413      	bmi.n	8009d82 <_printf_i+0x23a>
 8009d5a:	68e0      	ldr	r0, [r4, #12]
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	4298      	cmp	r0, r3
 8009d60:	bfb8      	it	lt
 8009d62:	4618      	movlt	r0, r3
 8009d64:	e7a4      	b.n	8009cb0 <_printf_i+0x168>
 8009d66:	2301      	movs	r3, #1
 8009d68:	4632      	mov	r2, r6
 8009d6a:	4649      	mov	r1, r9
 8009d6c:	4640      	mov	r0, r8
 8009d6e:	47d0      	blx	sl
 8009d70:	3001      	adds	r0, #1
 8009d72:	d09b      	beq.n	8009cac <_printf_i+0x164>
 8009d74:	3501      	adds	r5, #1
 8009d76:	68e3      	ldr	r3, [r4, #12]
 8009d78:	9903      	ldr	r1, [sp, #12]
 8009d7a:	1a5b      	subs	r3, r3, r1
 8009d7c:	42ab      	cmp	r3, r5
 8009d7e:	dcf2      	bgt.n	8009d66 <_printf_i+0x21e>
 8009d80:	e7eb      	b.n	8009d5a <_printf_i+0x212>
 8009d82:	2500      	movs	r5, #0
 8009d84:	f104 0619 	add.w	r6, r4, #25
 8009d88:	e7f5      	b.n	8009d76 <_printf_i+0x22e>
 8009d8a:	bf00      	nop
 8009d8c:	0800c092 	.word	0x0800c092
 8009d90:	0800c0a3 	.word	0x0800c0a3

08009d94 <iprintf>:
 8009d94:	b40f      	push	{r0, r1, r2, r3}
 8009d96:	4b0a      	ldr	r3, [pc, #40]	; (8009dc0 <iprintf+0x2c>)
 8009d98:	b513      	push	{r0, r1, r4, lr}
 8009d9a:	681c      	ldr	r4, [r3, #0]
 8009d9c:	b124      	cbz	r4, 8009da8 <iprintf+0x14>
 8009d9e:	69a3      	ldr	r3, [r4, #24]
 8009da0:	b913      	cbnz	r3, 8009da8 <iprintf+0x14>
 8009da2:	4620      	mov	r0, r4
 8009da4:	f001 f858 	bl	800ae58 <__sinit>
 8009da8:	ab05      	add	r3, sp, #20
 8009daa:	9a04      	ldr	r2, [sp, #16]
 8009dac:	68a1      	ldr	r1, [r4, #8]
 8009dae:	9301      	str	r3, [sp, #4]
 8009db0:	4620      	mov	r0, r4
 8009db2:	f001 fe07 	bl	800b9c4 <_vfiprintf_r>
 8009db6:	b002      	add	sp, #8
 8009db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dbc:	b004      	add	sp, #16
 8009dbe:	4770      	bx	lr
 8009dc0:	24000010 	.word	0x24000010

08009dc4 <_puts_r>:
 8009dc4:	b570      	push	{r4, r5, r6, lr}
 8009dc6:	460e      	mov	r6, r1
 8009dc8:	4605      	mov	r5, r0
 8009dca:	b118      	cbz	r0, 8009dd4 <_puts_r+0x10>
 8009dcc:	6983      	ldr	r3, [r0, #24]
 8009dce:	b90b      	cbnz	r3, 8009dd4 <_puts_r+0x10>
 8009dd0:	f001 f842 	bl	800ae58 <__sinit>
 8009dd4:	69ab      	ldr	r3, [r5, #24]
 8009dd6:	68ac      	ldr	r4, [r5, #8]
 8009dd8:	b913      	cbnz	r3, 8009de0 <_puts_r+0x1c>
 8009dda:	4628      	mov	r0, r5
 8009ddc:	f001 f83c 	bl	800ae58 <__sinit>
 8009de0:	4b2c      	ldr	r3, [pc, #176]	; (8009e94 <_puts_r+0xd0>)
 8009de2:	429c      	cmp	r4, r3
 8009de4:	d120      	bne.n	8009e28 <_puts_r+0x64>
 8009de6:	686c      	ldr	r4, [r5, #4]
 8009de8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dea:	07db      	lsls	r3, r3, #31
 8009dec:	d405      	bmi.n	8009dfa <_puts_r+0x36>
 8009dee:	89a3      	ldrh	r3, [r4, #12]
 8009df0:	0598      	lsls	r0, r3, #22
 8009df2:	d402      	bmi.n	8009dfa <_puts_r+0x36>
 8009df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009df6:	f001 f8d2 	bl	800af9e <__retarget_lock_acquire_recursive>
 8009dfa:	89a3      	ldrh	r3, [r4, #12]
 8009dfc:	0719      	lsls	r1, r3, #28
 8009dfe:	d51d      	bpl.n	8009e3c <_puts_r+0x78>
 8009e00:	6923      	ldr	r3, [r4, #16]
 8009e02:	b1db      	cbz	r3, 8009e3c <_puts_r+0x78>
 8009e04:	3e01      	subs	r6, #1
 8009e06:	68a3      	ldr	r3, [r4, #8]
 8009e08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	60a3      	str	r3, [r4, #8]
 8009e10:	bb39      	cbnz	r1, 8009e62 <_puts_r+0x9e>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	da38      	bge.n	8009e88 <_puts_r+0xc4>
 8009e16:	4622      	mov	r2, r4
 8009e18:	210a      	movs	r1, #10
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	f000 f848 	bl	8009eb0 <__swbuf_r>
 8009e20:	3001      	adds	r0, #1
 8009e22:	d011      	beq.n	8009e48 <_puts_r+0x84>
 8009e24:	250a      	movs	r5, #10
 8009e26:	e011      	b.n	8009e4c <_puts_r+0x88>
 8009e28:	4b1b      	ldr	r3, [pc, #108]	; (8009e98 <_puts_r+0xd4>)
 8009e2a:	429c      	cmp	r4, r3
 8009e2c:	d101      	bne.n	8009e32 <_puts_r+0x6e>
 8009e2e:	68ac      	ldr	r4, [r5, #8]
 8009e30:	e7da      	b.n	8009de8 <_puts_r+0x24>
 8009e32:	4b1a      	ldr	r3, [pc, #104]	; (8009e9c <_puts_r+0xd8>)
 8009e34:	429c      	cmp	r4, r3
 8009e36:	bf08      	it	eq
 8009e38:	68ec      	ldreq	r4, [r5, #12]
 8009e3a:	e7d5      	b.n	8009de8 <_puts_r+0x24>
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	4628      	mov	r0, r5
 8009e40:	f000 f888 	bl	8009f54 <__swsetup_r>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	d0dd      	beq.n	8009e04 <_puts_r+0x40>
 8009e48:	f04f 35ff 	mov.w	r5, #4294967295
 8009e4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e4e:	07da      	lsls	r2, r3, #31
 8009e50:	d405      	bmi.n	8009e5e <_puts_r+0x9a>
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	059b      	lsls	r3, r3, #22
 8009e56:	d402      	bmi.n	8009e5e <_puts_r+0x9a>
 8009e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e5a:	f001 f8a1 	bl	800afa0 <__retarget_lock_release_recursive>
 8009e5e:	4628      	mov	r0, r5
 8009e60:	bd70      	pop	{r4, r5, r6, pc}
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	da04      	bge.n	8009e70 <_puts_r+0xac>
 8009e66:	69a2      	ldr	r2, [r4, #24]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	dc06      	bgt.n	8009e7a <_puts_r+0xb6>
 8009e6c:	290a      	cmp	r1, #10
 8009e6e:	d004      	beq.n	8009e7a <_puts_r+0xb6>
 8009e70:	6823      	ldr	r3, [r4, #0]
 8009e72:	1c5a      	adds	r2, r3, #1
 8009e74:	6022      	str	r2, [r4, #0]
 8009e76:	7019      	strb	r1, [r3, #0]
 8009e78:	e7c5      	b.n	8009e06 <_puts_r+0x42>
 8009e7a:	4622      	mov	r2, r4
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	f000 f817 	bl	8009eb0 <__swbuf_r>
 8009e82:	3001      	adds	r0, #1
 8009e84:	d1bf      	bne.n	8009e06 <_puts_r+0x42>
 8009e86:	e7df      	b.n	8009e48 <_puts_r+0x84>
 8009e88:	6823      	ldr	r3, [r4, #0]
 8009e8a:	250a      	movs	r5, #10
 8009e8c:	1c5a      	adds	r2, r3, #1
 8009e8e:	6022      	str	r2, [r4, #0]
 8009e90:	701d      	strb	r5, [r3, #0]
 8009e92:	e7db      	b.n	8009e4c <_puts_r+0x88>
 8009e94:	0800c164 	.word	0x0800c164
 8009e98:	0800c184 	.word	0x0800c184
 8009e9c:	0800c144 	.word	0x0800c144

08009ea0 <puts>:
 8009ea0:	4b02      	ldr	r3, [pc, #8]	; (8009eac <puts+0xc>)
 8009ea2:	4601      	mov	r1, r0
 8009ea4:	6818      	ldr	r0, [r3, #0]
 8009ea6:	f7ff bf8d 	b.w	8009dc4 <_puts_r>
 8009eaa:	bf00      	nop
 8009eac:	24000010 	.word	0x24000010

08009eb0 <__swbuf_r>:
 8009eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb2:	460e      	mov	r6, r1
 8009eb4:	4614      	mov	r4, r2
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	b118      	cbz	r0, 8009ec2 <__swbuf_r+0x12>
 8009eba:	6983      	ldr	r3, [r0, #24]
 8009ebc:	b90b      	cbnz	r3, 8009ec2 <__swbuf_r+0x12>
 8009ebe:	f000 ffcb 	bl	800ae58 <__sinit>
 8009ec2:	4b21      	ldr	r3, [pc, #132]	; (8009f48 <__swbuf_r+0x98>)
 8009ec4:	429c      	cmp	r4, r3
 8009ec6:	d12b      	bne.n	8009f20 <__swbuf_r+0x70>
 8009ec8:	686c      	ldr	r4, [r5, #4]
 8009eca:	69a3      	ldr	r3, [r4, #24]
 8009ecc:	60a3      	str	r3, [r4, #8]
 8009ece:	89a3      	ldrh	r3, [r4, #12]
 8009ed0:	071a      	lsls	r2, r3, #28
 8009ed2:	d52f      	bpl.n	8009f34 <__swbuf_r+0x84>
 8009ed4:	6923      	ldr	r3, [r4, #16]
 8009ed6:	b36b      	cbz	r3, 8009f34 <__swbuf_r+0x84>
 8009ed8:	6923      	ldr	r3, [r4, #16]
 8009eda:	6820      	ldr	r0, [r4, #0]
 8009edc:	1ac0      	subs	r0, r0, r3
 8009ede:	6963      	ldr	r3, [r4, #20]
 8009ee0:	b2f6      	uxtb	r6, r6
 8009ee2:	4283      	cmp	r3, r0
 8009ee4:	4637      	mov	r7, r6
 8009ee6:	dc04      	bgt.n	8009ef2 <__swbuf_r+0x42>
 8009ee8:	4621      	mov	r1, r4
 8009eea:	4628      	mov	r0, r5
 8009eec:	f000 ff20 	bl	800ad30 <_fflush_r>
 8009ef0:	bb30      	cbnz	r0, 8009f40 <__swbuf_r+0x90>
 8009ef2:	68a3      	ldr	r3, [r4, #8]
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	60a3      	str	r3, [r4, #8]
 8009ef8:	6823      	ldr	r3, [r4, #0]
 8009efa:	1c5a      	adds	r2, r3, #1
 8009efc:	6022      	str	r2, [r4, #0]
 8009efe:	701e      	strb	r6, [r3, #0]
 8009f00:	6963      	ldr	r3, [r4, #20]
 8009f02:	3001      	adds	r0, #1
 8009f04:	4283      	cmp	r3, r0
 8009f06:	d004      	beq.n	8009f12 <__swbuf_r+0x62>
 8009f08:	89a3      	ldrh	r3, [r4, #12]
 8009f0a:	07db      	lsls	r3, r3, #31
 8009f0c:	d506      	bpl.n	8009f1c <__swbuf_r+0x6c>
 8009f0e:	2e0a      	cmp	r6, #10
 8009f10:	d104      	bne.n	8009f1c <__swbuf_r+0x6c>
 8009f12:	4621      	mov	r1, r4
 8009f14:	4628      	mov	r0, r5
 8009f16:	f000 ff0b 	bl	800ad30 <_fflush_r>
 8009f1a:	b988      	cbnz	r0, 8009f40 <__swbuf_r+0x90>
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f20:	4b0a      	ldr	r3, [pc, #40]	; (8009f4c <__swbuf_r+0x9c>)
 8009f22:	429c      	cmp	r4, r3
 8009f24:	d101      	bne.n	8009f2a <__swbuf_r+0x7a>
 8009f26:	68ac      	ldr	r4, [r5, #8]
 8009f28:	e7cf      	b.n	8009eca <__swbuf_r+0x1a>
 8009f2a:	4b09      	ldr	r3, [pc, #36]	; (8009f50 <__swbuf_r+0xa0>)
 8009f2c:	429c      	cmp	r4, r3
 8009f2e:	bf08      	it	eq
 8009f30:	68ec      	ldreq	r4, [r5, #12]
 8009f32:	e7ca      	b.n	8009eca <__swbuf_r+0x1a>
 8009f34:	4621      	mov	r1, r4
 8009f36:	4628      	mov	r0, r5
 8009f38:	f000 f80c 	bl	8009f54 <__swsetup_r>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	d0cb      	beq.n	8009ed8 <__swbuf_r+0x28>
 8009f40:	f04f 37ff 	mov.w	r7, #4294967295
 8009f44:	e7ea      	b.n	8009f1c <__swbuf_r+0x6c>
 8009f46:	bf00      	nop
 8009f48:	0800c164 	.word	0x0800c164
 8009f4c:	0800c184 	.word	0x0800c184
 8009f50:	0800c144 	.word	0x0800c144

08009f54 <__swsetup_r>:
 8009f54:	4b32      	ldr	r3, [pc, #200]	; (800a020 <__swsetup_r+0xcc>)
 8009f56:	b570      	push	{r4, r5, r6, lr}
 8009f58:	681d      	ldr	r5, [r3, #0]
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	b125      	cbz	r5, 8009f6a <__swsetup_r+0x16>
 8009f60:	69ab      	ldr	r3, [r5, #24]
 8009f62:	b913      	cbnz	r3, 8009f6a <__swsetup_r+0x16>
 8009f64:	4628      	mov	r0, r5
 8009f66:	f000 ff77 	bl	800ae58 <__sinit>
 8009f6a:	4b2e      	ldr	r3, [pc, #184]	; (800a024 <__swsetup_r+0xd0>)
 8009f6c:	429c      	cmp	r4, r3
 8009f6e:	d10f      	bne.n	8009f90 <__swsetup_r+0x3c>
 8009f70:	686c      	ldr	r4, [r5, #4]
 8009f72:	89a3      	ldrh	r3, [r4, #12]
 8009f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f78:	0719      	lsls	r1, r3, #28
 8009f7a:	d42c      	bmi.n	8009fd6 <__swsetup_r+0x82>
 8009f7c:	06dd      	lsls	r5, r3, #27
 8009f7e:	d411      	bmi.n	8009fa4 <__swsetup_r+0x50>
 8009f80:	2309      	movs	r3, #9
 8009f82:	6033      	str	r3, [r6, #0]
 8009f84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8e:	e03e      	b.n	800a00e <__swsetup_r+0xba>
 8009f90:	4b25      	ldr	r3, [pc, #148]	; (800a028 <__swsetup_r+0xd4>)
 8009f92:	429c      	cmp	r4, r3
 8009f94:	d101      	bne.n	8009f9a <__swsetup_r+0x46>
 8009f96:	68ac      	ldr	r4, [r5, #8]
 8009f98:	e7eb      	b.n	8009f72 <__swsetup_r+0x1e>
 8009f9a:	4b24      	ldr	r3, [pc, #144]	; (800a02c <__swsetup_r+0xd8>)
 8009f9c:	429c      	cmp	r4, r3
 8009f9e:	bf08      	it	eq
 8009fa0:	68ec      	ldreq	r4, [r5, #12]
 8009fa2:	e7e6      	b.n	8009f72 <__swsetup_r+0x1e>
 8009fa4:	0758      	lsls	r0, r3, #29
 8009fa6:	d512      	bpl.n	8009fce <__swsetup_r+0x7a>
 8009fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009faa:	b141      	cbz	r1, 8009fbe <__swsetup_r+0x6a>
 8009fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fb0:	4299      	cmp	r1, r3
 8009fb2:	d002      	beq.n	8009fba <__swsetup_r+0x66>
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f001 fbfb 	bl	800b7b0 <_free_r>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	6363      	str	r3, [r4, #52]	; 0x34
 8009fbe:	89a3      	ldrh	r3, [r4, #12]
 8009fc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fc4:	81a3      	strh	r3, [r4, #12]
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	6063      	str	r3, [r4, #4]
 8009fca:	6923      	ldr	r3, [r4, #16]
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	f043 0308 	orr.w	r3, r3, #8
 8009fd4:	81a3      	strh	r3, [r4, #12]
 8009fd6:	6923      	ldr	r3, [r4, #16]
 8009fd8:	b94b      	cbnz	r3, 8009fee <__swsetup_r+0x9a>
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fe4:	d003      	beq.n	8009fee <__swsetup_r+0x9a>
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f000 ffff 	bl	800afec <__smakebuf_r>
 8009fee:	89a0      	ldrh	r0, [r4, #12]
 8009ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ff4:	f010 0301 	ands.w	r3, r0, #1
 8009ff8:	d00a      	beq.n	800a010 <__swsetup_r+0xbc>
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	60a3      	str	r3, [r4, #8]
 8009ffe:	6963      	ldr	r3, [r4, #20]
 800a000:	425b      	negs	r3, r3
 800a002:	61a3      	str	r3, [r4, #24]
 800a004:	6923      	ldr	r3, [r4, #16]
 800a006:	b943      	cbnz	r3, 800a01a <__swsetup_r+0xc6>
 800a008:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a00c:	d1ba      	bne.n	8009f84 <__swsetup_r+0x30>
 800a00e:	bd70      	pop	{r4, r5, r6, pc}
 800a010:	0781      	lsls	r1, r0, #30
 800a012:	bf58      	it	pl
 800a014:	6963      	ldrpl	r3, [r4, #20]
 800a016:	60a3      	str	r3, [r4, #8]
 800a018:	e7f4      	b.n	800a004 <__swsetup_r+0xb0>
 800a01a:	2000      	movs	r0, #0
 800a01c:	e7f7      	b.n	800a00e <__swsetup_r+0xba>
 800a01e:	bf00      	nop
 800a020:	24000010 	.word	0x24000010
 800a024:	0800c164 	.word	0x0800c164
 800a028:	0800c184 	.word	0x0800c184
 800a02c:	0800c144 	.word	0x0800c144

0800a030 <quorem>:
 800a030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a034:	6903      	ldr	r3, [r0, #16]
 800a036:	690c      	ldr	r4, [r1, #16]
 800a038:	42a3      	cmp	r3, r4
 800a03a:	4607      	mov	r7, r0
 800a03c:	f2c0 8081 	blt.w	800a142 <quorem+0x112>
 800a040:	3c01      	subs	r4, #1
 800a042:	f101 0814 	add.w	r8, r1, #20
 800a046:	f100 0514 	add.w	r5, r0, #20
 800a04a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a054:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a058:	3301      	adds	r3, #1
 800a05a:	429a      	cmp	r2, r3
 800a05c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a060:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a064:	fbb2 f6f3 	udiv	r6, r2, r3
 800a068:	d331      	bcc.n	800a0ce <quorem+0x9e>
 800a06a:	f04f 0e00 	mov.w	lr, #0
 800a06e:	4640      	mov	r0, r8
 800a070:	46ac      	mov	ip, r5
 800a072:	46f2      	mov	sl, lr
 800a074:	f850 2b04 	ldr.w	r2, [r0], #4
 800a078:	b293      	uxth	r3, r2
 800a07a:	fb06 e303 	mla	r3, r6, r3, lr
 800a07e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a082:	b29b      	uxth	r3, r3
 800a084:	ebaa 0303 	sub.w	r3, sl, r3
 800a088:	f8dc a000 	ldr.w	sl, [ip]
 800a08c:	0c12      	lsrs	r2, r2, #16
 800a08e:	fa13 f38a 	uxtah	r3, r3, sl
 800a092:	fb06 e202 	mla	r2, r6, r2, lr
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	9b00      	ldr	r3, [sp, #0]
 800a09a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a09e:	b292      	uxth	r2, r2
 800a0a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a0a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0a8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a0ac:	4581      	cmp	r9, r0
 800a0ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0b2:	f84c 3b04 	str.w	r3, [ip], #4
 800a0b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a0ba:	d2db      	bcs.n	800a074 <quorem+0x44>
 800a0bc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a0c0:	b92b      	cbnz	r3, 800a0ce <quorem+0x9e>
 800a0c2:	9b01      	ldr	r3, [sp, #4]
 800a0c4:	3b04      	subs	r3, #4
 800a0c6:	429d      	cmp	r5, r3
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	d32e      	bcc.n	800a12a <quorem+0xfa>
 800a0cc:	613c      	str	r4, [r7, #16]
 800a0ce:	4638      	mov	r0, r7
 800a0d0:	f001 fa56 	bl	800b580 <__mcmp>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	db24      	blt.n	800a122 <quorem+0xf2>
 800a0d8:	3601      	adds	r6, #1
 800a0da:	4628      	mov	r0, r5
 800a0dc:	f04f 0c00 	mov.w	ip, #0
 800a0e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0e4:	f8d0 e000 	ldr.w	lr, [r0]
 800a0e8:	b293      	uxth	r3, r2
 800a0ea:	ebac 0303 	sub.w	r3, ip, r3
 800a0ee:	0c12      	lsrs	r2, r2, #16
 800a0f0:	fa13 f38e 	uxtah	r3, r3, lr
 800a0f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a0f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a102:	45c1      	cmp	r9, r8
 800a104:	f840 3b04 	str.w	r3, [r0], #4
 800a108:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a10c:	d2e8      	bcs.n	800a0e0 <quorem+0xb0>
 800a10e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a116:	b922      	cbnz	r2, 800a122 <quorem+0xf2>
 800a118:	3b04      	subs	r3, #4
 800a11a:	429d      	cmp	r5, r3
 800a11c:	461a      	mov	r2, r3
 800a11e:	d30a      	bcc.n	800a136 <quorem+0x106>
 800a120:	613c      	str	r4, [r7, #16]
 800a122:	4630      	mov	r0, r6
 800a124:	b003      	add	sp, #12
 800a126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12a:	6812      	ldr	r2, [r2, #0]
 800a12c:	3b04      	subs	r3, #4
 800a12e:	2a00      	cmp	r2, #0
 800a130:	d1cc      	bne.n	800a0cc <quorem+0x9c>
 800a132:	3c01      	subs	r4, #1
 800a134:	e7c7      	b.n	800a0c6 <quorem+0x96>
 800a136:	6812      	ldr	r2, [r2, #0]
 800a138:	3b04      	subs	r3, #4
 800a13a:	2a00      	cmp	r2, #0
 800a13c:	d1f0      	bne.n	800a120 <quorem+0xf0>
 800a13e:	3c01      	subs	r4, #1
 800a140:	e7eb      	b.n	800a11a <quorem+0xea>
 800a142:	2000      	movs	r0, #0
 800a144:	e7ee      	b.n	800a124 <quorem+0xf4>
	...

0800a148 <_dtoa_r>:
 800a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	ed2d 8b02 	vpush	{d8}
 800a150:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a152:	b091      	sub	sp, #68	; 0x44
 800a154:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a158:	ec59 8b10 	vmov	r8, r9, d0
 800a15c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a15e:	9106      	str	r1, [sp, #24]
 800a160:	4606      	mov	r6, r0
 800a162:	9208      	str	r2, [sp, #32]
 800a164:	930c      	str	r3, [sp, #48]	; 0x30
 800a166:	b975      	cbnz	r5, 800a186 <_dtoa_r+0x3e>
 800a168:	2010      	movs	r0, #16
 800a16a:	f000 ff7f 	bl	800b06c <malloc>
 800a16e:	4602      	mov	r2, r0
 800a170:	6270      	str	r0, [r6, #36]	; 0x24
 800a172:	b920      	cbnz	r0, 800a17e <_dtoa_r+0x36>
 800a174:	4baa      	ldr	r3, [pc, #680]	; (800a420 <_dtoa_r+0x2d8>)
 800a176:	21ea      	movs	r1, #234	; 0xea
 800a178:	48aa      	ldr	r0, [pc, #680]	; (800a424 <_dtoa_r+0x2dc>)
 800a17a:	f001 fdb9 	bl	800bcf0 <__assert_func>
 800a17e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a182:	6005      	str	r5, [r0, #0]
 800a184:	60c5      	str	r5, [r0, #12]
 800a186:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a188:	6819      	ldr	r1, [r3, #0]
 800a18a:	b151      	cbz	r1, 800a1a2 <_dtoa_r+0x5a>
 800a18c:	685a      	ldr	r2, [r3, #4]
 800a18e:	604a      	str	r2, [r1, #4]
 800a190:	2301      	movs	r3, #1
 800a192:	4093      	lsls	r3, r2
 800a194:	608b      	str	r3, [r1, #8]
 800a196:	4630      	mov	r0, r6
 800a198:	f000 ffb0 	bl	800b0fc <_Bfree>
 800a19c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a19e:	2200      	movs	r2, #0
 800a1a0:	601a      	str	r2, [r3, #0]
 800a1a2:	f1b9 0300 	subs.w	r3, r9, #0
 800a1a6:	bfbb      	ittet	lt
 800a1a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a1ac:	9303      	strlt	r3, [sp, #12]
 800a1ae:	2300      	movge	r3, #0
 800a1b0:	2201      	movlt	r2, #1
 800a1b2:	bfac      	ite	ge
 800a1b4:	6023      	strge	r3, [r4, #0]
 800a1b6:	6022      	strlt	r2, [r4, #0]
 800a1b8:	4b9b      	ldr	r3, [pc, #620]	; (800a428 <_dtoa_r+0x2e0>)
 800a1ba:	9c03      	ldr	r4, [sp, #12]
 800a1bc:	43a3      	bics	r3, r4
 800a1be:	d11c      	bne.n	800a1fa <_dtoa_r+0xb2>
 800a1c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a1c6:	6013      	str	r3, [r2, #0]
 800a1c8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a1cc:	ea53 0308 	orrs.w	r3, r3, r8
 800a1d0:	f000 84fd 	beq.w	800abce <_dtoa_r+0xa86>
 800a1d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a1d6:	b963      	cbnz	r3, 800a1f2 <_dtoa_r+0xaa>
 800a1d8:	4b94      	ldr	r3, [pc, #592]	; (800a42c <_dtoa_r+0x2e4>)
 800a1da:	e01f      	b.n	800a21c <_dtoa_r+0xd4>
 800a1dc:	4b94      	ldr	r3, [pc, #592]	; (800a430 <_dtoa_r+0x2e8>)
 800a1de:	9301      	str	r3, [sp, #4]
 800a1e0:	3308      	adds	r3, #8
 800a1e2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a1e4:	6013      	str	r3, [r2, #0]
 800a1e6:	9801      	ldr	r0, [sp, #4]
 800a1e8:	b011      	add	sp, #68	; 0x44
 800a1ea:	ecbd 8b02 	vpop	{d8}
 800a1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f2:	4b8e      	ldr	r3, [pc, #568]	; (800a42c <_dtoa_r+0x2e4>)
 800a1f4:	9301      	str	r3, [sp, #4]
 800a1f6:	3303      	adds	r3, #3
 800a1f8:	e7f3      	b.n	800a1e2 <_dtoa_r+0x9a>
 800a1fa:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a1fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a206:	d10b      	bne.n	800a220 <_dtoa_r+0xd8>
 800a208:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a20a:	2301      	movs	r3, #1
 800a20c:	6013      	str	r3, [r2, #0]
 800a20e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a210:	2b00      	cmp	r3, #0
 800a212:	f000 84d9 	beq.w	800abc8 <_dtoa_r+0xa80>
 800a216:	4887      	ldr	r0, [pc, #540]	; (800a434 <_dtoa_r+0x2ec>)
 800a218:	6018      	str	r0, [r3, #0]
 800a21a:	1e43      	subs	r3, r0, #1
 800a21c:	9301      	str	r3, [sp, #4]
 800a21e:	e7e2      	b.n	800a1e6 <_dtoa_r+0x9e>
 800a220:	a90f      	add	r1, sp, #60	; 0x3c
 800a222:	aa0e      	add	r2, sp, #56	; 0x38
 800a224:	4630      	mov	r0, r6
 800a226:	eeb0 0b48 	vmov.f64	d0, d8
 800a22a:	f001 fa4f 	bl	800b6cc <__d2b>
 800a22e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a232:	4605      	mov	r5, r0
 800a234:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a236:	2900      	cmp	r1, #0
 800a238:	d046      	beq.n	800a2c8 <_dtoa_r+0x180>
 800a23a:	ee18 4a90 	vmov	r4, s17
 800a23e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a242:	ec53 2b18 	vmov	r2, r3, d8
 800a246:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a24a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a24e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a252:	2400      	movs	r4, #0
 800a254:	ec43 2b16 	vmov	d6, r2, r3
 800a258:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a25c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a408 <_dtoa_r+0x2c0>
 800a260:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a264:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a410 <_dtoa_r+0x2c8>
 800a268:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a26c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a418 <_dtoa_r+0x2d0>
 800a270:	ee07 1a90 	vmov	s15, r1
 800a274:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a278:	eeb0 7b46 	vmov.f64	d7, d6
 800a27c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a280:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a284:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a28c:	ee16 ba90 	vmov	fp, s13
 800a290:	940a      	str	r4, [sp, #40]	; 0x28
 800a292:	d508      	bpl.n	800a2a6 <_dtoa_r+0x15e>
 800a294:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a298:	eeb4 6b47 	vcmp.f64	d6, d7
 800a29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2a0:	bf18      	it	ne
 800a2a2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a2a6:	f1bb 0f16 	cmp.w	fp, #22
 800a2aa:	d82f      	bhi.n	800a30c <_dtoa_r+0x1c4>
 800a2ac:	4b62      	ldr	r3, [pc, #392]	; (800a438 <_dtoa_r+0x2f0>)
 800a2ae:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a2b2:	ed93 7b00 	vldr	d7, [r3]
 800a2b6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2be:	d501      	bpl.n	800a2c4 <_dtoa_r+0x17c>
 800a2c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	e022      	b.n	800a30e <_dtoa_r+0x1c6>
 800a2c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a2ca:	4401      	add	r1, r0
 800a2cc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a2d0:	2b20      	cmp	r3, #32
 800a2d2:	bfc1      	itttt	gt
 800a2d4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a2d8:	fa04 f303 	lslgt.w	r3, r4, r3
 800a2dc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a2e0:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a2e4:	bfd6      	itet	le
 800a2e6:	f1c3 0320 	rsble	r3, r3, #32
 800a2ea:	ea43 0808 	orrgt.w	r8, r3, r8
 800a2ee:	fa08 f803 	lslle.w	r8, r8, r3
 800a2f2:	ee07 8a90 	vmov	s15, r8
 800a2f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a2fa:	3901      	subs	r1, #1
 800a2fc:	ee17 4a90 	vmov	r4, s15
 800a300:	ec53 2b17 	vmov	r2, r3, d7
 800a304:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a308:	2401      	movs	r4, #1
 800a30a:	e7a3      	b.n	800a254 <_dtoa_r+0x10c>
 800a30c:	2301      	movs	r3, #1
 800a30e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a310:	1a43      	subs	r3, r0, r1
 800a312:	1e5a      	subs	r2, r3, #1
 800a314:	bf45      	ittet	mi
 800a316:	f1c3 0301 	rsbmi	r3, r3, #1
 800a31a:	9304      	strmi	r3, [sp, #16]
 800a31c:	2300      	movpl	r3, #0
 800a31e:	2300      	movmi	r3, #0
 800a320:	9205      	str	r2, [sp, #20]
 800a322:	bf54      	ite	pl
 800a324:	9304      	strpl	r3, [sp, #16]
 800a326:	9305      	strmi	r3, [sp, #20]
 800a328:	f1bb 0f00 	cmp.w	fp, #0
 800a32c:	db18      	blt.n	800a360 <_dtoa_r+0x218>
 800a32e:	9b05      	ldr	r3, [sp, #20]
 800a330:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a334:	445b      	add	r3, fp
 800a336:	9305      	str	r3, [sp, #20]
 800a338:	2300      	movs	r3, #0
 800a33a:	9a06      	ldr	r2, [sp, #24]
 800a33c:	2a09      	cmp	r2, #9
 800a33e:	d849      	bhi.n	800a3d4 <_dtoa_r+0x28c>
 800a340:	2a05      	cmp	r2, #5
 800a342:	bfc4      	itt	gt
 800a344:	3a04      	subgt	r2, #4
 800a346:	9206      	strgt	r2, [sp, #24]
 800a348:	9a06      	ldr	r2, [sp, #24]
 800a34a:	f1a2 0202 	sub.w	r2, r2, #2
 800a34e:	bfcc      	ite	gt
 800a350:	2400      	movgt	r4, #0
 800a352:	2401      	movle	r4, #1
 800a354:	2a03      	cmp	r2, #3
 800a356:	d848      	bhi.n	800a3ea <_dtoa_r+0x2a2>
 800a358:	e8df f002 	tbb	[pc, r2]
 800a35c:	3a2c2e0b 	.word	0x3a2c2e0b
 800a360:	9b04      	ldr	r3, [sp, #16]
 800a362:	2200      	movs	r2, #0
 800a364:	eba3 030b 	sub.w	r3, r3, fp
 800a368:	9304      	str	r3, [sp, #16]
 800a36a:	9209      	str	r2, [sp, #36]	; 0x24
 800a36c:	f1cb 0300 	rsb	r3, fp, #0
 800a370:	e7e3      	b.n	800a33a <_dtoa_r+0x1f2>
 800a372:	2200      	movs	r2, #0
 800a374:	9207      	str	r2, [sp, #28]
 800a376:	9a08      	ldr	r2, [sp, #32]
 800a378:	2a00      	cmp	r2, #0
 800a37a:	dc39      	bgt.n	800a3f0 <_dtoa_r+0x2a8>
 800a37c:	f04f 0a01 	mov.w	sl, #1
 800a380:	46d1      	mov	r9, sl
 800a382:	4652      	mov	r2, sl
 800a384:	f8cd a020 	str.w	sl, [sp, #32]
 800a388:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a38a:	2100      	movs	r1, #0
 800a38c:	6079      	str	r1, [r7, #4]
 800a38e:	2004      	movs	r0, #4
 800a390:	f100 0c14 	add.w	ip, r0, #20
 800a394:	4594      	cmp	ip, r2
 800a396:	6879      	ldr	r1, [r7, #4]
 800a398:	d92f      	bls.n	800a3fa <_dtoa_r+0x2b2>
 800a39a:	4630      	mov	r0, r6
 800a39c:	930d      	str	r3, [sp, #52]	; 0x34
 800a39e:	f000 fe6d 	bl	800b07c <_Balloc>
 800a3a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3a4:	9001      	str	r0, [sp, #4]
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d149      	bne.n	800a440 <_dtoa_r+0x2f8>
 800a3ac:	4b23      	ldr	r3, [pc, #140]	; (800a43c <_dtoa_r+0x2f4>)
 800a3ae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a3b2:	e6e1      	b.n	800a178 <_dtoa_r+0x30>
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	e7dd      	b.n	800a374 <_dtoa_r+0x22c>
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	9207      	str	r2, [sp, #28]
 800a3bc:	9a08      	ldr	r2, [sp, #32]
 800a3be:	eb0b 0a02 	add.w	sl, fp, r2
 800a3c2:	f10a 0901 	add.w	r9, sl, #1
 800a3c6:	464a      	mov	r2, r9
 800a3c8:	2a01      	cmp	r2, #1
 800a3ca:	bfb8      	it	lt
 800a3cc:	2201      	movlt	r2, #1
 800a3ce:	e7db      	b.n	800a388 <_dtoa_r+0x240>
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	e7f2      	b.n	800a3ba <_dtoa_r+0x272>
 800a3d4:	2401      	movs	r4, #1
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a3dc:	f04f 3aff 	mov.w	sl, #4294967295
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	46d1      	mov	r9, sl
 800a3e4:	2212      	movs	r2, #18
 800a3e6:	9108      	str	r1, [sp, #32]
 800a3e8:	e7ce      	b.n	800a388 <_dtoa_r+0x240>
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	9207      	str	r2, [sp, #28]
 800a3ee:	e7f5      	b.n	800a3dc <_dtoa_r+0x294>
 800a3f0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a3f4:	46d1      	mov	r9, sl
 800a3f6:	4652      	mov	r2, sl
 800a3f8:	e7c6      	b.n	800a388 <_dtoa_r+0x240>
 800a3fa:	3101      	adds	r1, #1
 800a3fc:	6079      	str	r1, [r7, #4]
 800a3fe:	0040      	lsls	r0, r0, #1
 800a400:	e7c6      	b.n	800a390 <_dtoa_r+0x248>
 800a402:	bf00      	nop
 800a404:	f3af 8000 	nop.w
 800a408:	636f4361 	.word	0x636f4361
 800a40c:	3fd287a7 	.word	0x3fd287a7
 800a410:	8b60c8b3 	.word	0x8b60c8b3
 800a414:	3fc68a28 	.word	0x3fc68a28
 800a418:	509f79fb 	.word	0x509f79fb
 800a41c:	3fd34413 	.word	0x3fd34413
 800a420:	0800c0c1 	.word	0x0800c0c1
 800a424:	0800c0d8 	.word	0x0800c0d8
 800a428:	7ff00000 	.word	0x7ff00000
 800a42c:	0800c0bd 	.word	0x0800c0bd
 800a430:	0800c0b4 	.word	0x0800c0b4
 800a434:	0800c091 	.word	0x0800c091
 800a438:	0800c228 	.word	0x0800c228
 800a43c:	0800c133 	.word	0x0800c133
 800a440:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a442:	9901      	ldr	r1, [sp, #4]
 800a444:	6011      	str	r1, [r2, #0]
 800a446:	f1b9 0f0e 	cmp.w	r9, #14
 800a44a:	d86c      	bhi.n	800a526 <_dtoa_r+0x3de>
 800a44c:	2c00      	cmp	r4, #0
 800a44e:	d06a      	beq.n	800a526 <_dtoa_r+0x3de>
 800a450:	f1bb 0f00 	cmp.w	fp, #0
 800a454:	f340 80a0 	ble.w	800a598 <_dtoa_r+0x450>
 800a458:	49c1      	ldr	r1, [pc, #772]	; (800a760 <_dtoa_r+0x618>)
 800a45a:	f00b 020f 	and.w	r2, fp, #15
 800a45e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a462:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a466:	ed92 7b00 	vldr	d7, [r2]
 800a46a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a46e:	f000 8087 	beq.w	800a580 <_dtoa_r+0x438>
 800a472:	4abc      	ldr	r2, [pc, #752]	; (800a764 <_dtoa_r+0x61c>)
 800a474:	ed92 6b08 	vldr	d6, [r2, #32]
 800a478:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a47c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a480:	f001 010f 	and.w	r1, r1, #15
 800a484:	2203      	movs	r2, #3
 800a486:	48b7      	ldr	r0, [pc, #732]	; (800a764 <_dtoa_r+0x61c>)
 800a488:	2900      	cmp	r1, #0
 800a48a:	d17b      	bne.n	800a584 <_dtoa_r+0x43c>
 800a48c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a490:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a494:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a49a:	2900      	cmp	r1, #0
 800a49c:	f000 80a2 	beq.w	800a5e4 <_dtoa_r+0x49c>
 800a4a0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a4a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4a8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b0:	f140 8098 	bpl.w	800a5e4 <_dtoa_r+0x49c>
 800a4b4:	f1b9 0f00 	cmp.w	r9, #0
 800a4b8:	f000 8094 	beq.w	800a5e4 <_dtoa_r+0x49c>
 800a4bc:	f1ba 0f00 	cmp.w	sl, #0
 800a4c0:	dd2f      	ble.n	800a522 <_dtoa_r+0x3da>
 800a4c2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a4c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a4ca:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a4ce:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a4d2:	3201      	adds	r2, #1
 800a4d4:	4650      	mov	r0, sl
 800a4d6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a4da:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a4de:	ee07 2a90 	vmov	s15, r2
 800a4e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a4e6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a4ea:	ee15 4a90 	vmov	r4, s11
 800a4ee:	ec52 1b15 	vmov	r1, r2, d5
 800a4f2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d177      	bne.n	800a5ea <_dtoa_r+0x4a2>
 800a4fa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a4fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a502:	ec42 1b17 	vmov	d7, r1, r2
 800a506:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a50e:	f300 8263 	bgt.w	800a9d8 <_dtoa_r+0x890>
 800a512:	eeb1 7b47 	vneg.f64	d7, d7
 800a516:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a51e:	f100 8258 	bmi.w	800a9d2 <_dtoa_r+0x88a>
 800a522:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a526:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a528:	2a00      	cmp	r2, #0
 800a52a:	f2c0 811d 	blt.w	800a768 <_dtoa_r+0x620>
 800a52e:	f1bb 0f0e 	cmp.w	fp, #14
 800a532:	f300 8119 	bgt.w	800a768 <_dtoa_r+0x620>
 800a536:	4b8a      	ldr	r3, [pc, #552]	; (800a760 <_dtoa_r+0x618>)
 800a538:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a53c:	ed93 6b00 	vldr	d6, [r3]
 800a540:	9b08      	ldr	r3, [sp, #32]
 800a542:	2b00      	cmp	r3, #0
 800a544:	f280 80b7 	bge.w	800a6b6 <_dtoa_r+0x56e>
 800a548:	f1b9 0f00 	cmp.w	r9, #0
 800a54c:	f300 80b3 	bgt.w	800a6b6 <_dtoa_r+0x56e>
 800a550:	f040 823f 	bne.w	800a9d2 <_dtoa_r+0x88a>
 800a554:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a558:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a55c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a560:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a568:	464c      	mov	r4, r9
 800a56a:	464f      	mov	r7, r9
 800a56c:	f280 8215 	bge.w	800a99a <_dtoa_r+0x852>
 800a570:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a574:	2331      	movs	r3, #49	; 0x31
 800a576:	f808 3b01 	strb.w	r3, [r8], #1
 800a57a:	f10b 0b01 	add.w	fp, fp, #1
 800a57e:	e211      	b.n	800a9a4 <_dtoa_r+0x85c>
 800a580:	2202      	movs	r2, #2
 800a582:	e780      	b.n	800a486 <_dtoa_r+0x33e>
 800a584:	07cc      	lsls	r4, r1, #31
 800a586:	d504      	bpl.n	800a592 <_dtoa_r+0x44a>
 800a588:	ed90 6b00 	vldr	d6, [r0]
 800a58c:	3201      	adds	r2, #1
 800a58e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a592:	1049      	asrs	r1, r1, #1
 800a594:	3008      	adds	r0, #8
 800a596:	e777      	b.n	800a488 <_dtoa_r+0x340>
 800a598:	d022      	beq.n	800a5e0 <_dtoa_r+0x498>
 800a59a:	f1cb 0100 	rsb	r1, fp, #0
 800a59e:	4a70      	ldr	r2, [pc, #448]	; (800a760 <_dtoa_r+0x618>)
 800a5a0:	f001 000f 	and.w	r0, r1, #15
 800a5a4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a5a8:	ed92 7b00 	vldr	d7, [r2]
 800a5ac:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a5b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a5b4:	486b      	ldr	r0, [pc, #428]	; (800a764 <_dtoa_r+0x61c>)
 800a5b6:	1109      	asrs	r1, r1, #4
 800a5b8:	2400      	movs	r4, #0
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	b929      	cbnz	r1, 800a5ca <_dtoa_r+0x482>
 800a5be:	2c00      	cmp	r4, #0
 800a5c0:	f43f af6a 	beq.w	800a498 <_dtoa_r+0x350>
 800a5c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a5c8:	e766      	b.n	800a498 <_dtoa_r+0x350>
 800a5ca:	07cf      	lsls	r7, r1, #31
 800a5cc:	d505      	bpl.n	800a5da <_dtoa_r+0x492>
 800a5ce:	ed90 6b00 	vldr	d6, [r0]
 800a5d2:	3201      	adds	r2, #1
 800a5d4:	2401      	movs	r4, #1
 800a5d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a5da:	1049      	asrs	r1, r1, #1
 800a5dc:	3008      	adds	r0, #8
 800a5de:	e7ed      	b.n	800a5bc <_dtoa_r+0x474>
 800a5e0:	2202      	movs	r2, #2
 800a5e2:	e759      	b.n	800a498 <_dtoa_r+0x350>
 800a5e4:	465f      	mov	r7, fp
 800a5e6:	4648      	mov	r0, r9
 800a5e8:	e775      	b.n	800a4d6 <_dtoa_r+0x38e>
 800a5ea:	ec42 1b17 	vmov	d7, r1, r2
 800a5ee:	4a5c      	ldr	r2, [pc, #368]	; (800a760 <_dtoa_r+0x618>)
 800a5f0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a5f4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a5f8:	9a01      	ldr	r2, [sp, #4]
 800a5fa:	1814      	adds	r4, r2, r0
 800a5fc:	9a07      	ldr	r2, [sp, #28]
 800a5fe:	b352      	cbz	r2, 800a656 <_dtoa_r+0x50e>
 800a600:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a604:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a608:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a60c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a610:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a614:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a618:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a61c:	ee14 2a90 	vmov	r2, s9
 800a620:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a624:	3230      	adds	r2, #48	; 0x30
 800a626:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a62a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a632:	f808 2b01 	strb.w	r2, [r8], #1
 800a636:	d439      	bmi.n	800a6ac <_dtoa_r+0x564>
 800a638:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a63c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a644:	d472      	bmi.n	800a72c <_dtoa_r+0x5e4>
 800a646:	45a0      	cmp	r8, r4
 800a648:	f43f af6b 	beq.w	800a522 <_dtoa_r+0x3da>
 800a64c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a650:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a654:	e7e0      	b.n	800a618 <_dtoa_r+0x4d0>
 800a656:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a65a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a65e:	4621      	mov	r1, r4
 800a660:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a664:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a668:	ee14 2a90 	vmov	r2, s9
 800a66c:	3230      	adds	r2, #48	; 0x30
 800a66e:	f808 2b01 	strb.w	r2, [r8], #1
 800a672:	45a0      	cmp	r8, r4
 800a674:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a678:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a67c:	d118      	bne.n	800a6b0 <_dtoa_r+0x568>
 800a67e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a682:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a686:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a68e:	dc4d      	bgt.n	800a72c <_dtoa_r+0x5e4>
 800a690:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a694:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a69c:	f57f af41 	bpl.w	800a522 <_dtoa_r+0x3da>
 800a6a0:	4688      	mov	r8, r1
 800a6a2:	3901      	subs	r1, #1
 800a6a4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a6a8:	2b30      	cmp	r3, #48	; 0x30
 800a6aa:	d0f9      	beq.n	800a6a0 <_dtoa_r+0x558>
 800a6ac:	46bb      	mov	fp, r7
 800a6ae:	e02a      	b.n	800a706 <_dtoa_r+0x5be>
 800a6b0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a6b4:	e7d6      	b.n	800a664 <_dtoa_r+0x51c>
 800a6b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6ba:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a6be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a6c2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a6c6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a6ca:	ee15 3a10 	vmov	r3, s10
 800a6ce:	3330      	adds	r3, #48	; 0x30
 800a6d0:	f808 3b01 	strb.w	r3, [r8], #1
 800a6d4:	9b01      	ldr	r3, [sp, #4]
 800a6d6:	eba8 0303 	sub.w	r3, r8, r3
 800a6da:	4599      	cmp	r9, r3
 800a6dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a6e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a6e4:	d133      	bne.n	800a74e <_dtoa_r+0x606>
 800a6e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a6ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6f2:	dc1a      	bgt.n	800a72a <_dtoa_r+0x5e2>
 800a6f4:	eeb4 7b46 	vcmp.f64	d7, d6
 800a6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6fc:	d103      	bne.n	800a706 <_dtoa_r+0x5be>
 800a6fe:	ee15 3a10 	vmov	r3, s10
 800a702:	07d9      	lsls	r1, r3, #31
 800a704:	d411      	bmi.n	800a72a <_dtoa_r+0x5e2>
 800a706:	4629      	mov	r1, r5
 800a708:	4630      	mov	r0, r6
 800a70a:	f000 fcf7 	bl	800b0fc <_Bfree>
 800a70e:	2300      	movs	r3, #0
 800a710:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a712:	f888 3000 	strb.w	r3, [r8]
 800a716:	f10b 0301 	add.w	r3, fp, #1
 800a71a:	6013      	str	r3, [r2, #0]
 800a71c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f43f ad61 	beq.w	800a1e6 <_dtoa_r+0x9e>
 800a724:	f8c3 8000 	str.w	r8, [r3]
 800a728:	e55d      	b.n	800a1e6 <_dtoa_r+0x9e>
 800a72a:	465f      	mov	r7, fp
 800a72c:	4643      	mov	r3, r8
 800a72e:	4698      	mov	r8, r3
 800a730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a734:	2a39      	cmp	r2, #57	; 0x39
 800a736:	d106      	bne.n	800a746 <_dtoa_r+0x5fe>
 800a738:	9a01      	ldr	r2, [sp, #4]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d1f7      	bne.n	800a72e <_dtoa_r+0x5e6>
 800a73e:	9901      	ldr	r1, [sp, #4]
 800a740:	2230      	movs	r2, #48	; 0x30
 800a742:	3701      	adds	r7, #1
 800a744:	700a      	strb	r2, [r1, #0]
 800a746:	781a      	ldrb	r2, [r3, #0]
 800a748:	3201      	adds	r2, #1
 800a74a:	701a      	strb	r2, [r3, #0]
 800a74c:	e7ae      	b.n	800a6ac <_dtoa_r+0x564>
 800a74e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a752:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a75a:	d1b2      	bne.n	800a6c2 <_dtoa_r+0x57a>
 800a75c:	e7d3      	b.n	800a706 <_dtoa_r+0x5be>
 800a75e:	bf00      	nop
 800a760:	0800c228 	.word	0x0800c228
 800a764:	0800c200 	.word	0x0800c200
 800a768:	9907      	ldr	r1, [sp, #28]
 800a76a:	2900      	cmp	r1, #0
 800a76c:	f000 80d0 	beq.w	800a910 <_dtoa_r+0x7c8>
 800a770:	9906      	ldr	r1, [sp, #24]
 800a772:	2901      	cmp	r1, #1
 800a774:	f300 80b4 	bgt.w	800a8e0 <_dtoa_r+0x798>
 800a778:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a77a:	2900      	cmp	r1, #0
 800a77c:	f000 80ac 	beq.w	800a8d8 <_dtoa_r+0x790>
 800a780:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a784:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a788:	461c      	mov	r4, r3
 800a78a:	930a      	str	r3, [sp, #40]	; 0x28
 800a78c:	9b04      	ldr	r3, [sp, #16]
 800a78e:	4413      	add	r3, r2
 800a790:	9304      	str	r3, [sp, #16]
 800a792:	9b05      	ldr	r3, [sp, #20]
 800a794:	2101      	movs	r1, #1
 800a796:	4413      	add	r3, r2
 800a798:	4630      	mov	r0, r6
 800a79a:	9305      	str	r3, [sp, #20]
 800a79c:	f000 fd66 	bl	800b26c <__i2b>
 800a7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a2:	4607      	mov	r7, r0
 800a7a4:	f1b8 0f00 	cmp.w	r8, #0
 800a7a8:	dd0d      	ble.n	800a7c6 <_dtoa_r+0x67e>
 800a7aa:	9a05      	ldr	r2, [sp, #20]
 800a7ac:	2a00      	cmp	r2, #0
 800a7ae:	dd0a      	ble.n	800a7c6 <_dtoa_r+0x67e>
 800a7b0:	4542      	cmp	r2, r8
 800a7b2:	9904      	ldr	r1, [sp, #16]
 800a7b4:	bfa8      	it	ge
 800a7b6:	4642      	movge	r2, r8
 800a7b8:	1a89      	subs	r1, r1, r2
 800a7ba:	9104      	str	r1, [sp, #16]
 800a7bc:	9905      	ldr	r1, [sp, #20]
 800a7be:	eba8 0802 	sub.w	r8, r8, r2
 800a7c2:	1a8a      	subs	r2, r1, r2
 800a7c4:	9205      	str	r2, [sp, #20]
 800a7c6:	b303      	cbz	r3, 800a80a <_dtoa_r+0x6c2>
 800a7c8:	9a07      	ldr	r2, [sp, #28]
 800a7ca:	2a00      	cmp	r2, #0
 800a7cc:	f000 80a5 	beq.w	800a91a <_dtoa_r+0x7d2>
 800a7d0:	2c00      	cmp	r4, #0
 800a7d2:	dd13      	ble.n	800a7fc <_dtoa_r+0x6b4>
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	4622      	mov	r2, r4
 800a7d8:	4630      	mov	r0, r6
 800a7da:	930d      	str	r3, [sp, #52]	; 0x34
 800a7dc:	f000 fe06 	bl	800b3ec <__pow5mult>
 800a7e0:	462a      	mov	r2, r5
 800a7e2:	4601      	mov	r1, r0
 800a7e4:	4607      	mov	r7, r0
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f000 fd56 	bl	800b298 <__multiply>
 800a7ec:	4629      	mov	r1, r5
 800a7ee:	900a      	str	r0, [sp, #40]	; 0x28
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f000 fc83 	bl	800b0fc <_Bfree>
 800a7f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7fa:	4615      	mov	r5, r2
 800a7fc:	1b1a      	subs	r2, r3, r4
 800a7fe:	d004      	beq.n	800a80a <_dtoa_r+0x6c2>
 800a800:	4629      	mov	r1, r5
 800a802:	4630      	mov	r0, r6
 800a804:	f000 fdf2 	bl	800b3ec <__pow5mult>
 800a808:	4605      	mov	r5, r0
 800a80a:	2101      	movs	r1, #1
 800a80c:	4630      	mov	r0, r6
 800a80e:	f000 fd2d 	bl	800b26c <__i2b>
 800a812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a814:	2b00      	cmp	r3, #0
 800a816:	4604      	mov	r4, r0
 800a818:	f340 8081 	ble.w	800a91e <_dtoa_r+0x7d6>
 800a81c:	461a      	mov	r2, r3
 800a81e:	4601      	mov	r1, r0
 800a820:	4630      	mov	r0, r6
 800a822:	f000 fde3 	bl	800b3ec <__pow5mult>
 800a826:	9b06      	ldr	r3, [sp, #24]
 800a828:	2b01      	cmp	r3, #1
 800a82a:	4604      	mov	r4, r0
 800a82c:	dd7a      	ble.n	800a924 <_dtoa_r+0x7dc>
 800a82e:	2300      	movs	r3, #0
 800a830:	930a      	str	r3, [sp, #40]	; 0x28
 800a832:	6922      	ldr	r2, [r4, #16]
 800a834:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a838:	6910      	ldr	r0, [r2, #16]
 800a83a:	f000 fcc7 	bl	800b1cc <__hi0bits>
 800a83e:	f1c0 0020 	rsb	r0, r0, #32
 800a842:	9b05      	ldr	r3, [sp, #20]
 800a844:	4418      	add	r0, r3
 800a846:	f010 001f 	ands.w	r0, r0, #31
 800a84a:	f000 808c 	beq.w	800a966 <_dtoa_r+0x81e>
 800a84e:	f1c0 0220 	rsb	r2, r0, #32
 800a852:	2a04      	cmp	r2, #4
 800a854:	f340 8085 	ble.w	800a962 <_dtoa_r+0x81a>
 800a858:	f1c0 001c 	rsb	r0, r0, #28
 800a85c:	9b04      	ldr	r3, [sp, #16]
 800a85e:	4403      	add	r3, r0
 800a860:	9304      	str	r3, [sp, #16]
 800a862:	9b05      	ldr	r3, [sp, #20]
 800a864:	4403      	add	r3, r0
 800a866:	4480      	add	r8, r0
 800a868:	9305      	str	r3, [sp, #20]
 800a86a:	9b04      	ldr	r3, [sp, #16]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	dd05      	ble.n	800a87c <_dtoa_r+0x734>
 800a870:	4629      	mov	r1, r5
 800a872:	461a      	mov	r2, r3
 800a874:	4630      	mov	r0, r6
 800a876:	f000 fe13 	bl	800b4a0 <__lshift>
 800a87a:	4605      	mov	r5, r0
 800a87c:	9b05      	ldr	r3, [sp, #20]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	dd05      	ble.n	800a88e <_dtoa_r+0x746>
 800a882:	4621      	mov	r1, r4
 800a884:	461a      	mov	r2, r3
 800a886:	4630      	mov	r0, r6
 800a888:	f000 fe0a 	bl	800b4a0 <__lshift>
 800a88c:	4604      	mov	r4, r0
 800a88e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a890:	2b00      	cmp	r3, #0
 800a892:	d06a      	beq.n	800a96a <_dtoa_r+0x822>
 800a894:	4621      	mov	r1, r4
 800a896:	4628      	mov	r0, r5
 800a898:	f000 fe72 	bl	800b580 <__mcmp>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	da64      	bge.n	800a96a <_dtoa_r+0x822>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	220a      	movs	r2, #10
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	f000 fc4a 	bl	800b140 <__multadd>
 800a8ac:	9b07      	ldr	r3, [sp, #28]
 800a8ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8b2:	4605      	mov	r5, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f000 8191 	beq.w	800abdc <_dtoa_r+0xa94>
 800a8ba:	4639      	mov	r1, r7
 800a8bc:	2300      	movs	r3, #0
 800a8be:	220a      	movs	r2, #10
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	f000 fc3d 	bl	800b140 <__multadd>
 800a8c6:	f1ba 0f00 	cmp.w	sl, #0
 800a8ca:	4607      	mov	r7, r0
 800a8cc:	f300 808d 	bgt.w	800a9ea <_dtoa_r+0x8a2>
 800a8d0:	9b06      	ldr	r3, [sp, #24]
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	dc50      	bgt.n	800a978 <_dtoa_r+0x830>
 800a8d6:	e088      	b.n	800a9ea <_dtoa_r+0x8a2>
 800a8d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8da:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a8de:	e751      	b.n	800a784 <_dtoa_r+0x63c>
 800a8e0:	f109 34ff 	add.w	r4, r9, #4294967295
 800a8e4:	42a3      	cmp	r3, r4
 800a8e6:	bfbf      	itttt	lt
 800a8e8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800a8ea:	1ae3      	sublt	r3, r4, r3
 800a8ec:	18d2      	addlt	r2, r2, r3
 800a8ee:	9209      	strlt	r2, [sp, #36]	; 0x24
 800a8f0:	bfb6      	itet	lt
 800a8f2:	4623      	movlt	r3, r4
 800a8f4:	1b1c      	subge	r4, r3, r4
 800a8f6:	2400      	movlt	r4, #0
 800a8f8:	f1b9 0f00 	cmp.w	r9, #0
 800a8fc:	bfb5      	itete	lt
 800a8fe:	9a04      	ldrlt	r2, [sp, #16]
 800a900:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a904:	eba2 0809 	sublt.w	r8, r2, r9
 800a908:	464a      	movge	r2, r9
 800a90a:	bfb8      	it	lt
 800a90c:	2200      	movlt	r2, #0
 800a90e:	e73c      	b.n	800a78a <_dtoa_r+0x642>
 800a910:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a914:	9f07      	ldr	r7, [sp, #28]
 800a916:	461c      	mov	r4, r3
 800a918:	e744      	b.n	800a7a4 <_dtoa_r+0x65c>
 800a91a:	461a      	mov	r2, r3
 800a91c:	e770      	b.n	800a800 <_dtoa_r+0x6b8>
 800a91e:	9b06      	ldr	r3, [sp, #24]
 800a920:	2b01      	cmp	r3, #1
 800a922:	dc18      	bgt.n	800a956 <_dtoa_r+0x80e>
 800a924:	9b02      	ldr	r3, [sp, #8]
 800a926:	b9b3      	cbnz	r3, 800a956 <_dtoa_r+0x80e>
 800a928:	9b03      	ldr	r3, [sp, #12]
 800a92a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a92e:	b9a2      	cbnz	r2, 800a95a <_dtoa_r+0x812>
 800a930:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a934:	0d12      	lsrs	r2, r2, #20
 800a936:	0512      	lsls	r2, r2, #20
 800a938:	b18a      	cbz	r2, 800a95e <_dtoa_r+0x816>
 800a93a:	9b04      	ldr	r3, [sp, #16]
 800a93c:	3301      	adds	r3, #1
 800a93e:	9304      	str	r3, [sp, #16]
 800a940:	9b05      	ldr	r3, [sp, #20]
 800a942:	3301      	adds	r3, #1
 800a944:	9305      	str	r3, [sp, #20]
 800a946:	2301      	movs	r3, #1
 800a948:	930a      	str	r3, [sp, #40]	; 0x28
 800a94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f47f af70 	bne.w	800a832 <_dtoa_r+0x6ea>
 800a952:	2001      	movs	r0, #1
 800a954:	e775      	b.n	800a842 <_dtoa_r+0x6fa>
 800a956:	2300      	movs	r3, #0
 800a958:	e7f6      	b.n	800a948 <_dtoa_r+0x800>
 800a95a:	9b02      	ldr	r3, [sp, #8]
 800a95c:	e7f4      	b.n	800a948 <_dtoa_r+0x800>
 800a95e:	920a      	str	r2, [sp, #40]	; 0x28
 800a960:	e7f3      	b.n	800a94a <_dtoa_r+0x802>
 800a962:	d082      	beq.n	800a86a <_dtoa_r+0x722>
 800a964:	4610      	mov	r0, r2
 800a966:	301c      	adds	r0, #28
 800a968:	e778      	b.n	800a85c <_dtoa_r+0x714>
 800a96a:	f1b9 0f00 	cmp.w	r9, #0
 800a96e:	dc37      	bgt.n	800a9e0 <_dtoa_r+0x898>
 800a970:	9b06      	ldr	r3, [sp, #24]
 800a972:	2b02      	cmp	r3, #2
 800a974:	dd34      	ble.n	800a9e0 <_dtoa_r+0x898>
 800a976:	46ca      	mov	sl, r9
 800a978:	f1ba 0f00 	cmp.w	sl, #0
 800a97c:	d10d      	bne.n	800a99a <_dtoa_r+0x852>
 800a97e:	4621      	mov	r1, r4
 800a980:	4653      	mov	r3, sl
 800a982:	2205      	movs	r2, #5
 800a984:	4630      	mov	r0, r6
 800a986:	f000 fbdb 	bl	800b140 <__multadd>
 800a98a:	4601      	mov	r1, r0
 800a98c:	4604      	mov	r4, r0
 800a98e:	4628      	mov	r0, r5
 800a990:	f000 fdf6 	bl	800b580 <__mcmp>
 800a994:	2800      	cmp	r0, #0
 800a996:	f73f adeb 	bgt.w	800a570 <_dtoa_r+0x428>
 800a99a:	9b08      	ldr	r3, [sp, #32]
 800a99c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a9a0:	ea6f 0b03 	mvn.w	fp, r3
 800a9a4:	f04f 0900 	mov.w	r9, #0
 800a9a8:	4621      	mov	r1, r4
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f000 fba6 	bl	800b0fc <_Bfree>
 800a9b0:	2f00      	cmp	r7, #0
 800a9b2:	f43f aea8 	beq.w	800a706 <_dtoa_r+0x5be>
 800a9b6:	f1b9 0f00 	cmp.w	r9, #0
 800a9ba:	d005      	beq.n	800a9c8 <_dtoa_r+0x880>
 800a9bc:	45b9      	cmp	r9, r7
 800a9be:	d003      	beq.n	800a9c8 <_dtoa_r+0x880>
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f000 fb9a 	bl	800b0fc <_Bfree>
 800a9c8:	4639      	mov	r1, r7
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f000 fb96 	bl	800b0fc <_Bfree>
 800a9d0:	e699      	b.n	800a706 <_dtoa_r+0x5be>
 800a9d2:	2400      	movs	r4, #0
 800a9d4:	4627      	mov	r7, r4
 800a9d6:	e7e0      	b.n	800a99a <_dtoa_r+0x852>
 800a9d8:	46bb      	mov	fp, r7
 800a9da:	4604      	mov	r4, r0
 800a9dc:	4607      	mov	r7, r0
 800a9de:	e5c7      	b.n	800a570 <_dtoa_r+0x428>
 800a9e0:	9b07      	ldr	r3, [sp, #28]
 800a9e2:	46ca      	mov	sl, r9
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f000 8100 	beq.w	800abea <_dtoa_r+0xaa2>
 800a9ea:	f1b8 0f00 	cmp.w	r8, #0
 800a9ee:	dd05      	ble.n	800a9fc <_dtoa_r+0x8b4>
 800a9f0:	4639      	mov	r1, r7
 800a9f2:	4642      	mov	r2, r8
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f000 fd53 	bl	800b4a0 <__lshift>
 800a9fa:	4607      	mov	r7, r0
 800a9fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d05d      	beq.n	800aabe <_dtoa_r+0x976>
 800aa02:	6879      	ldr	r1, [r7, #4]
 800aa04:	4630      	mov	r0, r6
 800aa06:	f000 fb39 	bl	800b07c <_Balloc>
 800aa0a:	4680      	mov	r8, r0
 800aa0c:	b928      	cbnz	r0, 800aa1a <_dtoa_r+0x8d2>
 800aa0e:	4b82      	ldr	r3, [pc, #520]	; (800ac18 <_dtoa_r+0xad0>)
 800aa10:	4602      	mov	r2, r0
 800aa12:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aa16:	f7ff bbaf 	b.w	800a178 <_dtoa_r+0x30>
 800aa1a:	693a      	ldr	r2, [r7, #16]
 800aa1c:	3202      	adds	r2, #2
 800aa1e:	0092      	lsls	r2, r2, #2
 800aa20:	f107 010c 	add.w	r1, r7, #12
 800aa24:	300c      	adds	r0, #12
 800aa26:	f7fe fd5d 	bl	80094e4 <memcpy>
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	4641      	mov	r1, r8
 800aa2e:	4630      	mov	r0, r6
 800aa30:	f000 fd36 	bl	800b4a0 <__lshift>
 800aa34:	9b01      	ldr	r3, [sp, #4]
 800aa36:	3301      	adds	r3, #1
 800aa38:	9304      	str	r3, [sp, #16]
 800aa3a:	9b01      	ldr	r3, [sp, #4]
 800aa3c:	4453      	add	r3, sl
 800aa3e:	9308      	str	r3, [sp, #32]
 800aa40:	9b02      	ldr	r3, [sp, #8]
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	46b9      	mov	r9, r7
 800aa48:	9307      	str	r3, [sp, #28]
 800aa4a:	4607      	mov	r7, r0
 800aa4c:	9b04      	ldr	r3, [sp, #16]
 800aa4e:	4621      	mov	r1, r4
 800aa50:	3b01      	subs	r3, #1
 800aa52:	4628      	mov	r0, r5
 800aa54:	9302      	str	r3, [sp, #8]
 800aa56:	f7ff faeb 	bl	800a030 <quorem>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	3330      	adds	r3, #48	; 0x30
 800aa5e:	9005      	str	r0, [sp, #20]
 800aa60:	4649      	mov	r1, r9
 800aa62:	4628      	mov	r0, r5
 800aa64:	9309      	str	r3, [sp, #36]	; 0x24
 800aa66:	f000 fd8b 	bl	800b580 <__mcmp>
 800aa6a:	463a      	mov	r2, r7
 800aa6c:	4682      	mov	sl, r0
 800aa6e:	4621      	mov	r1, r4
 800aa70:	4630      	mov	r0, r6
 800aa72:	f000 fda1 	bl	800b5b8 <__mdiff>
 800aa76:	68c2      	ldr	r2, [r0, #12]
 800aa78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa7a:	4680      	mov	r8, r0
 800aa7c:	bb0a      	cbnz	r2, 800aac2 <_dtoa_r+0x97a>
 800aa7e:	4601      	mov	r1, r0
 800aa80:	4628      	mov	r0, r5
 800aa82:	f000 fd7d 	bl	800b580 <__mcmp>
 800aa86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa88:	4602      	mov	r2, r0
 800aa8a:	4641      	mov	r1, r8
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800aa92:	f000 fb33 	bl	800b0fc <_Bfree>
 800aa96:	9b06      	ldr	r3, [sp, #24]
 800aa98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa9a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aa9e:	ea43 0102 	orr.w	r1, r3, r2
 800aaa2:	9b07      	ldr	r3, [sp, #28]
 800aaa4:	430b      	orrs	r3, r1
 800aaa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaa8:	d10d      	bne.n	800aac6 <_dtoa_r+0x97e>
 800aaaa:	2b39      	cmp	r3, #57	; 0x39
 800aaac:	d029      	beq.n	800ab02 <_dtoa_r+0x9ba>
 800aaae:	f1ba 0f00 	cmp.w	sl, #0
 800aab2:	dd01      	ble.n	800aab8 <_dtoa_r+0x970>
 800aab4:	9b05      	ldr	r3, [sp, #20]
 800aab6:	3331      	adds	r3, #49	; 0x31
 800aab8:	9a02      	ldr	r2, [sp, #8]
 800aaba:	7013      	strb	r3, [r2, #0]
 800aabc:	e774      	b.n	800a9a8 <_dtoa_r+0x860>
 800aabe:	4638      	mov	r0, r7
 800aac0:	e7b8      	b.n	800aa34 <_dtoa_r+0x8ec>
 800aac2:	2201      	movs	r2, #1
 800aac4:	e7e1      	b.n	800aa8a <_dtoa_r+0x942>
 800aac6:	f1ba 0f00 	cmp.w	sl, #0
 800aaca:	db06      	blt.n	800aada <_dtoa_r+0x992>
 800aacc:	9906      	ldr	r1, [sp, #24]
 800aace:	ea41 0a0a 	orr.w	sl, r1, sl
 800aad2:	9907      	ldr	r1, [sp, #28]
 800aad4:	ea5a 0101 	orrs.w	r1, sl, r1
 800aad8:	d120      	bne.n	800ab1c <_dtoa_r+0x9d4>
 800aada:	2a00      	cmp	r2, #0
 800aadc:	ddec      	ble.n	800aab8 <_dtoa_r+0x970>
 800aade:	4629      	mov	r1, r5
 800aae0:	2201      	movs	r2, #1
 800aae2:	4630      	mov	r0, r6
 800aae4:	9304      	str	r3, [sp, #16]
 800aae6:	f000 fcdb 	bl	800b4a0 <__lshift>
 800aaea:	4621      	mov	r1, r4
 800aaec:	4605      	mov	r5, r0
 800aaee:	f000 fd47 	bl	800b580 <__mcmp>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	9b04      	ldr	r3, [sp, #16]
 800aaf6:	dc02      	bgt.n	800aafe <_dtoa_r+0x9b6>
 800aaf8:	d1de      	bne.n	800aab8 <_dtoa_r+0x970>
 800aafa:	07da      	lsls	r2, r3, #31
 800aafc:	d5dc      	bpl.n	800aab8 <_dtoa_r+0x970>
 800aafe:	2b39      	cmp	r3, #57	; 0x39
 800ab00:	d1d8      	bne.n	800aab4 <_dtoa_r+0x96c>
 800ab02:	9a02      	ldr	r2, [sp, #8]
 800ab04:	2339      	movs	r3, #57	; 0x39
 800ab06:	7013      	strb	r3, [r2, #0]
 800ab08:	4643      	mov	r3, r8
 800ab0a:	4698      	mov	r8, r3
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ab12:	2a39      	cmp	r2, #57	; 0x39
 800ab14:	d051      	beq.n	800abba <_dtoa_r+0xa72>
 800ab16:	3201      	adds	r2, #1
 800ab18:	701a      	strb	r2, [r3, #0]
 800ab1a:	e745      	b.n	800a9a8 <_dtoa_r+0x860>
 800ab1c:	2a00      	cmp	r2, #0
 800ab1e:	dd03      	ble.n	800ab28 <_dtoa_r+0x9e0>
 800ab20:	2b39      	cmp	r3, #57	; 0x39
 800ab22:	d0ee      	beq.n	800ab02 <_dtoa_r+0x9ba>
 800ab24:	3301      	adds	r3, #1
 800ab26:	e7c7      	b.n	800aab8 <_dtoa_r+0x970>
 800ab28:	9a04      	ldr	r2, [sp, #16]
 800ab2a:	9908      	ldr	r1, [sp, #32]
 800ab2c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ab30:	428a      	cmp	r2, r1
 800ab32:	d02b      	beq.n	800ab8c <_dtoa_r+0xa44>
 800ab34:	4629      	mov	r1, r5
 800ab36:	2300      	movs	r3, #0
 800ab38:	220a      	movs	r2, #10
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	f000 fb00 	bl	800b140 <__multadd>
 800ab40:	45b9      	cmp	r9, r7
 800ab42:	4605      	mov	r5, r0
 800ab44:	f04f 0300 	mov.w	r3, #0
 800ab48:	f04f 020a 	mov.w	r2, #10
 800ab4c:	4649      	mov	r1, r9
 800ab4e:	4630      	mov	r0, r6
 800ab50:	d107      	bne.n	800ab62 <_dtoa_r+0xa1a>
 800ab52:	f000 faf5 	bl	800b140 <__multadd>
 800ab56:	4681      	mov	r9, r0
 800ab58:	4607      	mov	r7, r0
 800ab5a:	9b04      	ldr	r3, [sp, #16]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	9304      	str	r3, [sp, #16]
 800ab60:	e774      	b.n	800aa4c <_dtoa_r+0x904>
 800ab62:	f000 faed 	bl	800b140 <__multadd>
 800ab66:	4639      	mov	r1, r7
 800ab68:	4681      	mov	r9, r0
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	220a      	movs	r2, #10
 800ab6e:	4630      	mov	r0, r6
 800ab70:	f000 fae6 	bl	800b140 <__multadd>
 800ab74:	4607      	mov	r7, r0
 800ab76:	e7f0      	b.n	800ab5a <_dtoa_r+0xa12>
 800ab78:	f1ba 0f00 	cmp.w	sl, #0
 800ab7c:	9a01      	ldr	r2, [sp, #4]
 800ab7e:	bfcc      	ite	gt
 800ab80:	46d0      	movgt	r8, sl
 800ab82:	f04f 0801 	movle.w	r8, #1
 800ab86:	4490      	add	r8, r2
 800ab88:	f04f 0900 	mov.w	r9, #0
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	2201      	movs	r2, #1
 800ab90:	4630      	mov	r0, r6
 800ab92:	9302      	str	r3, [sp, #8]
 800ab94:	f000 fc84 	bl	800b4a0 <__lshift>
 800ab98:	4621      	mov	r1, r4
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	f000 fcf0 	bl	800b580 <__mcmp>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	dcb1      	bgt.n	800ab08 <_dtoa_r+0x9c0>
 800aba4:	d102      	bne.n	800abac <_dtoa_r+0xa64>
 800aba6:	9b02      	ldr	r3, [sp, #8]
 800aba8:	07db      	lsls	r3, r3, #31
 800abaa:	d4ad      	bmi.n	800ab08 <_dtoa_r+0x9c0>
 800abac:	4643      	mov	r3, r8
 800abae:	4698      	mov	r8, r3
 800abb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abb4:	2a30      	cmp	r2, #48	; 0x30
 800abb6:	d0fa      	beq.n	800abae <_dtoa_r+0xa66>
 800abb8:	e6f6      	b.n	800a9a8 <_dtoa_r+0x860>
 800abba:	9a01      	ldr	r2, [sp, #4]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d1a4      	bne.n	800ab0a <_dtoa_r+0x9c2>
 800abc0:	f10b 0b01 	add.w	fp, fp, #1
 800abc4:	2331      	movs	r3, #49	; 0x31
 800abc6:	e778      	b.n	800aaba <_dtoa_r+0x972>
 800abc8:	4b14      	ldr	r3, [pc, #80]	; (800ac1c <_dtoa_r+0xad4>)
 800abca:	f7ff bb27 	b.w	800a21c <_dtoa_r+0xd4>
 800abce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	f47f ab03 	bne.w	800a1dc <_dtoa_r+0x94>
 800abd6:	4b12      	ldr	r3, [pc, #72]	; (800ac20 <_dtoa_r+0xad8>)
 800abd8:	f7ff bb20 	b.w	800a21c <_dtoa_r+0xd4>
 800abdc:	f1ba 0f00 	cmp.w	sl, #0
 800abe0:	dc03      	bgt.n	800abea <_dtoa_r+0xaa2>
 800abe2:	9b06      	ldr	r3, [sp, #24]
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	f73f aec7 	bgt.w	800a978 <_dtoa_r+0x830>
 800abea:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800abee:	4621      	mov	r1, r4
 800abf0:	4628      	mov	r0, r5
 800abf2:	f7ff fa1d 	bl	800a030 <quorem>
 800abf6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800abfa:	f808 3b01 	strb.w	r3, [r8], #1
 800abfe:	9a01      	ldr	r2, [sp, #4]
 800ac00:	eba8 0202 	sub.w	r2, r8, r2
 800ac04:	4592      	cmp	sl, r2
 800ac06:	ddb7      	ble.n	800ab78 <_dtoa_r+0xa30>
 800ac08:	4629      	mov	r1, r5
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	220a      	movs	r2, #10
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f000 fa96 	bl	800b140 <__multadd>
 800ac14:	4605      	mov	r5, r0
 800ac16:	e7ea      	b.n	800abee <_dtoa_r+0xaa6>
 800ac18:	0800c133 	.word	0x0800c133
 800ac1c:	0800c090 	.word	0x0800c090
 800ac20:	0800c0b4 	.word	0x0800c0b4

0800ac24 <__sflush_r>:
 800ac24:	898a      	ldrh	r2, [r1, #12]
 800ac26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2a:	4605      	mov	r5, r0
 800ac2c:	0710      	lsls	r0, r2, #28
 800ac2e:	460c      	mov	r4, r1
 800ac30:	d458      	bmi.n	800ace4 <__sflush_r+0xc0>
 800ac32:	684b      	ldr	r3, [r1, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	dc05      	bgt.n	800ac44 <__sflush_r+0x20>
 800ac38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	dc02      	bgt.n	800ac44 <__sflush_r+0x20>
 800ac3e:	2000      	movs	r0, #0
 800ac40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac46:	2e00      	cmp	r6, #0
 800ac48:	d0f9      	beq.n	800ac3e <__sflush_r+0x1a>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac50:	682f      	ldr	r7, [r5, #0]
 800ac52:	602b      	str	r3, [r5, #0]
 800ac54:	d032      	beq.n	800acbc <__sflush_r+0x98>
 800ac56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	075a      	lsls	r2, r3, #29
 800ac5c:	d505      	bpl.n	800ac6a <__sflush_r+0x46>
 800ac5e:	6863      	ldr	r3, [r4, #4]
 800ac60:	1ac0      	subs	r0, r0, r3
 800ac62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac64:	b10b      	cbz	r3, 800ac6a <__sflush_r+0x46>
 800ac66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac68:	1ac0      	subs	r0, r0, r3
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac70:	6a21      	ldr	r1, [r4, #32]
 800ac72:	4628      	mov	r0, r5
 800ac74:	47b0      	blx	r6
 800ac76:	1c43      	adds	r3, r0, #1
 800ac78:	89a3      	ldrh	r3, [r4, #12]
 800ac7a:	d106      	bne.n	800ac8a <__sflush_r+0x66>
 800ac7c:	6829      	ldr	r1, [r5, #0]
 800ac7e:	291d      	cmp	r1, #29
 800ac80:	d82c      	bhi.n	800acdc <__sflush_r+0xb8>
 800ac82:	4a2a      	ldr	r2, [pc, #168]	; (800ad2c <__sflush_r+0x108>)
 800ac84:	40ca      	lsrs	r2, r1
 800ac86:	07d6      	lsls	r6, r2, #31
 800ac88:	d528      	bpl.n	800acdc <__sflush_r+0xb8>
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	6062      	str	r2, [r4, #4]
 800ac8e:	04d9      	lsls	r1, r3, #19
 800ac90:	6922      	ldr	r2, [r4, #16]
 800ac92:	6022      	str	r2, [r4, #0]
 800ac94:	d504      	bpl.n	800aca0 <__sflush_r+0x7c>
 800ac96:	1c42      	adds	r2, r0, #1
 800ac98:	d101      	bne.n	800ac9e <__sflush_r+0x7a>
 800ac9a:	682b      	ldr	r3, [r5, #0]
 800ac9c:	b903      	cbnz	r3, 800aca0 <__sflush_r+0x7c>
 800ac9e:	6560      	str	r0, [r4, #84]	; 0x54
 800aca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aca2:	602f      	str	r7, [r5, #0]
 800aca4:	2900      	cmp	r1, #0
 800aca6:	d0ca      	beq.n	800ac3e <__sflush_r+0x1a>
 800aca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acac:	4299      	cmp	r1, r3
 800acae:	d002      	beq.n	800acb6 <__sflush_r+0x92>
 800acb0:	4628      	mov	r0, r5
 800acb2:	f000 fd7d 	bl	800b7b0 <_free_r>
 800acb6:	2000      	movs	r0, #0
 800acb8:	6360      	str	r0, [r4, #52]	; 0x34
 800acba:	e7c1      	b.n	800ac40 <__sflush_r+0x1c>
 800acbc:	6a21      	ldr	r1, [r4, #32]
 800acbe:	2301      	movs	r3, #1
 800acc0:	4628      	mov	r0, r5
 800acc2:	47b0      	blx	r6
 800acc4:	1c41      	adds	r1, r0, #1
 800acc6:	d1c7      	bne.n	800ac58 <__sflush_r+0x34>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d0c4      	beq.n	800ac58 <__sflush_r+0x34>
 800acce:	2b1d      	cmp	r3, #29
 800acd0:	d001      	beq.n	800acd6 <__sflush_r+0xb2>
 800acd2:	2b16      	cmp	r3, #22
 800acd4:	d101      	bne.n	800acda <__sflush_r+0xb6>
 800acd6:	602f      	str	r7, [r5, #0]
 800acd8:	e7b1      	b.n	800ac3e <__sflush_r+0x1a>
 800acda:	89a3      	ldrh	r3, [r4, #12]
 800acdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ace0:	81a3      	strh	r3, [r4, #12]
 800ace2:	e7ad      	b.n	800ac40 <__sflush_r+0x1c>
 800ace4:	690f      	ldr	r7, [r1, #16]
 800ace6:	2f00      	cmp	r7, #0
 800ace8:	d0a9      	beq.n	800ac3e <__sflush_r+0x1a>
 800acea:	0793      	lsls	r3, r2, #30
 800acec:	680e      	ldr	r6, [r1, #0]
 800acee:	bf08      	it	eq
 800acf0:	694b      	ldreq	r3, [r1, #20]
 800acf2:	600f      	str	r7, [r1, #0]
 800acf4:	bf18      	it	ne
 800acf6:	2300      	movne	r3, #0
 800acf8:	eba6 0807 	sub.w	r8, r6, r7
 800acfc:	608b      	str	r3, [r1, #8]
 800acfe:	f1b8 0f00 	cmp.w	r8, #0
 800ad02:	dd9c      	ble.n	800ac3e <__sflush_r+0x1a>
 800ad04:	6a21      	ldr	r1, [r4, #32]
 800ad06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad08:	4643      	mov	r3, r8
 800ad0a:	463a      	mov	r2, r7
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	47b0      	blx	r6
 800ad10:	2800      	cmp	r0, #0
 800ad12:	dc06      	bgt.n	800ad22 <__sflush_r+0xfe>
 800ad14:	89a3      	ldrh	r3, [r4, #12]
 800ad16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad1a:	81a3      	strh	r3, [r4, #12]
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad20:	e78e      	b.n	800ac40 <__sflush_r+0x1c>
 800ad22:	4407      	add	r7, r0
 800ad24:	eba8 0800 	sub.w	r8, r8, r0
 800ad28:	e7e9      	b.n	800acfe <__sflush_r+0xda>
 800ad2a:	bf00      	nop
 800ad2c:	20400001 	.word	0x20400001

0800ad30 <_fflush_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	690b      	ldr	r3, [r1, #16]
 800ad34:	4605      	mov	r5, r0
 800ad36:	460c      	mov	r4, r1
 800ad38:	b913      	cbnz	r3, 800ad40 <_fflush_r+0x10>
 800ad3a:	2500      	movs	r5, #0
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	b118      	cbz	r0, 800ad4a <_fflush_r+0x1a>
 800ad42:	6983      	ldr	r3, [r0, #24]
 800ad44:	b90b      	cbnz	r3, 800ad4a <_fflush_r+0x1a>
 800ad46:	f000 f887 	bl	800ae58 <__sinit>
 800ad4a:	4b14      	ldr	r3, [pc, #80]	; (800ad9c <_fflush_r+0x6c>)
 800ad4c:	429c      	cmp	r4, r3
 800ad4e:	d11b      	bne.n	800ad88 <_fflush_r+0x58>
 800ad50:	686c      	ldr	r4, [r5, #4]
 800ad52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d0ef      	beq.n	800ad3a <_fflush_r+0xa>
 800ad5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad5c:	07d0      	lsls	r0, r2, #31
 800ad5e:	d404      	bmi.n	800ad6a <_fflush_r+0x3a>
 800ad60:	0599      	lsls	r1, r3, #22
 800ad62:	d402      	bmi.n	800ad6a <_fflush_r+0x3a>
 800ad64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad66:	f000 f91a 	bl	800af9e <__retarget_lock_acquire_recursive>
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	4621      	mov	r1, r4
 800ad6e:	f7ff ff59 	bl	800ac24 <__sflush_r>
 800ad72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad74:	07da      	lsls	r2, r3, #31
 800ad76:	4605      	mov	r5, r0
 800ad78:	d4e0      	bmi.n	800ad3c <_fflush_r+0xc>
 800ad7a:	89a3      	ldrh	r3, [r4, #12]
 800ad7c:	059b      	lsls	r3, r3, #22
 800ad7e:	d4dd      	bmi.n	800ad3c <_fflush_r+0xc>
 800ad80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad82:	f000 f90d 	bl	800afa0 <__retarget_lock_release_recursive>
 800ad86:	e7d9      	b.n	800ad3c <_fflush_r+0xc>
 800ad88:	4b05      	ldr	r3, [pc, #20]	; (800ada0 <_fflush_r+0x70>)
 800ad8a:	429c      	cmp	r4, r3
 800ad8c:	d101      	bne.n	800ad92 <_fflush_r+0x62>
 800ad8e:	68ac      	ldr	r4, [r5, #8]
 800ad90:	e7df      	b.n	800ad52 <_fflush_r+0x22>
 800ad92:	4b04      	ldr	r3, [pc, #16]	; (800ada4 <_fflush_r+0x74>)
 800ad94:	429c      	cmp	r4, r3
 800ad96:	bf08      	it	eq
 800ad98:	68ec      	ldreq	r4, [r5, #12]
 800ad9a:	e7da      	b.n	800ad52 <_fflush_r+0x22>
 800ad9c:	0800c164 	.word	0x0800c164
 800ada0:	0800c184 	.word	0x0800c184
 800ada4:	0800c144 	.word	0x0800c144

0800ada8 <std>:
 800ada8:	2300      	movs	r3, #0
 800adaa:	b510      	push	{r4, lr}
 800adac:	4604      	mov	r4, r0
 800adae:	e9c0 3300 	strd	r3, r3, [r0]
 800adb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800adb6:	6083      	str	r3, [r0, #8]
 800adb8:	8181      	strh	r1, [r0, #12]
 800adba:	6643      	str	r3, [r0, #100]	; 0x64
 800adbc:	81c2      	strh	r2, [r0, #14]
 800adbe:	6183      	str	r3, [r0, #24]
 800adc0:	4619      	mov	r1, r3
 800adc2:	2208      	movs	r2, #8
 800adc4:	305c      	adds	r0, #92	; 0x5c
 800adc6:	f7fe fb9b 	bl	8009500 <memset>
 800adca:	4b05      	ldr	r3, [pc, #20]	; (800ade0 <std+0x38>)
 800adcc:	6263      	str	r3, [r4, #36]	; 0x24
 800adce:	4b05      	ldr	r3, [pc, #20]	; (800ade4 <std+0x3c>)
 800add0:	62a3      	str	r3, [r4, #40]	; 0x28
 800add2:	4b05      	ldr	r3, [pc, #20]	; (800ade8 <std+0x40>)
 800add4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800add6:	4b05      	ldr	r3, [pc, #20]	; (800adec <std+0x44>)
 800add8:	6224      	str	r4, [r4, #32]
 800adda:	6323      	str	r3, [r4, #48]	; 0x30
 800addc:	bd10      	pop	{r4, pc}
 800adde:	bf00      	nop
 800ade0:	0800bc45 	.word	0x0800bc45
 800ade4:	0800bc67 	.word	0x0800bc67
 800ade8:	0800bc9f 	.word	0x0800bc9f
 800adec:	0800bcc3 	.word	0x0800bcc3

0800adf0 <_cleanup_r>:
 800adf0:	4901      	ldr	r1, [pc, #4]	; (800adf8 <_cleanup_r+0x8>)
 800adf2:	f000 b8af 	b.w	800af54 <_fwalk_reent>
 800adf6:	bf00      	nop
 800adf8:	0800ad31 	.word	0x0800ad31

0800adfc <__sfmoreglue>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	2268      	movs	r2, #104	; 0x68
 800ae00:	1e4d      	subs	r5, r1, #1
 800ae02:	4355      	muls	r5, r2
 800ae04:	460e      	mov	r6, r1
 800ae06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae0a:	f000 fd3d 	bl	800b888 <_malloc_r>
 800ae0e:	4604      	mov	r4, r0
 800ae10:	b140      	cbz	r0, 800ae24 <__sfmoreglue+0x28>
 800ae12:	2100      	movs	r1, #0
 800ae14:	e9c0 1600 	strd	r1, r6, [r0]
 800ae18:	300c      	adds	r0, #12
 800ae1a:	60a0      	str	r0, [r4, #8]
 800ae1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae20:	f7fe fb6e 	bl	8009500 <memset>
 800ae24:	4620      	mov	r0, r4
 800ae26:	bd70      	pop	{r4, r5, r6, pc}

0800ae28 <__sfp_lock_acquire>:
 800ae28:	4801      	ldr	r0, [pc, #4]	; (800ae30 <__sfp_lock_acquire+0x8>)
 800ae2a:	f000 b8b8 	b.w	800af9e <__retarget_lock_acquire_recursive>
 800ae2e:	bf00      	nop
 800ae30:	240004a5 	.word	0x240004a5

0800ae34 <__sfp_lock_release>:
 800ae34:	4801      	ldr	r0, [pc, #4]	; (800ae3c <__sfp_lock_release+0x8>)
 800ae36:	f000 b8b3 	b.w	800afa0 <__retarget_lock_release_recursive>
 800ae3a:	bf00      	nop
 800ae3c:	240004a5 	.word	0x240004a5

0800ae40 <__sinit_lock_acquire>:
 800ae40:	4801      	ldr	r0, [pc, #4]	; (800ae48 <__sinit_lock_acquire+0x8>)
 800ae42:	f000 b8ac 	b.w	800af9e <__retarget_lock_acquire_recursive>
 800ae46:	bf00      	nop
 800ae48:	240004a6 	.word	0x240004a6

0800ae4c <__sinit_lock_release>:
 800ae4c:	4801      	ldr	r0, [pc, #4]	; (800ae54 <__sinit_lock_release+0x8>)
 800ae4e:	f000 b8a7 	b.w	800afa0 <__retarget_lock_release_recursive>
 800ae52:	bf00      	nop
 800ae54:	240004a6 	.word	0x240004a6

0800ae58 <__sinit>:
 800ae58:	b510      	push	{r4, lr}
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	f7ff fff0 	bl	800ae40 <__sinit_lock_acquire>
 800ae60:	69a3      	ldr	r3, [r4, #24]
 800ae62:	b11b      	cbz	r3, 800ae6c <__sinit+0x14>
 800ae64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae68:	f7ff bff0 	b.w	800ae4c <__sinit_lock_release>
 800ae6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae70:	6523      	str	r3, [r4, #80]	; 0x50
 800ae72:	4b13      	ldr	r3, [pc, #76]	; (800aec0 <__sinit+0x68>)
 800ae74:	4a13      	ldr	r2, [pc, #76]	; (800aec4 <__sinit+0x6c>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae7a:	42a3      	cmp	r3, r4
 800ae7c:	bf04      	itt	eq
 800ae7e:	2301      	moveq	r3, #1
 800ae80:	61a3      	streq	r3, [r4, #24]
 800ae82:	4620      	mov	r0, r4
 800ae84:	f000 f820 	bl	800aec8 <__sfp>
 800ae88:	6060      	str	r0, [r4, #4]
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f000 f81c 	bl	800aec8 <__sfp>
 800ae90:	60a0      	str	r0, [r4, #8]
 800ae92:	4620      	mov	r0, r4
 800ae94:	f000 f818 	bl	800aec8 <__sfp>
 800ae98:	2200      	movs	r2, #0
 800ae9a:	60e0      	str	r0, [r4, #12]
 800ae9c:	2104      	movs	r1, #4
 800ae9e:	6860      	ldr	r0, [r4, #4]
 800aea0:	f7ff ff82 	bl	800ada8 <std>
 800aea4:	68a0      	ldr	r0, [r4, #8]
 800aea6:	2201      	movs	r2, #1
 800aea8:	2109      	movs	r1, #9
 800aeaa:	f7ff ff7d 	bl	800ada8 <std>
 800aeae:	68e0      	ldr	r0, [r4, #12]
 800aeb0:	2202      	movs	r2, #2
 800aeb2:	2112      	movs	r1, #18
 800aeb4:	f7ff ff78 	bl	800ada8 <std>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	61a3      	str	r3, [r4, #24]
 800aebc:	e7d2      	b.n	800ae64 <__sinit+0xc>
 800aebe:	bf00      	nop
 800aec0:	0800c07c 	.word	0x0800c07c
 800aec4:	0800adf1 	.word	0x0800adf1

0800aec8 <__sfp>:
 800aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeca:	4607      	mov	r7, r0
 800aecc:	f7ff ffac 	bl	800ae28 <__sfp_lock_acquire>
 800aed0:	4b1e      	ldr	r3, [pc, #120]	; (800af4c <__sfp+0x84>)
 800aed2:	681e      	ldr	r6, [r3, #0]
 800aed4:	69b3      	ldr	r3, [r6, #24]
 800aed6:	b913      	cbnz	r3, 800aede <__sfp+0x16>
 800aed8:	4630      	mov	r0, r6
 800aeda:	f7ff ffbd 	bl	800ae58 <__sinit>
 800aede:	3648      	adds	r6, #72	; 0x48
 800aee0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aee4:	3b01      	subs	r3, #1
 800aee6:	d503      	bpl.n	800aef0 <__sfp+0x28>
 800aee8:	6833      	ldr	r3, [r6, #0]
 800aeea:	b30b      	cbz	r3, 800af30 <__sfp+0x68>
 800aeec:	6836      	ldr	r6, [r6, #0]
 800aeee:	e7f7      	b.n	800aee0 <__sfp+0x18>
 800aef0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aef4:	b9d5      	cbnz	r5, 800af2c <__sfp+0x64>
 800aef6:	4b16      	ldr	r3, [pc, #88]	; (800af50 <__sfp+0x88>)
 800aef8:	60e3      	str	r3, [r4, #12]
 800aefa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aefe:	6665      	str	r5, [r4, #100]	; 0x64
 800af00:	f000 f84c 	bl	800af9c <__retarget_lock_init_recursive>
 800af04:	f7ff ff96 	bl	800ae34 <__sfp_lock_release>
 800af08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af10:	6025      	str	r5, [r4, #0]
 800af12:	61a5      	str	r5, [r4, #24]
 800af14:	2208      	movs	r2, #8
 800af16:	4629      	mov	r1, r5
 800af18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af1c:	f7fe faf0 	bl	8009500 <memset>
 800af20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af28:	4620      	mov	r0, r4
 800af2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af2c:	3468      	adds	r4, #104	; 0x68
 800af2e:	e7d9      	b.n	800aee4 <__sfp+0x1c>
 800af30:	2104      	movs	r1, #4
 800af32:	4638      	mov	r0, r7
 800af34:	f7ff ff62 	bl	800adfc <__sfmoreglue>
 800af38:	4604      	mov	r4, r0
 800af3a:	6030      	str	r0, [r6, #0]
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d1d5      	bne.n	800aeec <__sfp+0x24>
 800af40:	f7ff ff78 	bl	800ae34 <__sfp_lock_release>
 800af44:	230c      	movs	r3, #12
 800af46:	603b      	str	r3, [r7, #0]
 800af48:	e7ee      	b.n	800af28 <__sfp+0x60>
 800af4a:	bf00      	nop
 800af4c:	0800c07c 	.word	0x0800c07c
 800af50:	ffff0001 	.word	0xffff0001

0800af54 <_fwalk_reent>:
 800af54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af58:	4606      	mov	r6, r0
 800af5a:	4688      	mov	r8, r1
 800af5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af60:	2700      	movs	r7, #0
 800af62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af66:	f1b9 0901 	subs.w	r9, r9, #1
 800af6a:	d505      	bpl.n	800af78 <_fwalk_reent+0x24>
 800af6c:	6824      	ldr	r4, [r4, #0]
 800af6e:	2c00      	cmp	r4, #0
 800af70:	d1f7      	bne.n	800af62 <_fwalk_reent+0xe>
 800af72:	4638      	mov	r0, r7
 800af74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af78:	89ab      	ldrh	r3, [r5, #12]
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d907      	bls.n	800af8e <_fwalk_reent+0x3a>
 800af7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af82:	3301      	adds	r3, #1
 800af84:	d003      	beq.n	800af8e <_fwalk_reent+0x3a>
 800af86:	4629      	mov	r1, r5
 800af88:	4630      	mov	r0, r6
 800af8a:	47c0      	blx	r8
 800af8c:	4307      	orrs	r7, r0
 800af8e:	3568      	adds	r5, #104	; 0x68
 800af90:	e7e9      	b.n	800af66 <_fwalk_reent+0x12>
	...

0800af94 <_localeconv_r>:
 800af94:	4800      	ldr	r0, [pc, #0]	; (800af98 <_localeconv_r+0x4>)
 800af96:	4770      	bx	lr
 800af98:	24000164 	.word	0x24000164

0800af9c <__retarget_lock_init_recursive>:
 800af9c:	4770      	bx	lr

0800af9e <__retarget_lock_acquire_recursive>:
 800af9e:	4770      	bx	lr

0800afa0 <__retarget_lock_release_recursive>:
 800afa0:	4770      	bx	lr

0800afa2 <__swhatbuf_r>:
 800afa2:	b570      	push	{r4, r5, r6, lr}
 800afa4:	460e      	mov	r6, r1
 800afa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afaa:	2900      	cmp	r1, #0
 800afac:	b096      	sub	sp, #88	; 0x58
 800afae:	4614      	mov	r4, r2
 800afb0:	461d      	mov	r5, r3
 800afb2:	da08      	bge.n	800afc6 <__swhatbuf_r+0x24>
 800afb4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800afb8:	2200      	movs	r2, #0
 800afba:	602a      	str	r2, [r5, #0]
 800afbc:	061a      	lsls	r2, r3, #24
 800afbe:	d410      	bmi.n	800afe2 <__swhatbuf_r+0x40>
 800afc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afc4:	e00e      	b.n	800afe4 <__swhatbuf_r+0x42>
 800afc6:	466a      	mov	r2, sp
 800afc8:	f000 fed2 	bl	800bd70 <_fstat_r>
 800afcc:	2800      	cmp	r0, #0
 800afce:	dbf1      	blt.n	800afb4 <__swhatbuf_r+0x12>
 800afd0:	9a01      	ldr	r2, [sp, #4]
 800afd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800afd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800afda:	425a      	negs	r2, r3
 800afdc:	415a      	adcs	r2, r3
 800afde:	602a      	str	r2, [r5, #0]
 800afe0:	e7ee      	b.n	800afc0 <__swhatbuf_r+0x1e>
 800afe2:	2340      	movs	r3, #64	; 0x40
 800afe4:	2000      	movs	r0, #0
 800afe6:	6023      	str	r3, [r4, #0]
 800afe8:	b016      	add	sp, #88	; 0x58
 800afea:	bd70      	pop	{r4, r5, r6, pc}

0800afec <__smakebuf_r>:
 800afec:	898b      	ldrh	r3, [r1, #12]
 800afee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aff0:	079d      	lsls	r5, r3, #30
 800aff2:	4606      	mov	r6, r0
 800aff4:	460c      	mov	r4, r1
 800aff6:	d507      	bpl.n	800b008 <__smakebuf_r+0x1c>
 800aff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800affc:	6023      	str	r3, [r4, #0]
 800affe:	6123      	str	r3, [r4, #16]
 800b000:	2301      	movs	r3, #1
 800b002:	6163      	str	r3, [r4, #20]
 800b004:	b002      	add	sp, #8
 800b006:	bd70      	pop	{r4, r5, r6, pc}
 800b008:	ab01      	add	r3, sp, #4
 800b00a:	466a      	mov	r2, sp
 800b00c:	f7ff ffc9 	bl	800afa2 <__swhatbuf_r>
 800b010:	9900      	ldr	r1, [sp, #0]
 800b012:	4605      	mov	r5, r0
 800b014:	4630      	mov	r0, r6
 800b016:	f000 fc37 	bl	800b888 <_malloc_r>
 800b01a:	b948      	cbnz	r0, 800b030 <__smakebuf_r+0x44>
 800b01c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b020:	059a      	lsls	r2, r3, #22
 800b022:	d4ef      	bmi.n	800b004 <__smakebuf_r+0x18>
 800b024:	f023 0303 	bic.w	r3, r3, #3
 800b028:	f043 0302 	orr.w	r3, r3, #2
 800b02c:	81a3      	strh	r3, [r4, #12]
 800b02e:	e7e3      	b.n	800aff8 <__smakebuf_r+0xc>
 800b030:	4b0d      	ldr	r3, [pc, #52]	; (800b068 <__smakebuf_r+0x7c>)
 800b032:	62b3      	str	r3, [r6, #40]	; 0x28
 800b034:	89a3      	ldrh	r3, [r4, #12]
 800b036:	6020      	str	r0, [r4, #0]
 800b038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b03c:	81a3      	strh	r3, [r4, #12]
 800b03e:	9b00      	ldr	r3, [sp, #0]
 800b040:	6163      	str	r3, [r4, #20]
 800b042:	9b01      	ldr	r3, [sp, #4]
 800b044:	6120      	str	r0, [r4, #16]
 800b046:	b15b      	cbz	r3, 800b060 <__smakebuf_r+0x74>
 800b048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b04c:	4630      	mov	r0, r6
 800b04e:	f000 fea1 	bl	800bd94 <_isatty_r>
 800b052:	b128      	cbz	r0, 800b060 <__smakebuf_r+0x74>
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	f023 0303 	bic.w	r3, r3, #3
 800b05a:	f043 0301 	orr.w	r3, r3, #1
 800b05e:	81a3      	strh	r3, [r4, #12]
 800b060:	89a0      	ldrh	r0, [r4, #12]
 800b062:	4305      	orrs	r5, r0
 800b064:	81a5      	strh	r5, [r4, #12]
 800b066:	e7cd      	b.n	800b004 <__smakebuf_r+0x18>
 800b068:	0800adf1 	.word	0x0800adf1

0800b06c <malloc>:
 800b06c:	4b02      	ldr	r3, [pc, #8]	; (800b078 <malloc+0xc>)
 800b06e:	4601      	mov	r1, r0
 800b070:	6818      	ldr	r0, [r3, #0]
 800b072:	f000 bc09 	b.w	800b888 <_malloc_r>
 800b076:	bf00      	nop
 800b078:	24000010 	.word	0x24000010

0800b07c <_Balloc>:
 800b07c:	b570      	push	{r4, r5, r6, lr}
 800b07e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b080:	4604      	mov	r4, r0
 800b082:	460d      	mov	r5, r1
 800b084:	b976      	cbnz	r6, 800b0a4 <_Balloc+0x28>
 800b086:	2010      	movs	r0, #16
 800b088:	f7ff fff0 	bl	800b06c <malloc>
 800b08c:	4602      	mov	r2, r0
 800b08e:	6260      	str	r0, [r4, #36]	; 0x24
 800b090:	b920      	cbnz	r0, 800b09c <_Balloc+0x20>
 800b092:	4b18      	ldr	r3, [pc, #96]	; (800b0f4 <_Balloc+0x78>)
 800b094:	4818      	ldr	r0, [pc, #96]	; (800b0f8 <_Balloc+0x7c>)
 800b096:	2166      	movs	r1, #102	; 0x66
 800b098:	f000 fe2a 	bl	800bcf0 <__assert_func>
 800b09c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0a0:	6006      	str	r6, [r0, #0]
 800b0a2:	60c6      	str	r6, [r0, #12]
 800b0a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b0a6:	68f3      	ldr	r3, [r6, #12]
 800b0a8:	b183      	cbz	r3, 800b0cc <_Balloc+0x50>
 800b0aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0b2:	b9b8      	cbnz	r0, 800b0e4 <_Balloc+0x68>
 800b0b4:	2101      	movs	r1, #1
 800b0b6:	fa01 f605 	lsl.w	r6, r1, r5
 800b0ba:	1d72      	adds	r2, r6, #5
 800b0bc:	0092      	lsls	r2, r2, #2
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f000 fb60 	bl	800b784 <_calloc_r>
 800b0c4:	b160      	cbz	r0, 800b0e0 <_Balloc+0x64>
 800b0c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b0ca:	e00e      	b.n	800b0ea <_Balloc+0x6e>
 800b0cc:	2221      	movs	r2, #33	; 0x21
 800b0ce:	2104      	movs	r1, #4
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f000 fb57 	bl	800b784 <_calloc_r>
 800b0d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0d8:	60f0      	str	r0, [r6, #12]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1e4      	bne.n	800b0aa <_Balloc+0x2e>
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	bd70      	pop	{r4, r5, r6, pc}
 800b0e4:	6802      	ldr	r2, [r0, #0]
 800b0e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0f0:	e7f7      	b.n	800b0e2 <_Balloc+0x66>
 800b0f2:	bf00      	nop
 800b0f4:	0800c0c1 	.word	0x0800c0c1
 800b0f8:	0800c1a4 	.word	0x0800c1a4

0800b0fc <_Bfree>:
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b100:	4605      	mov	r5, r0
 800b102:	460c      	mov	r4, r1
 800b104:	b976      	cbnz	r6, 800b124 <_Bfree+0x28>
 800b106:	2010      	movs	r0, #16
 800b108:	f7ff ffb0 	bl	800b06c <malloc>
 800b10c:	4602      	mov	r2, r0
 800b10e:	6268      	str	r0, [r5, #36]	; 0x24
 800b110:	b920      	cbnz	r0, 800b11c <_Bfree+0x20>
 800b112:	4b09      	ldr	r3, [pc, #36]	; (800b138 <_Bfree+0x3c>)
 800b114:	4809      	ldr	r0, [pc, #36]	; (800b13c <_Bfree+0x40>)
 800b116:	218a      	movs	r1, #138	; 0x8a
 800b118:	f000 fdea 	bl	800bcf0 <__assert_func>
 800b11c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b120:	6006      	str	r6, [r0, #0]
 800b122:	60c6      	str	r6, [r0, #12]
 800b124:	b13c      	cbz	r4, 800b136 <_Bfree+0x3a>
 800b126:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b128:	6862      	ldr	r2, [r4, #4]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b130:	6021      	str	r1, [r4, #0]
 800b132:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b136:	bd70      	pop	{r4, r5, r6, pc}
 800b138:	0800c0c1 	.word	0x0800c0c1
 800b13c:	0800c1a4 	.word	0x0800c1a4

0800b140 <__multadd>:
 800b140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b144:	690d      	ldr	r5, [r1, #16]
 800b146:	4607      	mov	r7, r0
 800b148:	460c      	mov	r4, r1
 800b14a:	461e      	mov	r6, r3
 800b14c:	f101 0c14 	add.w	ip, r1, #20
 800b150:	2000      	movs	r0, #0
 800b152:	f8dc 3000 	ldr.w	r3, [ip]
 800b156:	b299      	uxth	r1, r3
 800b158:	fb02 6101 	mla	r1, r2, r1, r6
 800b15c:	0c1e      	lsrs	r6, r3, #16
 800b15e:	0c0b      	lsrs	r3, r1, #16
 800b160:	fb02 3306 	mla	r3, r2, r6, r3
 800b164:	b289      	uxth	r1, r1
 800b166:	3001      	adds	r0, #1
 800b168:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b16c:	4285      	cmp	r5, r0
 800b16e:	f84c 1b04 	str.w	r1, [ip], #4
 800b172:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b176:	dcec      	bgt.n	800b152 <__multadd+0x12>
 800b178:	b30e      	cbz	r6, 800b1be <__multadd+0x7e>
 800b17a:	68a3      	ldr	r3, [r4, #8]
 800b17c:	42ab      	cmp	r3, r5
 800b17e:	dc19      	bgt.n	800b1b4 <__multadd+0x74>
 800b180:	6861      	ldr	r1, [r4, #4]
 800b182:	4638      	mov	r0, r7
 800b184:	3101      	adds	r1, #1
 800b186:	f7ff ff79 	bl	800b07c <_Balloc>
 800b18a:	4680      	mov	r8, r0
 800b18c:	b928      	cbnz	r0, 800b19a <__multadd+0x5a>
 800b18e:	4602      	mov	r2, r0
 800b190:	4b0c      	ldr	r3, [pc, #48]	; (800b1c4 <__multadd+0x84>)
 800b192:	480d      	ldr	r0, [pc, #52]	; (800b1c8 <__multadd+0x88>)
 800b194:	21b5      	movs	r1, #181	; 0xb5
 800b196:	f000 fdab 	bl	800bcf0 <__assert_func>
 800b19a:	6922      	ldr	r2, [r4, #16]
 800b19c:	3202      	adds	r2, #2
 800b19e:	f104 010c 	add.w	r1, r4, #12
 800b1a2:	0092      	lsls	r2, r2, #2
 800b1a4:	300c      	adds	r0, #12
 800b1a6:	f7fe f99d 	bl	80094e4 <memcpy>
 800b1aa:	4621      	mov	r1, r4
 800b1ac:	4638      	mov	r0, r7
 800b1ae:	f7ff ffa5 	bl	800b0fc <_Bfree>
 800b1b2:	4644      	mov	r4, r8
 800b1b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b1b8:	3501      	adds	r5, #1
 800b1ba:	615e      	str	r6, [r3, #20]
 800b1bc:	6125      	str	r5, [r4, #16]
 800b1be:	4620      	mov	r0, r4
 800b1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1c4:	0800c133 	.word	0x0800c133
 800b1c8:	0800c1a4 	.word	0x0800c1a4

0800b1cc <__hi0bits>:
 800b1cc:	0c03      	lsrs	r3, r0, #16
 800b1ce:	041b      	lsls	r3, r3, #16
 800b1d0:	b9d3      	cbnz	r3, 800b208 <__hi0bits+0x3c>
 800b1d2:	0400      	lsls	r0, r0, #16
 800b1d4:	2310      	movs	r3, #16
 800b1d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b1da:	bf04      	itt	eq
 800b1dc:	0200      	lsleq	r0, r0, #8
 800b1de:	3308      	addeq	r3, #8
 800b1e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b1e4:	bf04      	itt	eq
 800b1e6:	0100      	lsleq	r0, r0, #4
 800b1e8:	3304      	addeq	r3, #4
 800b1ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b1ee:	bf04      	itt	eq
 800b1f0:	0080      	lsleq	r0, r0, #2
 800b1f2:	3302      	addeq	r3, #2
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	db05      	blt.n	800b204 <__hi0bits+0x38>
 800b1f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b1fc:	f103 0301 	add.w	r3, r3, #1
 800b200:	bf08      	it	eq
 800b202:	2320      	moveq	r3, #32
 800b204:	4618      	mov	r0, r3
 800b206:	4770      	bx	lr
 800b208:	2300      	movs	r3, #0
 800b20a:	e7e4      	b.n	800b1d6 <__hi0bits+0xa>

0800b20c <__lo0bits>:
 800b20c:	6803      	ldr	r3, [r0, #0]
 800b20e:	f013 0207 	ands.w	r2, r3, #7
 800b212:	4601      	mov	r1, r0
 800b214:	d00b      	beq.n	800b22e <__lo0bits+0x22>
 800b216:	07da      	lsls	r2, r3, #31
 800b218:	d423      	bmi.n	800b262 <__lo0bits+0x56>
 800b21a:	0798      	lsls	r0, r3, #30
 800b21c:	bf49      	itett	mi
 800b21e:	085b      	lsrmi	r3, r3, #1
 800b220:	089b      	lsrpl	r3, r3, #2
 800b222:	2001      	movmi	r0, #1
 800b224:	600b      	strmi	r3, [r1, #0]
 800b226:	bf5c      	itt	pl
 800b228:	600b      	strpl	r3, [r1, #0]
 800b22a:	2002      	movpl	r0, #2
 800b22c:	4770      	bx	lr
 800b22e:	b298      	uxth	r0, r3
 800b230:	b9a8      	cbnz	r0, 800b25e <__lo0bits+0x52>
 800b232:	0c1b      	lsrs	r3, r3, #16
 800b234:	2010      	movs	r0, #16
 800b236:	b2da      	uxtb	r2, r3
 800b238:	b90a      	cbnz	r2, 800b23e <__lo0bits+0x32>
 800b23a:	3008      	adds	r0, #8
 800b23c:	0a1b      	lsrs	r3, r3, #8
 800b23e:	071a      	lsls	r2, r3, #28
 800b240:	bf04      	itt	eq
 800b242:	091b      	lsreq	r3, r3, #4
 800b244:	3004      	addeq	r0, #4
 800b246:	079a      	lsls	r2, r3, #30
 800b248:	bf04      	itt	eq
 800b24a:	089b      	lsreq	r3, r3, #2
 800b24c:	3002      	addeq	r0, #2
 800b24e:	07da      	lsls	r2, r3, #31
 800b250:	d403      	bmi.n	800b25a <__lo0bits+0x4e>
 800b252:	085b      	lsrs	r3, r3, #1
 800b254:	f100 0001 	add.w	r0, r0, #1
 800b258:	d005      	beq.n	800b266 <__lo0bits+0x5a>
 800b25a:	600b      	str	r3, [r1, #0]
 800b25c:	4770      	bx	lr
 800b25e:	4610      	mov	r0, r2
 800b260:	e7e9      	b.n	800b236 <__lo0bits+0x2a>
 800b262:	2000      	movs	r0, #0
 800b264:	4770      	bx	lr
 800b266:	2020      	movs	r0, #32
 800b268:	4770      	bx	lr
	...

0800b26c <__i2b>:
 800b26c:	b510      	push	{r4, lr}
 800b26e:	460c      	mov	r4, r1
 800b270:	2101      	movs	r1, #1
 800b272:	f7ff ff03 	bl	800b07c <_Balloc>
 800b276:	4602      	mov	r2, r0
 800b278:	b928      	cbnz	r0, 800b286 <__i2b+0x1a>
 800b27a:	4b05      	ldr	r3, [pc, #20]	; (800b290 <__i2b+0x24>)
 800b27c:	4805      	ldr	r0, [pc, #20]	; (800b294 <__i2b+0x28>)
 800b27e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b282:	f000 fd35 	bl	800bcf0 <__assert_func>
 800b286:	2301      	movs	r3, #1
 800b288:	6144      	str	r4, [r0, #20]
 800b28a:	6103      	str	r3, [r0, #16]
 800b28c:	bd10      	pop	{r4, pc}
 800b28e:	bf00      	nop
 800b290:	0800c133 	.word	0x0800c133
 800b294:	0800c1a4 	.word	0x0800c1a4

0800b298 <__multiply>:
 800b298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b29c:	4691      	mov	r9, r2
 800b29e:	690a      	ldr	r2, [r1, #16]
 800b2a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	bfb8      	it	lt
 800b2a8:	460b      	movlt	r3, r1
 800b2aa:	460c      	mov	r4, r1
 800b2ac:	bfbc      	itt	lt
 800b2ae:	464c      	movlt	r4, r9
 800b2b0:	4699      	movlt	r9, r3
 800b2b2:	6927      	ldr	r7, [r4, #16]
 800b2b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b2b8:	68a3      	ldr	r3, [r4, #8]
 800b2ba:	6861      	ldr	r1, [r4, #4]
 800b2bc:	eb07 060a 	add.w	r6, r7, sl
 800b2c0:	42b3      	cmp	r3, r6
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	bfb8      	it	lt
 800b2c6:	3101      	addlt	r1, #1
 800b2c8:	f7ff fed8 	bl	800b07c <_Balloc>
 800b2cc:	b930      	cbnz	r0, 800b2dc <__multiply+0x44>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	4b44      	ldr	r3, [pc, #272]	; (800b3e4 <__multiply+0x14c>)
 800b2d2:	4845      	ldr	r0, [pc, #276]	; (800b3e8 <__multiply+0x150>)
 800b2d4:	f240 115d 	movw	r1, #349	; 0x15d
 800b2d8:	f000 fd0a 	bl	800bcf0 <__assert_func>
 800b2dc:	f100 0514 	add.w	r5, r0, #20
 800b2e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b2e4:	462b      	mov	r3, r5
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	4543      	cmp	r3, r8
 800b2ea:	d321      	bcc.n	800b330 <__multiply+0x98>
 800b2ec:	f104 0314 	add.w	r3, r4, #20
 800b2f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b2f4:	f109 0314 	add.w	r3, r9, #20
 800b2f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b2fc:	9202      	str	r2, [sp, #8]
 800b2fe:	1b3a      	subs	r2, r7, r4
 800b300:	3a15      	subs	r2, #21
 800b302:	f022 0203 	bic.w	r2, r2, #3
 800b306:	3204      	adds	r2, #4
 800b308:	f104 0115 	add.w	r1, r4, #21
 800b30c:	428f      	cmp	r7, r1
 800b30e:	bf38      	it	cc
 800b310:	2204      	movcc	r2, #4
 800b312:	9201      	str	r2, [sp, #4]
 800b314:	9a02      	ldr	r2, [sp, #8]
 800b316:	9303      	str	r3, [sp, #12]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d80c      	bhi.n	800b336 <__multiply+0x9e>
 800b31c:	2e00      	cmp	r6, #0
 800b31e:	dd03      	ble.n	800b328 <__multiply+0x90>
 800b320:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b324:	2b00      	cmp	r3, #0
 800b326:	d05a      	beq.n	800b3de <__multiply+0x146>
 800b328:	6106      	str	r6, [r0, #16]
 800b32a:	b005      	add	sp, #20
 800b32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b330:	f843 2b04 	str.w	r2, [r3], #4
 800b334:	e7d8      	b.n	800b2e8 <__multiply+0x50>
 800b336:	f8b3 a000 	ldrh.w	sl, [r3]
 800b33a:	f1ba 0f00 	cmp.w	sl, #0
 800b33e:	d024      	beq.n	800b38a <__multiply+0xf2>
 800b340:	f104 0e14 	add.w	lr, r4, #20
 800b344:	46a9      	mov	r9, r5
 800b346:	f04f 0c00 	mov.w	ip, #0
 800b34a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b34e:	f8d9 1000 	ldr.w	r1, [r9]
 800b352:	fa1f fb82 	uxth.w	fp, r2
 800b356:	b289      	uxth	r1, r1
 800b358:	fb0a 110b 	mla	r1, sl, fp, r1
 800b35c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b360:	f8d9 2000 	ldr.w	r2, [r9]
 800b364:	4461      	add	r1, ip
 800b366:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b36a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b36e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b372:	b289      	uxth	r1, r1
 800b374:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b378:	4577      	cmp	r7, lr
 800b37a:	f849 1b04 	str.w	r1, [r9], #4
 800b37e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b382:	d8e2      	bhi.n	800b34a <__multiply+0xb2>
 800b384:	9a01      	ldr	r2, [sp, #4]
 800b386:	f845 c002 	str.w	ip, [r5, r2]
 800b38a:	9a03      	ldr	r2, [sp, #12]
 800b38c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b390:	3304      	adds	r3, #4
 800b392:	f1b9 0f00 	cmp.w	r9, #0
 800b396:	d020      	beq.n	800b3da <__multiply+0x142>
 800b398:	6829      	ldr	r1, [r5, #0]
 800b39a:	f104 0c14 	add.w	ip, r4, #20
 800b39e:	46ae      	mov	lr, r5
 800b3a0:	f04f 0a00 	mov.w	sl, #0
 800b3a4:	f8bc b000 	ldrh.w	fp, [ip]
 800b3a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b3ac:	fb09 220b 	mla	r2, r9, fp, r2
 800b3b0:	4492      	add	sl, r2
 800b3b2:	b289      	uxth	r1, r1
 800b3b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b3b8:	f84e 1b04 	str.w	r1, [lr], #4
 800b3bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b3c0:	f8be 1000 	ldrh.w	r1, [lr]
 800b3c4:	0c12      	lsrs	r2, r2, #16
 800b3c6:	fb09 1102 	mla	r1, r9, r2, r1
 800b3ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b3ce:	4567      	cmp	r7, ip
 800b3d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b3d4:	d8e6      	bhi.n	800b3a4 <__multiply+0x10c>
 800b3d6:	9a01      	ldr	r2, [sp, #4]
 800b3d8:	50a9      	str	r1, [r5, r2]
 800b3da:	3504      	adds	r5, #4
 800b3dc:	e79a      	b.n	800b314 <__multiply+0x7c>
 800b3de:	3e01      	subs	r6, #1
 800b3e0:	e79c      	b.n	800b31c <__multiply+0x84>
 800b3e2:	bf00      	nop
 800b3e4:	0800c133 	.word	0x0800c133
 800b3e8:	0800c1a4 	.word	0x0800c1a4

0800b3ec <__pow5mult>:
 800b3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3f0:	4615      	mov	r5, r2
 800b3f2:	f012 0203 	ands.w	r2, r2, #3
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	460f      	mov	r7, r1
 800b3fa:	d007      	beq.n	800b40c <__pow5mult+0x20>
 800b3fc:	4c25      	ldr	r4, [pc, #148]	; (800b494 <__pow5mult+0xa8>)
 800b3fe:	3a01      	subs	r2, #1
 800b400:	2300      	movs	r3, #0
 800b402:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b406:	f7ff fe9b 	bl	800b140 <__multadd>
 800b40a:	4607      	mov	r7, r0
 800b40c:	10ad      	asrs	r5, r5, #2
 800b40e:	d03d      	beq.n	800b48c <__pow5mult+0xa0>
 800b410:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b412:	b97c      	cbnz	r4, 800b434 <__pow5mult+0x48>
 800b414:	2010      	movs	r0, #16
 800b416:	f7ff fe29 	bl	800b06c <malloc>
 800b41a:	4602      	mov	r2, r0
 800b41c:	6270      	str	r0, [r6, #36]	; 0x24
 800b41e:	b928      	cbnz	r0, 800b42c <__pow5mult+0x40>
 800b420:	4b1d      	ldr	r3, [pc, #116]	; (800b498 <__pow5mult+0xac>)
 800b422:	481e      	ldr	r0, [pc, #120]	; (800b49c <__pow5mult+0xb0>)
 800b424:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b428:	f000 fc62 	bl	800bcf0 <__assert_func>
 800b42c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b430:	6004      	str	r4, [r0, #0]
 800b432:	60c4      	str	r4, [r0, #12]
 800b434:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b438:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b43c:	b94c      	cbnz	r4, 800b452 <__pow5mult+0x66>
 800b43e:	f240 2171 	movw	r1, #625	; 0x271
 800b442:	4630      	mov	r0, r6
 800b444:	f7ff ff12 	bl	800b26c <__i2b>
 800b448:	2300      	movs	r3, #0
 800b44a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b44e:	4604      	mov	r4, r0
 800b450:	6003      	str	r3, [r0, #0]
 800b452:	f04f 0900 	mov.w	r9, #0
 800b456:	07eb      	lsls	r3, r5, #31
 800b458:	d50a      	bpl.n	800b470 <__pow5mult+0x84>
 800b45a:	4639      	mov	r1, r7
 800b45c:	4622      	mov	r2, r4
 800b45e:	4630      	mov	r0, r6
 800b460:	f7ff ff1a 	bl	800b298 <__multiply>
 800b464:	4639      	mov	r1, r7
 800b466:	4680      	mov	r8, r0
 800b468:	4630      	mov	r0, r6
 800b46a:	f7ff fe47 	bl	800b0fc <_Bfree>
 800b46e:	4647      	mov	r7, r8
 800b470:	106d      	asrs	r5, r5, #1
 800b472:	d00b      	beq.n	800b48c <__pow5mult+0xa0>
 800b474:	6820      	ldr	r0, [r4, #0]
 800b476:	b938      	cbnz	r0, 800b488 <__pow5mult+0x9c>
 800b478:	4622      	mov	r2, r4
 800b47a:	4621      	mov	r1, r4
 800b47c:	4630      	mov	r0, r6
 800b47e:	f7ff ff0b 	bl	800b298 <__multiply>
 800b482:	6020      	str	r0, [r4, #0]
 800b484:	f8c0 9000 	str.w	r9, [r0]
 800b488:	4604      	mov	r4, r0
 800b48a:	e7e4      	b.n	800b456 <__pow5mult+0x6a>
 800b48c:	4638      	mov	r0, r7
 800b48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b492:	bf00      	nop
 800b494:	0800c2f0 	.word	0x0800c2f0
 800b498:	0800c0c1 	.word	0x0800c0c1
 800b49c:	0800c1a4 	.word	0x0800c1a4

0800b4a0 <__lshift>:
 800b4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a4:	460c      	mov	r4, r1
 800b4a6:	6849      	ldr	r1, [r1, #4]
 800b4a8:	6923      	ldr	r3, [r4, #16]
 800b4aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b4ae:	68a3      	ldr	r3, [r4, #8]
 800b4b0:	4607      	mov	r7, r0
 800b4b2:	4691      	mov	r9, r2
 800b4b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b4b8:	f108 0601 	add.w	r6, r8, #1
 800b4bc:	42b3      	cmp	r3, r6
 800b4be:	db0b      	blt.n	800b4d8 <__lshift+0x38>
 800b4c0:	4638      	mov	r0, r7
 800b4c2:	f7ff fddb 	bl	800b07c <_Balloc>
 800b4c6:	4605      	mov	r5, r0
 800b4c8:	b948      	cbnz	r0, 800b4de <__lshift+0x3e>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	4b2a      	ldr	r3, [pc, #168]	; (800b578 <__lshift+0xd8>)
 800b4ce:	482b      	ldr	r0, [pc, #172]	; (800b57c <__lshift+0xdc>)
 800b4d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b4d4:	f000 fc0c 	bl	800bcf0 <__assert_func>
 800b4d8:	3101      	adds	r1, #1
 800b4da:	005b      	lsls	r3, r3, #1
 800b4dc:	e7ee      	b.n	800b4bc <__lshift+0x1c>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	f100 0114 	add.w	r1, r0, #20
 800b4e4:	f100 0210 	add.w	r2, r0, #16
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	4553      	cmp	r3, sl
 800b4ec:	db37      	blt.n	800b55e <__lshift+0xbe>
 800b4ee:	6920      	ldr	r0, [r4, #16]
 800b4f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4f4:	f104 0314 	add.w	r3, r4, #20
 800b4f8:	f019 091f 	ands.w	r9, r9, #31
 800b4fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b500:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b504:	d02f      	beq.n	800b566 <__lshift+0xc6>
 800b506:	f1c9 0e20 	rsb	lr, r9, #32
 800b50a:	468a      	mov	sl, r1
 800b50c:	f04f 0c00 	mov.w	ip, #0
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	fa02 f209 	lsl.w	r2, r2, r9
 800b516:	ea42 020c 	orr.w	r2, r2, ip
 800b51a:	f84a 2b04 	str.w	r2, [sl], #4
 800b51e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b522:	4298      	cmp	r0, r3
 800b524:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b528:	d8f2      	bhi.n	800b510 <__lshift+0x70>
 800b52a:	1b03      	subs	r3, r0, r4
 800b52c:	3b15      	subs	r3, #21
 800b52e:	f023 0303 	bic.w	r3, r3, #3
 800b532:	3304      	adds	r3, #4
 800b534:	f104 0215 	add.w	r2, r4, #21
 800b538:	4290      	cmp	r0, r2
 800b53a:	bf38      	it	cc
 800b53c:	2304      	movcc	r3, #4
 800b53e:	f841 c003 	str.w	ip, [r1, r3]
 800b542:	f1bc 0f00 	cmp.w	ip, #0
 800b546:	d001      	beq.n	800b54c <__lshift+0xac>
 800b548:	f108 0602 	add.w	r6, r8, #2
 800b54c:	3e01      	subs	r6, #1
 800b54e:	4638      	mov	r0, r7
 800b550:	612e      	str	r6, [r5, #16]
 800b552:	4621      	mov	r1, r4
 800b554:	f7ff fdd2 	bl	800b0fc <_Bfree>
 800b558:	4628      	mov	r0, r5
 800b55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b55e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b562:	3301      	adds	r3, #1
 800b564:	e7c1      	b.n	800b4ea <__lshift+0x4a>
 800b566:	3904      	subs	r1, #4
 800b568:	f853 2b04 	ldr.w	r2, [r3], #4
 800b56c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b570:	4298      	cmp	r0, r3
 800b572:	d8f9      	bhi.n	800b568 <__lshift+0xc8>
 800b574:	e7ea      	b.n	800b54c <__lshift+0xac>
 800b576:	bf00      	nop
 800b578:	0800c133 	.word	0x0800c133
 800b57c:	0800c1a4 	.word	0x0800c1a4

0800b580 <__mcmp>:
 800b580:	b530      	push	{r4, r5, lr}
 800b582:	6902      	ldr	r2, [r0, #16]
 800b584:	690c      	ldr	r4, [r1, #16]
 800b586:	1b12      	subs	r2, r2, r4
 800b588:	d10e      	bne.n	800b5a8 <__mcmp+0x28>
 800b58a:	f100 0314 	add.w	r3, r0, #20
 800b58e:	3114      	adds	r1, #20
 800b590:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b594:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b598:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b59c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b5a0:	42a5      	cmp	r5, r4
 800b5a2:	d003      	beq.n	800b5ac <__mcmp+0x2c>
 800b5a4:	d305      	bcc.n	800b5b2 <__mcmp+0x32>
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	4610      	mov	r0, r2
 800b5aa:	bd30      	pop	{r4, r5, pc}
 800b5ac:	4283      	cmp	r3, r0
 800b5ae:	d3f3      	bcc.n	800b598 <__mcmp+0x18>
 800b5b0:	e7fa      	b.n	800b5a8 <__mcmp+0x28>
 800b5b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5b6:	e7f7      	b.n	800b5a8 <__mcmp+0x28>

0800b5b8 <__mdiff>:
 800b5b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5bc:	460c      	mov	r4, r1
 800b5be:	4606      	mov	r6, r0
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	4690      	mov	r8, r2
 800b5c6:	f7ff ffdb 	bl	800b580 <__mcmp>
 800b5ca:	1e05      	subs	r5, r0, #0
 800b5cc:	d110      	bne.n	800b5f0 <__mdiff+0x38>
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	f7ff fd53 	bl	800b07c <_Balloc>
 800b5d6:	b930      	cbnz	r0, 800b5e6 <__mdiff+0x2e>
 800b5d8:	4b3a      	ldr	r3, [pc, #232]	; (800b6c4 <__mdiff+0x10c>)
 800b5da:	4602      	mov	r2, r0
 800b5dc:	f240 2132 	movw	r1, #562	; 0x232
 800b5e0:	4839      	ldr	r0, [pc, #228]	; (800b6c8 <__mdiff+0x110>)
 800b5e2:	f000 fb85 	bl	800bcf0 <__assert_func>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f0:	bfa4      	itt	ge
 800b5f2:	4643      	movge	r3, r8
 800b5f4:	46a0      	movge	r8, r4
 800b5f6:	4630      	mov	r0, r6
 800b5f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b5fc:	bfa6      	itte	ge
 800b5fe:	461c      	movge	r4, r3
 800b600:	2500      	movge	r5, #0
 800b602:	2501      	movlt	r5, #1
 800b604:	f7ff fd3a 	bl	800b07c <_Balloc>
 800b608:	b920      	cbnz	r0, 800b614 <__mdiff+0x5c>
 800b60a:	4b2e      	ldr	r3, [pc, #184]	; (800b6c4 <__mdiff+0x10c>)
 800b60c:	4602      	mov	r2, r0
 800b60e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b612:	e7e5      	b.n	800b5e0 <__mdiff+0x28>
 800b614:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b618:	6926      	ldr	r6, [r4, #16]
 800b61a:	60c5      	str	r5, [r0, #12]
 800b61c:	f104 0914 	add.w	r9, r4, #20
 800b620:	f108 0514 	add.w	r5, r8, #20
 800b624:	f100 0e14 	add.w	lr, r0, #20
 800b628:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b62c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b630:	f108 0210 	add.w	r2, r8, #16
 800b634:	46f2      	mov	sl, lr
 800b636:	2100      	movs	r1, #0
 800b638:	f859 3b04 	ldr.w	r3, [r9], #4
 800b63c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b640:	fa1f f883 	uxth.w	r8, r3
 800b644:	fa11 f18b 	uxtah	r1, r1, fp
 800b648:	0c1b      	lsrs	r3, r3, #16
 800b64a:	eba1 0808 	sub.w	r8, r1, r8
 800b64e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b652:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b656:	fa1f f888 	uxth.w	r8, r8
 800b65a:	1419      	asrs	r1, r3, #16
 800b65c:	454e      	cmp	r6, r9
 800b65e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b662:	f84a 3b04 	str.w	r3, [sl], #4
 800b666:	d8e7      	bhi.n	800b638 <__mdiff+0x80>
 800b668:	1b33      	subs	r3, r6, r4
 800b66a:	3b15      	subs	r3, #21
 800b66c:	f023 0303 	bic.w	r3, r3, #3
 800b670:	3304      	adds	r3, #4
 800b672:	3415      	adds	r4, #21
 800b674:	42a6      	cmp	r6, r4
 800b676:	bf38      	it	cc
 800b678:	2304      	movcc	r3, #4
 800b67a:	441d      	add	r5, r3
 800b67c:	4473      	add	r3, lr
 800b67e:	469e      	mov	lr, r3
 800b680:	462e      	mov	r6, r5
 800b682:	4566      	cmp	r6, ip
 800b684:	d30e      	bcc.n	800b6a4 <__mdiff+0xec>
 800b686:	f10c 0203 	add.w	r2, ip, #3
 800b68a:	1b52      	subs	r2, r2, r5
 800b68c:	f022 0203 	bic.w	r2, r2, #3
 800b690:	3d03      	subs	r5, #3
 800b692:	45ac      	cmp	ip, r5
 800b694:	bf38      	it	cc
 800b696:	2200      	movcc	r2, #0
 800b698:	441a      	add	r2, r3
 800b69a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b69e:	b17b      	cbz	r3, 800b6c0 <__mdiff+0x108>
 800b6a0:	6107      	str	r7, [r0, #16]
 800b6a2:	e7a3      	b.n	800b5ec <__mdiff+0x34>
 800b6a4:	f856 8b04 	ldr.w	r8, [r6], #4
 800b6a8:	fa11 f288 	uxtah	r2, r1, r8
 800b6ac:	1414      	asrs	r4, r2, #16
 800b6ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b6b2:	b292      	uxth	r2, r2
 800b6b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b6b8:	f84e 2b04 	str.w	r2, [lr], #4
 800b6bc:	1421      	asrs	r1, r4, #16
 800b6be:	e7e0      	b.n	800b682 <__mdiff+0xca>
 800b6c0:	3f01      	subs	r7, #1
 800b6c2:	e7ea      	b.n	800b69a <__mdiff+0xe2>
 800b6c4:	0800c133 	.word	0x0800c133
 800b6c8:	0800c1a4 	.word	0x0800c1a4

0800b6cc <__d2b>:
 800b6cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b6d0:	4689      	mov	r9, r1
 800b6d2:	2101      	movs	r1, #1
 800b6d4:	ec57 6b10 	vmov	r6, r7, d0
 800b6d8:	4690      	mov	r8, r2
 800b6da:	f7ff fccf 	bl	800b07c <_Balloc>
 800b6de:	4604      	mov	r4, r0
 800b6e0:	b930      	cbnz	r0, 800b6f0 <__d2b+0x24>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	4b25      	ldr	r3, [pc, #148]	; (800b77c <__d2b+0xb0>)
 800b6e6:	4826      	ldr	r0, [pc, #152]	; (800b780 <__d2b+0xb4>)
 800b6e8:	f240 310a 	movw	r1, #778	; 0x30a
 800b6ec:	f000 fb00 	bl	800bcf0 <__assert_func>
 800b6f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b6f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b6f8:	bb35      	cbnz	r5, 800b748 <__d2b+0x7c>
 800b6fa:	2e00      	cmp	r6, #0
 800b6fc:	9301      	str	r3, [sp, #4]
 800b6fe:	d028      	beq.n	800b752 <__d2b+0x86>
 800b700:	4668      	mov	r0, sp
 800b702:	9600      	str	r6, [sp, #0]
 800b704:	f7ff fd82 	bl	800b20c <__lo0bits>
 800b708:	9900      	ldr	r1, [sp, #0]
 800b70a:	b300      	cbz	r0, 800b74e <__d2b+0x82>
 800b70c:	9a01      	ldr	r2, [sp, #4]
 800b70e:	f1c0 0320 	rsb	r3, r0, #32
 800b712:	fa02 f303 	lsl.w	r3, r2, r3
 800b716:	430b      	orrs	r3, r1
 800b718:	40c2      	lsrs	r2, r0
 800b71a:	6163      	str	r3, [r4, #20]
 800b71c:	9201      	str	r2, [sp, #4]
 800b71e:	9b01      	ldr	r3, [sp, #4]
 800b720:	61a3      	str	r3, [r4, #24]
 800b722:	2b00      	cmp	r3, #0
 800b724:	bf14      	ite	ne
 800b726:	2202      	movne	r2, #2
 800b728:	2201      	moveq	r2, #1
 800b72a:	6122      	str	r2, [r4, #16]
 800b72c:	b1d5      	cbz	r5, 800b764 <__d2b+0x98>
 800b72e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b732:	4405      	add	r5, r0
 800b734:	f8c9 5000 	str.w	r5, [r9]
 800b738:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b73c:	f8c8 0000 	str.w	r0, [r8]
 800b740:	4620      	mov	r0, r4
 800b742:	b003      	add	sp, #12
 800b744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b748:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b74c:	e7d5      	b.n	800b6fa <__d2b+0x2e>
 800b74e:	6161      	str	r1, [r4, #20]
 800b750:	e7e5      	b.n	800b71e <__d2b+0x52>
 800b752:	a801      	add	r0, sp, #4
 800b754:	f7ff fd5a 	bl	800b20c <__lo0bits>
 800b758:	9b01      	ldr	r3, [sp, #4]
 800b75a:	6163      	str	r3, [r4, #20]
 800b75c:	2201      	movs	r2, #1
 800b75e:	6122      	str	r2, [r4, #16]
 800b760:	3020      	adds	r0, #32
 800b762:	e7e3      	b.n	800b72c <__d2b+0x60>
 800b764:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b768:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b76c:	f8c9 0000 	str.w	r0, [r9]
 800b770:	6918      	ldr	r0, [r3, #16]
 800b772:	f7ff fd2b 	bl	800b1cc <__hi0bits>
 800b776:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b77a:	e7df      	b.n	800b73c <__d2b+0x70>
 800b77c:	0800c133 	.word	0x0800c133
 800b780:	0800c1a4 	.word	0x0800c1a4

0800b784 <_calloc_r>:
 800b784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b786:	fba1 2402 	umull	r2, r4, r1, r2
 800b78a:	b94c      	cbnz	r4, 800b7a0 <_calloc_r+0x1c>
 800b78c:	4611      	mov	r1, r2
 800b78e:	9201      	str	r2, [sp, #4]
 800b790:	f000 f87a 	bl	800b888 <_malloc_r>
 800b794:	9a01      	ldr	r2, [sp, #4]
 800b796:	4605      	mov	r5, r0
 800b798:	b930      	cbnz	r0, 800b7a8 <_calloc_r+0x24>
 800b79a:	4628      	mov	r0, r5
 800b79c:	b003      	add	sp, #12
 800b79e:	bd30      	pop	{r4, r5, pc}
 800b7a0:	220c      	movs	r2, #12
 800b7a2:	6002      	str	r2, [r0, #0]
 800b7a4:	2500      	movs	r5, #0
 800b7a6:	e7f8      	b.n	800b79a <_calloc_r+0x16>
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	f7fd fea9 	bl	8009500 <memset>
 800b7ae:	e7f4      	b.n	800b79a <_calloc_r+0x16>

0800b7b0 <_free_r>:
 800b7b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7b2:	2900      	cmp	r1, #0
 800b7b4:	d044      	beq.n	800b840 <_free_r+0x90>
 800b7b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7ba:	9001      	str	r0, [sp, #4]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f1a1 0404 	sub.w	r4, r1, #4
 800b7c2:	bfb8      	it	lt
 800b7c4:	18e4      	addlt	r4, r4, r3
 800b7c6:	f000 fb19 	bl	800bdfc <__malloc_lock>
 800b7ca:	4a1e      	ldr	r2, [pc, #120]	; (800b844 <_free_r+0x94>)
 800b7cc:	9801      	ldr	r0, [sp, #4]
 800b7ce:	6813      	ldr	r3, [r2, #0]
 800b7d0:	b933      	cbnz	r3, 800b7e0 <_free_r+0x30>
 800b7d2:	6063      	str	r3, [r4, #4]
 800b7d4:	6014      	str	r4, [r2, #0]
 800b7d6:	b003      	add	sp, #12
 800b7d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7dc:	f000 bb14 	b.w	800be08 <__malloc_unlock>
 800b7e0:	42a3      	cmp	r3, r4
 800b7e2:	d908      	bls.n	800b7f6 <_free_r+0x46>
 800b7e4:	6825      	ldr	r5, [r4, #0]
 800b7e6:	1961      	adds	r1, r4, r5
 800b7e8:	428b      	cmp	r3, r1
 800b7ea:	bf01      	itttt	eq
 800b7ec:	6819      	ldreq	r1, [r3, #0]
 800b7ee:	685b      	ldreq	r3, [r3, #4]
 800b7f0:	1949      	addeq	r1, r1, r5
 800b7f2:	6021      	streq	r1, [r4, #0]
 800b7f4:	e7ed      	b.n	800b7d2 <_free_r+0x22>
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	b10b      	cbz	r3, 800b800 <_free_r+0x50>
 800b7fc:	42a3      	cmp	r3, r4
 800b7fe:	d9fa      	bls.n	800b7f6 <_free_r+0x46>
 800b800:	6811      	ldr	r1, [r2, #0]
 800b802:	1855      	adds	r5, r2, r1
 800b804:	42a5      	cmp	r5, r4
 800b806:	d10b      	bne.n	800b820 <_free_r+0x70>
 800b808:	6824      	ldr	r4, [r4, #0]
 800b80a:	4421      	add	r1, r4
 800b80c:	1854      	adds	r4, r2, r1
 800b80e:	42a3      	cmp	r3, r4
 800b810:	6011      	str	r1, [r2, #0]
 800b812:	d1e0      	bne.n	800b7d6 <_free_r+0x26>
 800b814:	681c      	ldr	r4, [r3, #0]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	6053      	str	r3, [r2, #4]
 800b81a:	4421      	add	r1, r4
 800b81c:	6011      	str	r1, [r2, #0]
 800b81e:	e7da      	b.n	800b7d6 <_free_r+0x26>
 800b820:	d902      	bls.n	800b828 <_free_r+0x78>
 800b822:	230c      	movs	r3, #12
 800b824:	6003      	str	r3, [r0, #0]
 800b826:	e7d6      	b.n	800b7d6 <_free_r+0x26>
 800b828:	6825      	ldr	r5, [r4, #0]
 800b82a:	1961      	adds	r1, r4, r5
 800b82c:	428b      	cmp	r3, r1
 800b82e:	bf04      	itt	eq
 800b830:	6819      	ldreq	r1, [r3, #0]
 800b832:	685b      	ldreq	r3, [r3, #4]
 800b834:	6063      	str	r3, [r4, #4]
 800b836:	bf04      	itt	eq
 800b838:	1949      	addeq	r1, r1, r5
 800b83a:	6021      	streq	r1, [r4, #0]
 800b83c:	6054      	str	r4, [r2, #4]
 800b83e:	e7ca      	b.n	800b7d6 <_free_r+0x26>
 800b840:	b003      	add	sp, #12
 800b842:	bd30      	pop	{r4, r5, pc}
 800b844:	240004a8 	.word	0x240004a8

0800b848 <sbrk_aligned>:
 800b848:	b570      	push	{r4, r5, r6, lr}
 800b84a:	4e0e      	ldr	r6, [pc, #56]	; (800b884 <sbrk_aligned+0x3c>)
 800b84c:	460c      	mov	r4, r1
 800b84e:	6831      	ldr	r1, [r6, #0]
 800b850:	4605      	mov	r5, r0
 800b852:	b911      	cbnz	r1, 800b85a <sbrk_aligned+0x12>
 800b854:	f000 f9e6 	bl	800bc24 <_sbrk_r>
 800b858:	6030      	str	r0, [r6, #0]
 800b85a:	4621      	mov	r1, r4
 800b85c:	4628      	mov	r0, r5
 800b85e:	f000 f9e1 	bl	800bc24 <_sbrk_r>
 800b862:	1c43      	adds	r3, r0, #1
 800b864:	d00a      	beq.n	800b87c <sbrk_aligned+0x34>
 800b866:	1cc4      	adds	r4, r0, #3
 800b868:	f024 0403 	bic.w	r4, r4, #3
 800b86c:	42a0      	cmp	r0, r4
 800b86e:	d007      	beq.n	800b880 <sbrk_aligned+0x38>
 800b870:	1a21      	subs	r1, r4, r0
 800b872:	4628      	mov	r0, r5
 800b874:	f000 f9d6 	bl	800bc24 <_sbrk_r>
 800b878:	3001      	adds	r0, #1
 800b87a:	d101      	bne.n	800b880 <sbrk_aligned+0x38>
 800b87c:	f04f 34ff 	mov.w	r4, #4294967295
 800b880:	4620      	mov	r0, r4
 800b882:	bd70      	pop	{r4, r5, r6, pc}
 800b884:	240004ac 	.word	0x240004ac

0800b888 <_malloc_r>:
 800b888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b88c:	1ccd      	adds	r5, r1, #3
 800b88e:	f025 0503 	bic.w	r5, r5, #3
 800b892:	3508      	adds	r5, #8
 800b894:	2d0c      	cmp	r5, #12
 800b896:	bf38      	it	cc
 800b898:	250c      	movcc	r5, #12
 800b89a:	2d00      	cmp	r5, #0
 800b89c:	4607      	mov	r7, r0
 800b89e:	db01      	blt.n	800b8a4 <_malloc_r+0x1c>
 800b8a0:	42a9      	cmp	r1, r5
 800b8a2:	d905      	bls.n	800b8b0 <_malloc_r+0x28>
 800b8a4:	230c      	movs	r3, #12
 800b8a6:	603b      	str	r3, [r7, #0]
 800b8a8:	2600      	movs	r6, #0
 800b8aa:	4630      	mov	r0, r6
 800b8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8b0:	4e2e      	ldr	r6, [pc, #184]	; (800b96c <_malloc_r+0xe4>)
 800b8b2:	f000 faa3 	bl	800bdfc <__malloc_lock>
 800b8b6:	6833      	ldr	r3, [r6, #0]
 800b8b8:	461c      	mov	r4, r3
 800b8ba:	bb34      	cbnz	r4, 800b90a <_malloc_r+0x82>
 800b8bc:	4629      	mov	r1, r5
 800b8be:	4638      	mov	r0, r7
 800b8c0:	f7ff ffc2 	bl	800b848 <sbrk_aligned>
 800b8c4:	1c43      	adds	r3, r0, #1
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	d14d      	bne.n	800b966 <_malloc_r+0xde>
 800b8ca:	6834      	ldr	r4, [r6, #0]
 800b8cc:	4626      	mov	r6, r4
 800b8ce:	2e00      	cmp	r6, #0
 800b8d0:	d140      	bne.n	800b954 <_malloc_r+0xcc>
 800b8d2:	6823      	ldr	r3, [r4, #0]
 800b8d4:	4631      	mov	r1, r6
 800b8d6:	4638      	mov	r0, r7
 800b8d8:	eb04 0803 	add.w	r8, r4, r3
 800b8dc:	f000 f9a2 	bl	800bc24 <_sbrk_r>
 800b8e0:	4580      	cmp	r8, r0
 800b8e2:	d13a      	bne.n	800b95a <_malloc_r+0xd2>
 800b8e4:	6821      	ldr	r1, [r4, #0]
 800b8e6:	3503      	adds	r5, #3
 800b8e8:	1a6d      	subs	r5, r5, r1
 800b8ea:	f025 0503 	bic.w	r5, r5, #3
 800b8ee:	3508      	adds	r5, #8
 800b8f0:	2d0c      	cmp	r5, #12
 800b8f2:	bf38      	it	cc
 800b8f4:	250c      	movcc	r5, #12
 800b8f6:	4629      	mov	r1, r5
 800b8f8:	4638      	mov	r0, r7
 800b8fa:	f7ff ffa5 	bl	800b848 <sbrk_aligned>
 800b8fe:	3001      	adds	r0, #1
 800b900:	d02b      	beq.n	800b95a <_malloc_r+0xd2>
 800b902:	6823      	ldr	r3, [r4, #0]
 800b904:	442b      	add	r3, r5
 800b906:	6023      	str	r3, [r4, #0]
 800b908:	e00e      	b.n	800b928 <_malloc_r+0xa0>
 800b90a:	6822      	ldr	r2, [r4, #0]
 800b90c:	1b52      	subs	r2, r2, r5
 800b90e:	d41e      	bmi.n	800b94e <_malloc_r+0xc6>
 800b910:	2a0b      	cmp	r2, #11
 800b912:	d916      	bls.n	800b942 <_malloc_r+0xba>
 800b914:	1961      	adds	r1, r4, r5
 800b916:	42a3      	cmp	r3, r4
 800b918:	6025      	str	r5, [r4, #0]
 800b91a:	bf18      	it	ne
 800b91c:	6059      	strne	r1, [r3, #4]
 800b91e:	6863      	ldr	r3, [r4, #4]
 800b920:	bf08      	it	eq
 800b922:	6031      	streq	r1, [r6, #0]
 800b924:	5162      	str	r2, [r4, r5]
 800b926:	604b      	str	r3, [r1, #4]
 800b928:	4638      	mov	r0, r7
 800b92a:	f104 060b 	add.w	r6, r4, #11
 800b92e:	f000 fa6b 	bl	800be08 <__malloc_unlock>
 800b932:	f026 0607 	bic.w	r6, r6, #7
 800b936:	1d23      	adds	r3, r4, #4
 800b938:	1af2      	subs	r2, r6, r3
 800b93a:	d0b6      	beq.n	800b8aa <_malloc_r+0x22>
 800b93c:	1b9b      	subs	r3, r3, r6
 800b93e:	50a3      	str	r3, [r4, r2]
 800b940:	e7b3      	b.n	800b8aa <_malloc_r+0x22>
 800b942:	6862      	ldr	r2, [r4, #4]
 800b944:	42a3      	cmp	r3, r4
 800b946:	bf0c      	ite	eq
 800b948:	6032      	streq	r2, [r6, #0]
 800b94a:	605a      	strne	r2, [r3, #4]
 800b94c:	e7ec      	b.n	800b928 <_malloc_r+0xa0>
 800b94e:	4623      	mov	r3, r4
 800b950:	6864      	ldr	r4, [r4, #4]
 800b952:	e7b2      	b.n	800b8ba <_malloc_r+0x32>
 800b954:	4634      	mov	r4, r6
 800b956:	6876      	ldr	r6, [r6, #4]
 800b958:	e7b9      	b.n	800b8ce <_malloc_r+0x46>
 800b95a:	230c      	movs	r3, #12
 800b95c:	603b      	str	r3, [r7, #0]
 800b95e:	4638      	mov	r0, r7
 800b960:	f000 fa52 	bl	800be08 <__malloc_unlock>
 800b964:	e7a1      	b.n	800b8aa <_malloc_r+0x22>
 800b966:	6025      	str	r5, [r4, #0]
 800b968:	e7de      	b.n	800b928 <_malloc_r+0xa0>
 800b96a:	bf00      	nop
 800b96c:	240004a8 	.word	0x240004a8

0800b970 <__sfputc_r>:
 800b970:	6893      	ldr	r3, [r2, #8]
 800b972:	3b01      	subs	r3, #1
 800b974:	2b00      	cmp	r3, #0
 800b976:	b410      	push	{r4}
 800b978:	6093      	str	r3, [r2, #8]
 800b97a:	da08      	bge.n	800b98e <__sfputc_r+0x1e>
 800b97c:	6994      	ldr	r4, [r2, #24]
 800b97e:	42a3      	cmp	r3, r4
 800b980:	db01      	blt.n	800b986 <__sfputc_r+0x16>
 800b982:	290a      	cmp	r1, #10
 800b984:	d103      	bne.n	800b98e <__sfputc_r+0x1e>
 800b986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b98a:	f7fe ba91 	b.w	8009eb0 <__swbuf_r>
 800b98e:	6813      	ldr	r3, [r2, #0]
 800b990:	1c58      	adds	r0, r3, #1
 800b992:	6010      	str	r0, [r2, #0]
 800b994:	7019      	strb	r1, [r3, #0]
 800b996:	4608      	mov	r0, r1
 800b998:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <__sfputs_r>:
 800b99e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a0:	4606      	mov	r6, r0
 800b9a2:	460f      	mov	r7, r1
 800b9a4:	4614      	mov	r4, r2
 800b9a6:	18d5      	adds	r5, r2, r3
 800b9a8:	42ac      	cmp	r4, r5
 800b9aa:	d101      	bne.n	800b9b0 <__sfputs_r+0x12>
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	e007      	b.n	800b9c0 <__sfputs_r+0x22>
 800b9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9b4:	463a      	mov	r2, r7
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f7ff ffda 	bl	800b970 <__sfputc_r>
 800b9bc:	1c43      	adds	r3, r0, #1
 800b9be:	d1f3      	bne.n	800b9a8 <__sfputs_r+0xa>
 800b9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9c4 <_vfiprintf_r>:
 800b9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c8:	460d      	mov	r5, r1
 800b9ca:	b09d      	sub	sp, #116	; 0x74
 800b9cc:	4614      	mov	r4, r2
 800b9ce:	4698      	mov	r8, r3
 800b9d0:	4606      	mov	r6, r0
 800b9d2:	b118      	cbz	r0, 800b9dc <_vfiprintf_r+0x18>
 800b9d4:	6983      	ldr	r3, [r0, #24]
 800b9d6:	b90b      	cbnz	r3, 800b9dc <_vfiprintf_r+0x18>
 800b9d8:	f7ff fa3e 	bl	800ae58 <__sinit>
 800b9dc:	4b89      	ldr	r3, [pc, #548]	; (800bc04 <_vfiprintf_r+0x240>)
 800b9de:	429d      	cmp	r5, r3
 800b9e0:	d11b      	bne.n	800ba1a <_vfiprintf_r+0x56>
 800b9e2:	6875      	ldr	r5, [r6, #4]
 800b9e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9e6:	07d9      	lsls	r1, r3, #31
 800b9e8:	d405      	bmi.n	800b9f6 <_vfiprintf_r+0x32>
 800b9ea:	89ab      	ldrh	r3, [r5, #12]
 800b9ec:	059a      	lsls	r2, r3, #22
 800b9ee:	d402      	bmi.n	800b9f6 <_vfiprintf_r+0x32>
 800b9f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9f2:	f7ff fad4 	bl	800af9e <__retarget_lock_acquire_recursive>
 800b9f6:	89ab      	ldrh	r3, [r5, #12]
 800b9f8:	071b      	lsls	r3, r3, #28
 800b9fa:	d501      	bpl.n	800ba00 <_vfiprintf_r+0x3c>
 800b9fc:	692b      	ldr	r3, [r5, #16]
 800b9fe:	b9eb      	cbnz	r3, 800ba3c <_vfiprintf_r+0x78>
 800ba00:	4629      	mov	r1, r5
 800ba02:	4630      	mov	r0, r6
 800ba04:	f7fe faa6 	bl	8009f54 <__swsetup_r>
 800ba08:	b1c0      	cbz	r0, 800ba3c <_vfiprintf_r+0x78>
 800ba0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba0c:	07dc      	lsls	r4, r3, #31
 800ba0e:	d50e      	bpl.n	800ba2e <_vfiprintf_r+0x6a>
 800ba10:	f04f 30ff 	mov.w	r0, #4294967295
 800ba14:	b01d      	add	sp, #116	; 0x74
 800ba16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba1a:	4b7b      	ldr	r3, [pc, #492]	; (800bc08 <_vfiprintf_r+0x244>)
 800ba1c:	429d      	cmp	r5, r3
 800ba1e:	d101      	bne.n	800ba24 <_vfiprintf_r+0x60>
 800ba20:	68b5      	ldr	r5, [r6, #8]
 800ba22:	e7df      	b.n	800b9e4 <_vfiprintf_r+0x20>
 800ba24:	4b79      	ldr	r3, [pc, #484]	; (800bc0c <_vfiprintf_r+0x248>)
 800ba26:	429d      	cmp	r5, r3
 800ba28:	bf08      	it	eq
 800ba2a:	68f5      	ldreq	r5, [r6, #12]
 800ba2c:	e7da      	b.n	800b9e4 <_vfiprintf_r+0x20>
 800ba2e:	89ab      	ldrh	r3, [r5, #12]
 800ba30:	0598      	lsls	r0, r3, #22
 800ba32:	d4ed      	bmi.n	800ba10 <_vfiprintf_r+0x4c>
 800ba34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba36:	f7ff fab3 	bl	800afa0 <__retarget_lock_release_recursive>
 800ba3a:	e7e9      	b.n	800ba10 <_vfiprintf_r+0x4c>
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba40:	2320      	movs	r3, #32
 800ba42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba4a:	2330      	movs	r3, #48	; 0x30
 800ba4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc10 <_vfiprintf_r+0x24c>
 800ba50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba54:	f04f 0901 	mov.w	r9, #1
 800ba58:	4623      	mov	r3, r4
 800ba5a:	469a      	mov	sl, r3
 800ba5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba60:	b10a      	cbz	r2, 800ba66 <_vfiprintf_r+0xa2>
 800ba62:	2a25      	cmp	r2, #37	; 0x25
 800ba64:	d1f9      	bne.n	800ba5a <_vfiprintf_r+0x96>
 800ba66:	ebba 0b04 	subs.w	fp, sl, r4
 800ba6a:	d00b      	beq.n	800ba84 <_vfiprintf_r+0xc0>
 800ba6c:	465b      	mov	r3, fp
 800ba6e:	4622      	mov	r2, r4
 800ba70:	4629      	mov	r1, r5
 800ba72:	4630      	mov	r0, r6
 800ba74:	f7ff ff93 	bl	800b99e <__sfputs_r>
 800ba78:	3001      	adds	r0, #1
 800ba7a:	f000 80aa 	beq.w	800bbd2 <_vfiprintf_r+0x20e>
 800ba7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba80:	445a      	add	r2, fp
 800ba82:	9209      	str	r2, [sp, #36]	; 0x24
 800ba84:	f89a 3000 	ldrb.w	r3, [sl]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f000 80a2 	beq.w	800bbd2 <_vfiprintf_r+0x20e>
 800ba8e:	2300      	movs	r3, #0
 800ba90:	f04f 32ff 	mov.w	r2, #4294967295
 800ba94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba98:	f10a 0a01 	add.w	sl, sl, #1
 800ba9c:	9304      	str	r3, [sp, #16]
 800ba9e:	9307      	str	r3, [sp, #28]
 800baa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baa4:	931a      	str	r3, [sp, #104]	; 0x68
 800baa6:	4654      	mov	r4, sl
 800baa8:	2205      	movs	r2, #5
 800baaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baae:	4858      	ldr	r0, [pc, #352]	; (800bc10 <_vfiprintf_r+0x24c>)
 800bab0:	f7f4 fc1e 	bl	80002f0 <memchr>
 800bab4:	9a04      	ldr	r2, [sp, #16]
 800bab6:	b9d8      	cbnz	r0, 800baf0 <_vfiprintf_r+0x12c>
 800bab8:	06d1      	lsls	r1, r2, #27
 800baba:	bf44      	itt	mi
 800babc:	2320      	movmi	r3, #32
 800babe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bac2:	0713      	lsls	r3, r2, #28
 800bac4:	bf44      	itt	mi
 800bac6:	232b      	movmi	r3, #43	; 0x2b
 800bac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bacc:	f89a 3000 	ldrb.w	r3, [sl]
 800bad0:	2b2a      	cmp	r3, #42	; 0x2a
 800bad2:	d015      	beq.n	800bb00 <_vfiprintf_r+0x13c>
 800bad4:	9a07      	ldr	r2, [sp, #28]
 800bad6:	4654      	mov	r4, sl
 800bad8:	2000      	movs	r0, #0
 800bada:	f04f 0c0a 	mov.w	ip, #10
 800bade:	4621      	mov	r1, r4
 800bae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bae4:	3b30      	subs	r3, #48	; 0x30
 800bae6:	2b09      	cmp	r3, #9
 800bae8:	d94e      	bls.n	800bb88 <_vfiprintf_r+0x1c4>
 800baea:	b1b0      	cbz	r0, 800bb1a <_vfiprintf_r+0x156>
 800baec:	9207      	str	r2, [sp, #28]
 800baee:	e014      	b.n	800bb1a <_vfiprintf_r+0x156>
 800baf0:	eba0 0308 	sub.w	r3, r0, r8
 800baf4:	fa09 f303 	lsl.w	r3, r9, r3
 800baf8:	4313      	orrs	r3, r2
 800bafa:	9304      	str	r3, [sp, #16]
 800bafc:	46a2      	mov	sl, r4
 800bafe:	e7d2      	b.n	800baa6 <_vfiprintf_r+0xe2>
 800bb00:	9b03      	ldr	r3, [sp, #12]
 800bb02:	1d19      	adds	r1, r3, #4
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	9103      	str	r1, [sp, #12]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	bfbb      	ittet	lt
 800bb0c:	425b      	neglt	r3, r3
 800bb0e:	f042 0202 	orrlt.w	r2, r2, #2
 800bb12:	9307      	strge	r3, [sp, #28]
 800bb14:	9307      	strlt	r3, [sp, #28]
 800bb16:	bfb8      	it	lt
 800bb18:	9204      	strlt	r2, [sp, #16]
 800bb1a:	7823      	ldrb	r3, [r4, #0]
 800bb1c:	2b2e      	cmp	r3, #46	; 0x2e
 800bb1e:	d10c      	bne.n	800bb3a <_vfiprintf_r+0x176>
 800bb20:	7863      	ldrb	r3, [r4, #1]
 800bb22:	2b2a      	cmp	r3, #42	; 0x2a
 800bb24:	d135      	bne.n	800bb92 <_vfiprintf_r+0x1ce>
 800bb26:	9b03      	ldr	r3, [sp, #12]
 800bb28:	1d1a      	adds	r2, r3, #4
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	9203      	str	r2, [sp, #12]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	bfb8      	it	lt
 800bb32:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb36:	3402      	adds	r4, #2
 800bb38:	9305      	str	r3, [sp, #20]
 800bb3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc20 <_vfiprintf_r+0x25c>
 800bb3e:	7821      	ldrb	r1, [r4, #0]
 800bb40:	2203      	movs	r2, #3
 800bb42:	4650      	mov	r0, sl
 800bb44:	f7f4 fbd4 	bl	80002f0 <memchr>
 800bb48:	b140      	cbz	r0, 800bb5c <_vfiprintf_r+0x198>
 800bb4a:	2340      	movs	r3, #64	; 0x40
 800bb4c:	eba0 000a 	sub.w	r0, r0, sl
 800bb50:	fa03 f000 	lsl.w	r0, r3, r0
 800bb54:	9b04      	ldr	r3, [sp, #16]
 800bb56:	4303      	orrs	r3, r0
 800bb58:	3401      	adds	r4, #1
 800bb5a:	9304      	str	r3, [sp, #16]
 800bb5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb60:	482c      	ldr	r0, [pc, #176]	; (800bc14 <_vfiprintf_r+0x250>)
 800bb62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb66:	2206      	movs	r2, #6
 800bb68:	f7f4 fbc2 	bl	80002f0 <memchr>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d03f      	beq.n	800bbf0 <_vfiprintf_r+0x22c>
 800bb70:	4b29      	ldr	r3, [pc, #164]	; (800bc18 <_vfiprintf_r+0x254>)
 800bb72:	bb1b      	cbnz	r3, 800bbbc <_vfiprintf_r+0x1f8>
 800bb74:	9b03      	ldr	r3, [sp, #12]
 800bb76:	3307      	adds	r3, #7
 800bb78:	f023 0307 	bic.w	r3, r3, #7
 800bb7c:	3308      	adds	r3, #8
 800bb7e:	9303      	str	r3, [sp, #12]
 800bb80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb82:	443b      	add	r3, r7
 800bb84:	9309      	str	r3, [sp, #36]	; 0x24
 800bb86:	e767      	b.n	800ba58 <_vfiprintf_r+0x94>
 800bb88:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb8c:	460c      	mov	r4, r1
 800bb8e:	2001      	movs	r0, #1
 800bb90:	e7a5      	b.n	800bade <_vfiprintf_r+0x11a>
 800bb92:	2300      	movs	r3, #0
 800bb94:	3401      	adds	r4, #1
 800bb96:	9305      	str	r3, [sp, #20]
 800bb98:	4619      	mov	r1, r3
 800bb9a:	f04f 0c0a 	mov.w	ip, #10
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bba4:	3a30      	subs	r2, #48	; 0x30
 800bba6:	2a09      	cmp	r2, #9
 800bba8:	d903      	bls.n	800bbb2 <_vfiprintf_r+0x1ee>
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d0c5      	beq.n	800bb3a <_vfiprintf_r+0x176>
 800bbae:	9105      	str	r1, [sp, #20]
 800bbb0:	e7c3      	b.n	800bb3a <_vfiprintf_r+0x176>
 800bbb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	2301      	movs	r3, #1
 800bbba:	e7f0      	b.n	800bb9e <_vfiprintf_r+0x1da>
 800bbbc:	ab03      	add	r3, sp, #12
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	462a      	mov	r2, r5
 800bbc2:	4b16      	ldr	r3, [pc, #88]	; (800bc1c <_vfiprintf_r+0x258>)
 800bbc4:	a904      	add	r1, sp, #16
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	f7fd fd32 	bl	8009630 <_printf_float>
 800bbcc:	4607      	mov	r7, r0
 800bbce:	1c78      	adds	r0, r7, #1
 800bbd0:	d1d6      	bne.n	800bb80 <_vfiprintf_r+0x1bc>
 800bbd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbd4:	07d9      	lsls	r1, r3, #31
 800bbd6:	d405      	bmi.n	800bbe4 <_vfiprintf_r+0x220>
 800bbd8:	89ab      	ldrh	r3, [r5, #12]
 800bbda:	059a      	lsls	r2, r3, #22
 800bbdc:	d402      	bmi.n	800bbe4 <_vfiprintf_r+0x220>
 800bbde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbe0:	f7ff f9de 	bl	800afa0 <__retarget_lock_release_recursive>
 800bbe4:	89ab      	ldrh	r3, [r5, #12]
 800bbe6:	065b      	lsls	r3, r3, #25
 800bbe8:	f53f af12 	bmi.w	800ba10 <_vfiprintf_r+0x4c>
 800bbec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbee:	e711      	b.n	800ba14 <_vfiprintf_r+0x50>
 800bbf0:	ab03      	add	r3, sp, #12
 800bbf2:	9300      	str	r3, [sp, #0]
 800bbf4:	462a      	mov	r2, r5
 800bbf6:	4b09      	ldr	r3, [pc, #36]	; (800bc1c <_vfiprintf_r+0x258>)
 800bbf8:	a904      	add	r1, sp, #16
 800bbfa:	4630      	mov	r0, r6
 800bbfc:	f7fd ffa4 	bl	8009b48 <_printf_i>
 800bc00:	e7e4      	b.n	800bbcc <_vfiprintf_r+0x208>
 800bc02:	bf00      	nop
 800bc04:	0800c164 	.word	0x0800c164
 800bc08:	0800c184 	.word	0x0800c184
 800bc0c:	0800c144 	.word	0x0800c144
 800bc10:	0800c2fc 	.word	0x0800c2fc
 800bc14:	0800c306 	.word	0x0800c306
 800bc18:	08009631 	.word	0x08009631
 800bc1c:	0800b99f 	.word	0x0800b99f
 800bc20:	0800c302 	.word	0x0800c302

0800bc24 <_sbrk_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	4d06      	ldr	r5, [pc, #24]	; (800bc40 <_sbrk_r+0x1c>)
 800bc28:	2300      	movs	r3, #0
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	4608      	mov	r0, r1
 800bc2e:	602b      	str	r3, [r5, #0]
 800bc30:	f7f5 fcee 	bl	8001610 <_sbrk>
 800bc34:	1c43      	adds	r3, r0, #1
 800bc36:	d102      	bne.n	800bc3e <_sbrk_r+0x1a>
 800bc38:	682b      	ldr	r3, [r5, #0]
 800bc3a:	b103      	cbz	r3, 800bc3e <_sbrk_r+0x1a>
 800bc3c:	6023      	str	r3, [r4, #0]
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	240004b0 	.word	0x240004b0

0800bc44 <__sread>:
 800bc44:	b510      	push	{r4, lr}
 800bc46:	460c      	mov	r4, r1
 800bc48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc4c:	f000 f8e2 	bl	800be14 <_read_r>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	bfab      	itete	ge
 800bc54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc56:	89a3      	ldrhlt	r3, [r4, #12]
 800bc58:	181b      	addge	r3, r3, r0
 800bc5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc5e:	bfac      	ite	ge
 800bc60:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc62:	81a3      	strhlt	r3, [r4, #12]
 800bc64:	bd10      	pop	{r4, pc}

0800bc66 <__swrite>:
 800bc66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc6a:	461f      	mov	r7, r3
 800bc6c:	898b      	ldrh	r3, [r1, #12]
 800bc6e:	05db      	lsls	r3, r3, #23
 800bc70:	4605      	mov	r5, r0
 800bc72:	460c      	mov	r4, r1
 800bc74:	4616      	mov	r6, r2
 800bc76:	d505      	bpl.n	800bc84 <__swrite+0x1e>
 800bc78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f000 f898 	bl	800bdb4 <_lseek_r>
 800bc84:	89a3      	ldrh	r3, [r4, #12]
 800bc86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc8e:	81a3      	strh	r3, [r4, #12]
 800bc90:	4632      	mov	r2, r6
 800bc92:	463b      	mov	r3, r7
 800bc94:	4628      	mov	r0, r5
 800bc96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc9a:	f000 b817 	b.w	800bccc <_write_r>

0800bc9e <__sseek>:
 800bc9e:	b510      	push	{r4, lr}
 800bca0:	460c      	mov	r4, r1
 800bca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca6:	f000 f885 	bl	800bdb4 <_lseek_r>
 800bcaa:	1c43      	adds	r3, r0, #1
 800bcac:	89a3      	ldrh	r3, [r4, #12]
 800bcae:	bf15      	itete	ne
 800bcb0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bcb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bcb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bcba:	81a3      	strheq	r3, [r4, #12]
 800bcbc:	bf18      	it	ne
 800bcbe:	81a3      	strhne	r3, [r4, #12]
 800bcc0:	bd10      	pop	{r4, pc}

0800bcc2 <__sclose>:
 800bcc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcc6:	f000 b831 	b.w	800bd2c <_close_r>
	...

0800bccc <_write_r>:
 800bccc:	b538      	push	{r3, r4, r5, lr}
 800bcce:	4d07      	ldr	r5, [pc, #28]	; (800bcec <_write_r+0x20>)
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	4608      	mov	r0, r1
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	602a      	str	r2, [r5, #0]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	f7f4 fd70 	bl	80007c0 <_write>
 800bce0:	1c43      	adds	r3, r0, #1
 800bce2:	d102      	bne.n	800bcea <_write_r+0x1e>
 800bce4:	682b      	ldr	r3, [r5, #0]
 800bce6:	b103      	cbz	r3, 800bcea <_write_r+0x1e>
 800bce8:	6023      	str	r3, [r4, #0]
 800bcea:	bd38      	pop	{r3, r4, r5, pc}
 800bcec:	240004b0 	.word	0x240004b0

0800bcf0 <__assert_func>:
 800bcf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bcf2:	4614      	mov	r4, r2
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	4b09      	ldr	r3, [pc, #36]	; (800bd1c <__assert_func+0x2c>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4605      	mov	r5, r0
 800bcfc:	68d8      	ldr	r0, [r3, #12]
 800bcfe:	b14c      	cbz	r4, 800bd14 <__assert_func+0x24>
 800bd00:	4b07      	ldr	r3, [pc, #28]	; (800bd20 <__assert_func+0x30>)
 800bd02:	9100      	str	r1, [sp, #0]
 800bd04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd08:	4906      	ldr	r1, [pc, #24]	; (800bd24 <__assert_func+0x34>)
 800bd0a:	462b      	mov	r3, r5
 800bd0c:	f000 f81e 	bl	800bd4c <fiprintf>
 800bd10:	f000 f89f 	bl	800be52 <abort>
 800bd14:	4b04      	ldr	r3, [pc, #16]	; (800bd28 <__assert_func+0x38>)
 800bd16:	461c      	mov	r4, r3
 800bd18:	e7f3      	b.n	800bd02 <__assert_func+0x12>
 800bd1a:	bf00      	nop
 800bd1c:	24000010 	.word	0x24000010
 800bd20:	0800c30d 	.word	0x0800c30d
 800bd24:	0800c31a 	.word	0x0800c31a
 800bd28:	0800c348 	.word	0x0800c348

0800bd2c <_close_r>:
 800bd2c:	b538      	push	{r3, r4, r5, lr}
 800bd2e:	4d06      	ldr	r5, [pc, #24]	; (800bd48 <_close_r+0x1c>)
 800bd30:	2300      	movs	r3, #0
 800bd32:	4604      	mov	r4, r0
 800bd34:	4608      	mov	r0, r1
 800bd36:	602b      	str	r3, [r5, #0]
 800bd38:	f7f5 fc35 	bl	80015a6 <_close>
 800bd3c:	1c43      	adds	r3, r0, #1
 800bd3e:	d102      	bne.n	800bd46 <_close_r+0x1a>
 800bd40:	682b      	ldr	r3, [r5, #0]
 800bd42:	b103      	cbz	r3, 800bd46 <_close_r+0x1a>
 800bd44:	6023      	str	r3, [r4, #0]
 800bd46:	bd38      	pop	{r3, r4, r5, pc}
 800bd48:	240004b0 	.word	0x240004b0

0800bd4c <fiprintf>:
 800bd4c:	b40e      	push	{r1, r2, r3}
 800bd4e:	b503      	push	{r0, r1, lr}
 800bd50:	4601      	mov	r1, r0
 800bd52:	ab03      	add	r3, sp, #12
 800bd54:	4805      	ldr	r0, [pc, #20]	; (800bd6c <fiprintf+0x20>)
 800bd56:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd5a:	6800      	ldr	r0, [r0, #0]
 800bd5c:	9301      	str	r3, [sp, #4]
 800bd5e:	f7ff fe31 	bl	800b9c4 <_vfiprintf_r>
 800bd62:	b002      	add	sp, #8
 800bd64:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd68:	b003      	add	sp, #12
 800bd6a:	4770      	bx	lr
 800bd6c:	24000010 	.word	0x24000010

0800bd70 <_fstat_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	4d07      	ldr	r5, [pc, #28]	; (800bd90 <_fstat_r+0x20>)
 800bd74:	2300      	movs	r3, #0
 800bd76:	4604      	mov	r4, r0
 800bd78:	4608      	mov	r0, r1
 800bd7a:	4611      	mov	r1, r2
 800bd7c:	602b      	str	r3, [r5, #0]
 800bd7e:	f7f5 fc1e 	bl	80015be <_fstat>
 800bd82:	1c43      	adds	r3, r0, #1
 800bd84:	d102      	bne.n	800bd8c <_fstat_r+0x1c>
 800bd86:	682b      	ldr	r3, [r5, #0]
 800bd88:	b103      	cbz	r3, 800bd8c <_fstat_r+0x1c>
 800bd8a:	6023      	str	r3, [r4, #0]
 800bd8c:	bd38      	pop	{r3, r4, r5, pc}
 800bd8e:	bf00      	nop
 800bd90:	240004b0 	.word	0x240004b0

0800bd94 <_isatty_r>:
 800bd94:	b538      	push	{r3, r4, r5, lr}
 800bd96:	4d06      	ldr	r5, [pc, #24]	; (800bdb0 <_isatty_r+0x1c>)
 800bd98:	2300      	movs	r3, #0
 800bd9a:	4604      	mov	r4, r0
 800bd9c:	4608      	mov	r0, r1
 800bd9e:	602b      	str	r3, [r5, #0]
 800bda0:	f7f5 fc1d 	bl	80015de <_isatty>
 800bda4:	1c43      	adds	r3, r0, #1
 800bda6:	d102      	bne.n	800bdae <_isatty_r+0x1a>
 800bda8:	682b      	ldr	r3, [r5, #0]
 800bdaa:	b103      	cbz	r3, 800bdae <_isatty_r+0x1a>
 800bdac:	6023      	str	r3, [r4, #0]
 800bdae:	bd38      	pop	{r3, r4, r5, pc}
 800bdb0:	240004b0 	.word	0x240004b0

0800bdb4 <_lseek_r>:
 800bdb4:	b538      	push	{r3, r4, r5, lr}
 800bdb6:	4d07      	ldr	r5, [pc, #28]	; (800bdd4 <_lseek_r+0x20>)
 800bdb8:	4604      	mov	r4, r0
 800bdba:	4608      	mov	r0, r1
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	602a      	str	r2, [r5, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	f7f5 fc16 	bl	80015f4 <_lseek>
 800bdc8:	1c43      	adds	r3, r0, #1
 800bdca:	d102      	bne.n	800bdd2 <_lseek_r+0x1e>
 800bdcc:	682b      	ldr	r3, [r5, #0]
 800bdce:	b103      	cbz	r3, 800bdd2 <_lseek_r+0x1e>
 800bdd0:	6023      	str	r3, [r4, #0]
 800bdd2:	bd38      	pop	{r3, r4, r5, pc}
 800bdd4:	240004b0 	.word	0x240004b0

0800bdd8 <__ascii_mbtowc>:
 800bdd8:	b082      	sub	sp, #8
 800bdda:	b901      	cbnz	r1, 800bdde <__ascii_mbtowc+0x6>
 800bddc:	a901      	add	r1, sp, #4
 800bdde:	b142      	cbz	r2, 800bdf2 <__ascii_mbtowc+0x1a>
 800bde0:	b14b      	cbz	r3, 800bdf6 <__ascii_mbtowc+0x1e>
 800bde2:	7813      	ldrb	r3, [r2, #0]
 800bde4:	600b      	str	r3, [r1, #0]
 800bde6:	7812      	ldrb	r2, [r2, #0]
 800bde8:	1e10      	subs	r0, r2, #0
 800bdea:	bf18      	it	ne
 800bdec:	2001      	movne	r0, #1
 800bdee:	b002      	add	sp, #8
 800bdf0:	4770      	bx	lr
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	e7fb      	b.n	800bdee <__ascii_mbtowc+0x16>
 800bdf6:	f06f 0001 	mvn.w	r0, #1
 800bdfa:	e7f8      	b.n	800bdee <__ascii_mbtowc+0x16>

0800bdfc <__malloc_lock>:
 800bdfc:	4801      	ldr	r0, [pc, #4]	; (800be04 <__malloc_lock+0x8>)
 800bdfe:	f7ff b8ce 	b.w	800af9e <__retarget_lock_acquire_recursive>
 800be02:	bf00      	nop
 800be04:	240004a4 	.word	0x240004a4

0800be08 <__malloc_unlock>:
 800be08:	4801      	ldr	r0, [pc, #4]	; (800be10 <__malloc_unlock+0x8>)
 800be0a:	f7ff b8c9 	b.w	800afa0 <__retarget_lock_release_recursive>
 800be0e:	bf00      	nop
 800be10:	240004a4 	.word	0x240004a4

0800be14 <_read_r>:
 800be14:	b538      	push	{r3, r4, r5, lr}
 800be16:	4d07      	ldr	r5, [pc, #28]	; (800be34 <_read_r+0x20>)
 800be18:	4604      	mov	r4, r0
 800be1a:	4608      	mov	r0, r1
 800be1c:	4611      	mov	r1, r2
 800be1e:	2200      	movs	r2, #0
 800be20:	602a      	str	r2, [r5, #0]
 800be22:	461a      	mov	r2, r3
 800be24:	f7f5 fba2 	bl	800156c <_read>
 800be28:	1c43      	adds	r3, r0, #1
 800be2a:	d102      	bne.n	800be32 <_read_r+0x1e>
 800be2c:	682b      	ldr	r3, [r5, #0]
 800be2e:	b103      	cbz	r3, 800be32 <_read_r+0x1e>
 800be30:	6023      	str	r3, [r4, #0]
 800be32:	bd38      	pop	{r3, r4, r5, pc}
 800be34:	240004b0 	.word	0x240004b0

0800be38 <__ascii_wctomb>:
 800be38:	b149      	cbz	r1, 800be4e <__ascii_wctomb+0x16>
 800be3a:	2aff      	cmp	r2, #255	; 0xff
 800be3c:	bf85      	ittet	hi
 800be3e:	238a      	movhi	r3, #138	; 0x8a
 800be40:	6003      	strhi	r3, [r0, #0]
 800be42:	700a      	strbls	r2, [r1, #0]
 800be44:	f04f 30ff 	movhi.w	r0, #4294967295
 800be48:	bf98      	it	ls
 800be4a:	2001      	movls	r0, #1
 800be4c:	4770      	bx	lr
 800be4e:	4608      	mov	r0, r1
 800be50:	4770      	bx	lr

0800be52 <abort>:
 800be52:	b508      	push	{r3, lr}
 800be54:	2006      	movs	r0, #6
 800be56:	f000 f82b 	bl	800beb0 <raise>
 800be5a:	2001      	movs	r0, #1
 800be5c:	f7f5 fb7c 	bl	8001558 <_exit>

0800be60 <_raise_r>:
 800be60:	291f      	cmp	r1, #31
 800be62:	b538      	push	{r3, r4, r5, lr}
 800be64:	4604      	mov	r4, r0
 800be66:	460d      	mov	r5, r1
 800be68:	d904      	bls.n	800be74 <_raise_r+0x14>
 800be6a:	2316      	movs	r3, #22
 800be6c:	6003      	str	r3, [r0, #0]
 800be6e:	f04f 30ff 	mov.w	r0, #4294967295
 800be72:	bd38      	pop	{r3, r4, r5, pc}
 800be74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be76:	b112      	cbz	r2, 800be7e <_raise_r+0x1e>
 800be78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be7c:	b94b      	cbnz	r3, 800be92 <_raise_r+0x32>
 800be7e:	4620      	mov	r0, r4
 800be80:	f000 f830 	bl	800bee4 <_getpid_r>
 800be84:	462a      	mov	r2, r5
 800be86:	4601      	mov	r1, r0
 800be88:	4620      	mov	r0, r4
 800be8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be8e:	f000 b817 	b.w	800bec0 <_kill_r>
 800be92:	2b01      	cmp	r3, #1
 800be94:	d00a      	beq.n	800beac <_raise_r+0x4c>
 800be96:	1c59      	adds	r1, r3, #1
 800be98:	d103      	bne.n	800bea2 <_raise_r+0x42>
 800be9a:	2316      	movs	r3, #22
 800be9c:	6003      	str	r3, [r0, #0]
 800be9e:	2001      	movs	r0, #1
 800bea0:	e7e7      	b.n	800be72 <_raise_r+0x12>
 800bea2:	2400      	movs	r4, #0
 800bea4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bea8:	4628      	mov	r0, r5
 800beaa:	4798      	blx	r3
 800beac:	2000      	movs	r0, #0
 800beae:	e7e0      	b.n	800be72 <_raise_r+0x12>

0800beb0 <raise>:
 800beb0:	4b02      	ldr	r3, [pc, #8]	; (800bebc <raise+0xc>)
 800beb2:	4601      	mov	r1, r0
 800beb4:	6818      	ldr	r0, [r3, #0]
 800beb6:	f7ff bfd3 	b.w	800be60 <_raise_r>
 800beba:	bf00      	nop
 800bebc:	24000010 	.word	0x24000010

0800bec0 <_kill_r>:
 800bec0:	b538      	push	{r3, r4, r5, lr}
 800bec2:	4d07      	ldr	r5, [pc, #28]	; (800bee0 <_kill_r+0x20>)
 800bec4:	2300      	movs	r3, #0
 800bec6:	4604      	mov	r4, r0
 800bec8:	4608      	mov	r0, r1
 800beca:	4611      	mov	r1, r2
 800becc:	602b      	str	r3, [r5, #0]
 800bece:	f7f5 fb33 	bl	8001538 <_kill>
 800bed2:	1c43      	adds	r3, r0, #1
 800bed4:	d102      	bne.n	800bedc <_kill_r+0x1c>
 800bed6:	682b      	ldr	r3, [r5, #0]
 800bed8:	b103      	cbz	r3, 800bedc <_kill_r+0x1c>
 800beda:	6023      	str	r3, [r4, #0]
 800bedc:	bd38      	pop	{r3, r4, r5, pc}
 800bede:	bf00      	nop
 800bee0:	240004b0 	.word	0x240004b0

0800bee4 <_getpid_r>:
 800bee4:	f7f5 bb20 	b.w	8001528 <_getpid>

0800bee8 <_init>:
 800bee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beea:	bf00      	nop
 800beec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beee:	bc08      	pop	{r3}
 800bef0:	469e      	mov	lr, r3
 800bef2:	4770      	bx	lr

0800bef4 <_fini>:
 800bef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef6:	bf00      	nop
 800bef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800befa:	bc08      	pop	{r3}
 800befc:	469e      	mov	lr, r3
 800befe:	4770      	bx	lr
